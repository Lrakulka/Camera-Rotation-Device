// Created by Microsoft (R) C/C++ Compiler Version 11.00.50727.1 (5fc98081).
//
// f:\vebcam\host_po_skype_hidlibrary_win\host_po_skype_hidlibrary_win\debug\skype4com.tlh
//
// C++ source equivalent of Win32 type library Skype4COM.dll
// compiler-generated file created 03/13/14 at 20:55:17 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace SKYPE4COMLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("03282b5d-b38f-469d-849a-09b0a7f4881b"))
/* LIBID */ __SKYPE4COMLib;
struct __declspec(uuid("f9ada565-2fad-424d-878c-7ad12df9e617"))
/* dual interface */ IApplication;
struct __declspec(uuid("d8f1bcc4-2a73-47b9-83b3-d4d299ca5bc6"))
/* dual interface */ IApplicationStreamCollection;
struct __declspec(uuid("e072f615-f833-4bca-b473-cee44d302030"))
/* dual interface */ IApplicationStream;
struct __declspec(uuid("ec163200-44eb-483b-907f-a8c1cf56b8ee"))
/* dual interface */ IUserCollection;
struct __declspec(uuid("d0bc5168-a518-4192-9d20-0b907b23c4d1"))
/* dual interface */ IUser;
enum TUserSex;
enum TBuddyStatus;
enum TOnlineStatus;
struct __declspec(uuid("76036886-436c-405f-a96e-7835ccfb82f3"))
/* dual interface */ ICall;
enum TCallType;
enum TCallStatus;
enum TCallFailureReason;
struct __declspec(uuid("f825fe12-9826-4bd2-bf7e-1ed95b8480fe"))
/* dual interface */ IParticipantCollection;
struct __declspec(uuid("f1b2ad09-1961-4336-a6bf-93010b73de72"))
/* dual interface */ IParticipant;
enum TCallVideoStatus;
enum TCallVideoSendStatus;
enum TCallIoDeviceType;
struct __declspec(uuid("b76c04c9-0eb1-4748-b0c0-d01deb595906"))
/* dual interface */ ICallChannel;
enum TCallChannelType;
struct __declspec(uuid("30c27c77-525f-4a3f-b9dd-c5a77c67250d"))
/* dual interface */ ICallChannelManager;
struct __declspec(uuid("b1878bfe-53d3-402e-8c86-190b19af70d5"))
/* dual interface */ ISkype;
enum TUserStatus;
enum TConnectionStatus;
struct __declspec(uuid("8d82f88a-b307-4074-8ed5-11c3bd213452"))
/* dual interface */ IConversion;
enum TAttachmentStatus;
enum TChatLeaveReason;
enum TChatStatus;
enum TVoicemailType;
enum TVoicemailStatus;
enum TVoicemailFailureReason;
enum TChatMessageStatus;
enum TChatMessageType;
enum TGroupType;
enum TSmsMessageStatus;
enum TSmsMessageType;
enum TSmsTargetStatus;
struct __declspec(uuid("72e1ec13-0df9-48ae-8a31-e2900d85ba55"))
/* dual interface */ ICallCollection;
struct __declspec(uuid("9511117a-7bca-4669-be96-6ea6866975c1"))
/* dual interface */ IChatMessageCollection;
struct __declspec(uuid("4cff5c70-3c95-4566-824a-fa164586d535"))
/* dual interface */ IChatMessage;
struct __declspec(uuid("8c24106c-3368-4580-93e5-5ed4accde306"))
/* dual interface */ IChat;
struct __declspec(uuid("8ffc686b-2e5e-4763-8b03-ff4fd3a0c4da"))
/* dual interface */ IChatMemberCollection;
struct __declspec(uuid("9e9f0473-94c2-4fdd-85d2-43e3478765f9"))
/* dual interface */ IChatMember;
enum TChatMemberRole;
enum TChatType;
enum TChatMyStatus;
struct __declspec(uuid("48e046a8-31d7-4e5f-a611-47bf32b86405"))
/* dual interface */ ICommand;
struct __declspec(uuid("052a4165-010a-457d-a874-e661b6322846"))
/* dual interface */ IChatCollection;
struct __declspec(uuid("aeb48497-5090-479c-8be0-bd51597156a1"))
/* dual interface */ IConference;
struct __declspec(uuid("f3e0c529-7d4f-4af5-b501-27d25d4d2825"))
/* dual interface */ IConferenceCollection;
struct __declspec(uuid("21494848-bbd5-4192-be32-57d1a19d8e94"))
/* dual interface */ IVoicemailCollection;
struct __declspec(uuid("120b425e-6313-4924-b5a9-3e9f2e444a00"))
/* dual interface */ IVoicemail;
enum TCallHistory;
struct __declspec(uuid("b9a3d72f-04c1-4878-993c-d89f83e20569"))
/* dual interface */ IProfile;
struct __declspec(uuid("4c5c99dc-09cf-4a9c-bd94-8d655454a1f4"))
/* dual interface */ IGroupCollection;
struct __declspec(uuid("84513274-9c49-4aaa-b8fc-316eb32cfe95"))
/* dual interface */ IGroup;
struct __declspec(uuid("2bc8c53b-3312-4a77-ac87-31df18a1ec51"))
/* dual interface */ ISettings;
struct __declspec(uuid("838731b0-88e7-4bed-81dc-b35ca8433341"))
/* dual interface */ IClient;
struct __declspec(uuid("4df5f83a-0aba-417d-a6fc-62a68ae06ef7"))
/* dual interface */ IPluginEvent;
enum TPluginContext;
enum TPluginContactType;
struct __declspec(uuid("c4bdf667-3ff7-4b44-a9f4-f3937e3e6d86"))
/* dual interface */ IPluginMenuItem;
enum TApiSecurityContext;
struct __declspec(uuid("82d97f2a-0e17-40f3-8e01-24937f936ff4"))
/* dual interface */ ISmsMessage;
enum TSmsFailureReason;
struct __declspec(uuid("a2365ef3-4805-4dd3-a9d4-1a8ae3e17d84"))
/* dual interface */ ISmsTargetCollection;
struct __declspec(uuid("a9b9c33a-49a6-41d5-b13f-2aa4f284f406"))
/* dual interface */ ISmsTarget;
struct __declspec(uuid("bbda7d2d-b1c2-4af9-ab5b-d762341d8903"))
/* dual interface */ ISmsChunkCollection;
struct __declspec(uuid("a9062508-c926-4415-abb7-a5a46db34456"))
/* dual interface */ ISmsChunk;
struct __declspec(uuid("1d5bab2e-69cc-4136-8e02-fc20767dc9e2"))
/* dual interface */ ISmsMessageCollection;
struct __declspec(uuid("70a59a25-e823-4c3f-8f33-775008895ee3"))
/* dual interface */ IFileTransferCollection;
struct __declspec(uuid("4d36b368-b88c-45fa-b136-3ef77b2ead39"))
/* dual interface */ IFileTransfer;
enum TFileTransferType;
enum TFileTransferStatus;
enum TFileTransferFailureReason;
struct __declspec(uuid("8cb09087-e389-4c6d-a6a2-7d4bca8545d9"))
/* dual interface */ ICallChannelCollection;
struct __declspec(uuid("0ef6fd5d-607d-4ea3-9c90-683d73449e9d"))
/* dual interface */ ICallChannelMessage;
struct __declspec(uuid("55a5200c-b2e8-4795-a6fa-858ca3fe2f26"))
/* dual interface */ ISkypeApplication;
struct __declspec(uuid("54590fc3-0405-4a2d-b4a5-beac026577f2"))
/* dual interface */ ISkypeCall;
struct __declspec(uuid("3f6758d2-1d3c-4a8f-bd99-6fc6b0e2dc8f"))
/* dual interface */ ISkypeChat;
struct __declspec(uuid("a569b841-cc8a-4c12-b937-cbc17d9e64f0"))
/* dual interface */ ISkypeChatMessage;
struct __declspec(uuid("6cf6dbde-ab7c-4635-96ed-2ff525ab4457"))
/* dual interface */ ISkypeChatMember;
struct __declspec(uuid("30678f8a-c104-40c0-a6ae-7c150e83300e"))
/* dual interface */ ISkypeConference;
struct __declspec(uuid("2b929860-6af4-40df-9d77-308ca7c23e66"))
/* dual interface */ ISkypeFileTransfer;
struct __declspec(uuid("6d0b4547-771d-4c4f-b3e8-98a33fd24d2b"))
/* dual interface */ ISkypeSms;
struct __declspec(uuid("c219279c-f557-4bad-b3be-750e91ca9944"))
/* dual interface */ ISkypeUser;
struct __declspec(uuid("4d33e14e-9921-4860-92f4-5dc1586f403c"))
/* dual interface */ ISkypeVoicemail;
struct __declspec(uuid("f4f90cdd-c620-4118-945e-caa1bbeba435"))
/* dispinterface */ _ISkypeEvents;
struct __declspec(uuid("497abb45-20ae-49d1-a39d-cbe84a31b20c"))
/* dispinterface */ _ICallChannelManagerEvents;
struct /* coclass */ Skype;
struct __declspec(uuid("b77a3d1f-6847-402f-bb82-a0564379088e"))
/* dual interface */ ISkypePlugin;
struct /* coclass */ User;
struct /* coclass */ UserCollection;
struct /* coclass */ Conversion;
struct /* coclass */ Call;
struct /* coclass */ CallCollection;
struct /* coclass */ Chat;
struct /* coclass */ ChatCollection;
struct /* coclass */ Participant;
struct /* coclass */ ParticipantCollection;
struct /* coclass */ Conference;
struct /* coclass */ ConferenceCollection;
struct /* coclass */ Voicemail;
struct /* coclass */ VoicemailCollection;
struct /* coclass */ Application;
struct /* coclass */ ApplicationStream;
struct /* coclass */ ApplicationStreamCollection;
struct /* coclass */ ChatMessage;
struct /* coclass */ ChatMessageCollection;
struct /* coclass */ Profile;
struct /* coclass */ Group;
struct /* coclass */ GroupCollection;
struct /* coclass */ Settings;
struct /* coclass */ Client;
struct /* coclass */ Command;
struct /* coclass */ CallChannel;
struct /* coclass */ CallChannelCollection;
struct /* coclass */ CallChannelManager;
struct /* coclass */ CallChannelMessage;
struct /* coclass */ IEProtocolHandler;
struct /* coclass */ SmsMessage;
struct /* coclass */ SmsMessageCollection;
struct /* coclass */ SmsChunk;
struct /* coclass */ SmsChunkCollection;
struct /* coclass */ SmsTarget;
struct /* coclass */ SmsTargetCollection;
struct /* coclass */ PluginMenuItem;
struct /* coclass */ PluginEvent;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IApplicationStream, __uuidof(IApplicationStream));
_COM_SMARTPTR_TYPEDEF(IApplicationStreamCollection, __uuidof(IApplicationStreamCollection));
_COM_SMARTPTR_TYPEDEF(IUser, __uuidof(IUser));
_COM_SMARTPTR_TYPEDEF(IUserCollection, __uuidof(IUserCollection));
_COM_SMARTPTR_TYPEDEF(IApplication, __uuidof(IApplication));
_COM_SMARTPTR_TYPEDEF(IParticipant, __uuidof(IParticipant));
_COM_SMARTPTR_TYPEDEF(IParticipantCollection, __uuidof(IParticipantCollection));
_COM_SMARTPTR_TYPEDEF(ICall, __uuidof(ICall));
_COM_SMARTPTR_TYPEDEF(IConversion, __uuidof(IConversion));
_COM_SMARTPTR_TYPEDEF(ICallCollection, __uuidof(ICallCollection));
_COM_SMARTPTR_TYPEDEF(ICommand, __uuidof(ICommand));
_COM_SMARTPTR_TYPEDEF(IConference, __uuidof(IConference));
_COM_SMARTPTR_TYPEDEF(IConferenceCollection, __uuidof(IConferenceCollection));
_COM_SMARTPTR_TYPEDEF(IVoicemail, __uuidof(IVoicemail));
_COM_SMARTPTR_TYPEDEF(IVoicemailCollection, __uuidof(IVoicemailCollection));
_COM_SMARTPTR_TYPEDEF(IProfile, __uuidof(IProfile));
_COM_SMARTPTR_TYPEDEF(IGroup, __uuidof(IGroup));
_COM_SMARTPTR_TYPEDEF(IGroupCollection, __uuidof(IGroupCollection));
_COM_SMARTPTR_TYPEDEF(ISettings, __uuidof(ISettings));
_COM_SMARTPTR_TYPEDEF(IPluginEvent, __uuidof(IPluginEvent));
_COM_SMARTPTR_TYPEDEF(IPluginMenuItem, __uuidof(IPluginMenuItem));
_COM_SMARTPTR_TYPEDEF(IClient, __uuidof(IClient));
_COM_SMARTPTR_TYPEDEF(IFileTransfer, __uuidof(IFileTransfer));
_COM_SMARTPTR_TYPEDEF(IFileTransferCollection, __uuidof(IFileTransferCollection));
_COM_SMARTPTR_TYPEDEF(ICallChannelMessage, __uuidof(ICallChannelMessage));
_COM_SMARTPTR_TYPEDEF(ISkypeApplication, __uuidof(ISkypeApplication));
_COM_SMARTPTR_TYPEDEF(ISkypeCall, __uuidof(ISkypeCall));
_COM_SMARTPTR_TYPEDEF(ISkypeChatMessage, __uuidof(ISkypeChatMessage));
_COM_SMARTPTR_TYPEDEF(ISkypeConference, __uuidof(ISkypeConference));
_COM_SMARTPTR_TYPEDEF(ISkypeFileTransfer, __uuidof(ISkypeFileTransfer));
_COM_SMARTPTR_TYPEDEF(ISkypeUser, __uuidof(ISkypeUser));
_COM_SMARTPTR_TYPEDEF(ISkypeVoicemail, __uuidof(ISkypeVoicemail));
_COM_SMARTPTR_TYPEDEF(_ISkypeEvents, __uuidof(_ISkypeEvents));
_COM_SMARTPTR_TYPEDEF(_ICallChannelManagerEvents, __uuidof(_ICallChannelManagerEvents));
_COM_SMARTPTR_TYPEDEF(ISkypePlugin, __uuidof(ISkypePlugin));
_COM_SMARTPTR_TYPEDEF(ICallChannel, __uuidof(ICallChannel));
_COM_SMARTPTR_TYPEDEF(ICallChannelCollection, __uuidof(ICallChannelCollection));
_COM_SMARTPTR_TYPEDEF(ICallChannelManager, __uuidof(ICallChannelManager));
_COM_SMARTPTR_TYPEDEF(ISkype, __uuidof(ISkype));
_COM_SMARTPTR_TYPEDEF(IChatMessageCollection, __uuidof(IChatMessageCollection));
_COM_SMARTPTR_TYPEDEF(IChatMessage, __uuidof(IChatMessage));
_COM_SMARTPTR_TYPEDEF(IChat, __uuidof(IChat));
_COM_SMARTPTR_TYPEDEF(IChatMember, __uuidof(IChatMember));
_COM_SMARTPTR_TYPEDEF(IChatMemberCollection, __uuidof(IChatMemberCollection));
_COM_SMARTPTR_TYPEDEF(IChatCollection, __uuidof(IChatCollection));
_COM_SMARTPTR_TYPEDEF(ISkypeChat, __uuidof(ISkypeChat));
_COM_SMARTPTR_TYPEDEF(ISkypeChatMember, __uuidof(ISkypeChatMember));
_COM_SMARTPTR_TYPEDEF(ISmsMessage, __uuidof(ISmsMessage));
_COM_SMARTPTR_TYPEDEF(ISmsTarget, __uuidof(ISmsTarget));
_COM_SMARTPTR_TYPEDEF(ISmsTargetCollection, __uuidof(ISmsTargetCollection));
_COM_SMARTPTR_TYPEDEF(ISmsChunk, __uuidof(ISmsChunk));
_COM_SMARTPTR_TYPEDEF(ISmsChunkCollection, __uuidof(ISmsChunkCollection));
_COM_SMARTPTR_TYPEDEF(ISmsMessageCollection, __uuidof(ISmsMessageCollection));
_COM_SMARTPTR_TYPEDEF(ISkypeSms, __uuidof(ISkypeSms));

//
// Type library items
//

struct __declspec(uuid("e072f615-f833-4bca-b473-cee44d302030"))
IApplicationStream : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplicationName))
    _bstr_t ApplicationName;
    __declspec(property(get=GetHandle))
    _bstr_t Handle;
    __declspec(property(get=GetDataLength))
    long DataLength;
    __declspec(property(get=GetPartnerHandle))
    _bstr_t PartnerHandle;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetApplicationName ( );
    _bstr_t GetHandle ( );
    _bstr_t Read ( );
    HRESULT Write (
        _bstr_t Text );
    HRESULT SendDatagram (
        _bstr_t Text );
    long GetDataLength ( );
    HRESULT Disconnect ( );
    _bstr_t GetPartnerHandle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ApplicationName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Read (
        /*[out,retval]*/ BSTR * pText ) = 0;
      virtual HRESULT __stdcall raw_Write (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_SendDatagram (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_DataLength (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
      virtual HRESULT __stdcall get_PartnerHandle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("d8f1bcc4-2a73-47b9-83b3-d4d299ca5bc6"))
IApplicationStreamCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IApplicationStreamPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IApplicationStream * pItem );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IApplicationStreamPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IApplicationStream * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IApplicationStream * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

enum __declspec(uuid("f2e9781b-286d-42c7-8fa3-7de5c52f286b"))
TUserSex
{
    usexUnknown = -1,
    usexMale = 0,
    usexFemale = 1
};

enum __declspec(uuid("5e758c58-f940-476c-b737-8d823737feba"))
TBuddyStatus
{
    budUnknown = -1,
    budNeverBeenFriend = 0,
    budDeletedFriend = 1,
    budPendingAuthorization = 2,
    budFriend = 3
};

enum __declspec(uuid("93f10c8a-d3e5-4e62-9315-1a5d21c9dbc3"))
TOnlineStatus
{
    olsUnknown = -1,
    olsOffline = 0,
    olsOnline = 1,
    olsAway = 2,
    olsNotAvailable = 3,
    olsDoNotDisturb = 4,
    olsSkypeOut = 5,
    olsSkypeMe = 6
};

struct __declspec(uuid("d0bc5168-a518-4192-9d20-0b907b23c4d1"))
IUser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandle,put=PutHandle))
    _bstr_t Handle;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetBirthday))
    DATE Birthday;
    __declspec(property(get=GetSex))
    enum TUserSex Sex;
    __declspec(property(get=GetCountry))
    _bstr_t Country;
    __declspec(property(get=GetProvince))
    _bstr_t Province;
    __declspec(property(get=GetCity))
    _bstr_t City;
    __declspec(property(get=GetPhoneHome))
    _bstr_t PhoneHome;
    __declspec(property(get=GetPhoneOffice))
    _bstr_t PhoneOffice;
    __declspec(property(get=GetPhoneMobile))
    _bstr_t PhoneMobile;
    __declspec(property(get=GetHomepage))
    _bstr_t Homepage;
    __declspec(property(get=GetAbout))
    _bstr_t About;
    __declspec(property(get=GetHasCallEquipment))
    VARIANT_BOOL HasCallEquipment;
    __declspec(property(get=GetBuddyStatus,put=PutBuddyStatus))
    enum TBuddyStatus BuddyStatus;
    __declspec(property(get=GetIsAuthorized,put=PutIsAuthorized))
    VARIANT_BOOL IsAuthorized;
    __declspec(property(get=GetIsBlocked,put=PutIsBlocked))
    VARIANT_BOOL IsBlocked;
    __declspec(property(get=GetDisplayName,put=PutDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetOnlineStatus))
    enum TOnlineStatus OnlineStatus;
    __declspec(property(get=GetLastOnline))
    DATE LastOnline;
    __declspec(property(get=GetCountryCode))
    _bstr_t CountryCode;
    __declspec(property(get=GetReceivedAuthRequest))
    _bstr_t ReceivedAuthRequest;
    __declspec(property(get=GetSpeedDial,put=PutSpeedDial))
    _bstr_t SpeedDial;
    __declspec(property(get=GetCanLeaveVoicemail))
    VARIANT_BOOL CanLeaveVoicemail;
    __declspec(property(get=GetMoodText))
    _bstr_t MoodText;
    __declspec(property(get=GetAliases))
    _bstr_t Aliases;
    __declspec(property(get=GetTimezone))
    long Timezone;
    __declspec(property(get=GetIsCallForwardActive))
    VARIANT_BOOL IsCallForwardActive;
    __declspec(property(get=GetLanguage))
    _bstr_t Language;
    __declspec(property(get=GetLanguageCode))
    _bstr_t LanguageCode;
    __declspec(property(get=GetIsVideoCapable))
    VARIANT_BOOL IsVideoCapable;
    __declspec(property(get=GetIsSkypeOutContact))
    VARIANT_BOOL IsSkypeOutContact;
    __declspec(property(get=GetNumberOfAuthBuddies))
    long NumberOfAuthBuddies;
    __declspec(property(get=GetRichMoodText))
    _bstr_t RichMoodText;
    __declspec(property(get=GetIsVoicemailCapable))
    VARIANT_BOOL IsVoicemailCapable;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHandle ( );
    void PutHandle (
        _bstr_t pVal );
    _bstr_t GetFullName ( );
    DATE GetBirthday ( );
    enum TUserSex GetSex ( );
    _bstr_t GetCountry ( );
    _bstr_t GetProvince ( );
    _bstr_t GetCity ( );
    _bstr_t GetPhoneHome ( );
    _bstr_t GetPhoneOffice ( );
    _bstr_t GetPhoneMobile ( );
    _bstr_t GetHomepage ( );
    _bstr_t GetAbout ( );
    VARIANT_BOOL GetHasCallEquipment ( );
    enum TBuddyStatus GetBuddyStatus ( );
    void PutBuddyStatus (
        enum TBuddyStatus pVal );
    VARIANT_BOOL GetIsAuthorized ( );
    void PutIsAuthorized (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetIsBlocked ( );
    void PutIsBlocked (
        VARIANT_BOOL pVal );
    _bstr_t GetDisplayName ( );
    enum TOnlineStatus GetOnlineStatus ( );
    DATE GetLastOnline ( );
    _bstr_t GetCountryCode ( );
    _bstr_t GetReceivedAuthRequest ( );
    _bstr_t GetSpeedDial ( );
    void PutSpeedDial (
        _bstr_t pVal );
    VARIANT_BOOL GetCanLeaveVoicemail ( );
    _bstr_t GetMoodText ( );
    _bstr_t GetAliases ( );
    long GetTimezone ( );
    VARIANT_BOOL GetIsCallForwardActive ( );
    _bstr_t GetLanguage ( );
    _bstr_t GetLanguageCode ( );
    VARIANT_BOOL GetIsVideoCapable ( );
    VARIANT_BOOL GetIsSkypeOutContact ( );
    long GetNumberOfAuthBuddies ( );
    void PutDisplayName (
        _bstr_t pVal );
    _bstr_t GetRichMoodText ( );
    VARIANT_BOOL GetIsVoicemailCapable ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Handle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Birthday (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_Sex (
        /*[out,retval]*/ enum TUserSex * pVal ) = 0;
      virtual HRESULT __stdcall get_Country (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Province (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_City (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PhoneHome (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PhoneOffice (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PhoneMobile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Homepage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_About (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_HasCallEquipment (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_BuddyStatus (
        /*[out,retval]*/ enum TBuddyStatus * pVal ) = 0;
      virtual HRESULT __stdcall put_BuddyStatus (
        /*[in]*/ enum TBuddyStatus pVal ) = 0;
      virtual HRESULT __stdcall get_IsAuthorized (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsAuthorized (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_IsBlocked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_IsBlocked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_OnlineStatus (
        /*[out,retval]*/ enum TOnlineStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_LastOnline (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_CountryCode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ReceivedAuthRequest (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SpeedDial (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SpeedDial (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CanLeaveVoicemail (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_MoodText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Aliases (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Timezone (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IsCallForwardActive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Language (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_LanguageCode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVideoCapable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsSkypeOutContact (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_NumberOfAuthBuddies (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_RichMoodText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVoicemailCapable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("ec163200-44eb-483b-907f-a8c1cf56b8ee"))
IUserCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IUserPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IUser * pUser );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IUserPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IUser * pUser ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IUser * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("f9ada565-2fad-424d-878c-7ad12df9e617"))
IApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetStreams))
    IApplicationStreamCollectionPtr Streams;
    __declspec(property(get=GetConnectableUsers))
    IUserCollectionPtr ConnectableUsers;
    __declspec(property(get=GetConnectingUsers))
    IUserCollectionPtr ConnectingUsers;
    __declspec(property(get=GetSendingStreams))
    IApplicationStreamCollectionPtr SendingStreams;
    __declspec(property(get=GetReceivedStreams))
    IApplicationStreamCollectionPtr ReceivedStreams;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    HRESULT Create ( );
    HRESULT Delete ( );
    IApplicationStreamCollectionPtr GetStreams ( );
    IUserCollectionPtr GetConnectableUsers ( );
    IUserCollectionPtr GetConnectingUsers ( );
    HRESULT Connect (
        _bstr_t Username,
        VARIANT_BOOL WaitConnected );
    IApplicationStreamCollectionPtr GetSendingStreams ( );
    IApplicationStreamCollectionPtr GetReceivedStreams ( );
    HRESULT SendDatagram (
        _bstr_t Text,
        struct IApplicationStreamCollection * pStreams );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Create ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Streams (
        /*[out,retval]*/ struct IApplicationStreamCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectableUsers (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectingUsers (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR Username,
        /*[in]*/ VARIANT_BOOL WaitConnected ) = 0;
      virtual HRESULT __stdcall get_SendingStreams (
        /*[out,retval]*/ struct IApplicationStreamCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ReceivedStreams (
        /*[out,retval]*/ struct IApplicationStreamCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SendDatagram (
        /*[in]*/ BSTR Text,
        /*[in]*/ struct IApplicationStreamCollection * pStreams ) = 0;
};

enum __declspec(uuid("38667a7c-df57-4c1d-ac65-f7fc87b0e000"))
TCallType
{
    cltUnknown = -1,
    cltIncomingPSTN = 0,
    cltOutgoingPSTN = 1,
    cltIncomingP2P = 2,
    cltOutgoingP2P = 3
};

enum __declspec(uuid("47e3aca4-04bd-4a4b-ab17-7ebf9fd7f5de"))
TCallStatus
{
    clsUnknown = -1,
    clsUnplaced = 0,
    clsRouting = 1,
    clsEarlyMedia = 2,
    clsFailed = 3,
    clsRinging = 4,
    clsInProgress = 5,
    clsOnHold = 6,
    clsFinished = 7,
    clsMissed = 8,
    clsRefused = 9,
    clsBusy = 10,
    clsCancelled = 11,
    clsLocalHold = 12,
    clsRemoteHold = 13,
    clsVoicemailBufferingGreeting = 14,
    clsVoicemailPlayingGreeting = 15,
    clsVoicemailRecording = 16,
    clsVoicemailUploading = 17,
    clsVoicemailSent = 18,
    clsVoicemailCancelled = 19,
    clsVoicemailFailed = 20,
    clsTransferring = 21,
    clsTransferred = 22
};

enum __declspec(uuid("dce03024-d231-45d4-ab69-d22c9e2954ba"))
TCallFailureReason
{
    cfrUnknown = -1,
    cfrMiscError = 0,
    cfrUserDoesNotExist = 1,
    cfrUserIsOffline = 2,
    cfrNoProxyFound = 3,
    cfrSessionTerminated = 4,
    cfrNoCommonCodec = 5,
    cfrSoundIOError = 6,
    cfrRemoteDeviceError = 7,
    cfrBlockedByRecipient = 8,
    cfrRecipientNotFriend = 9,
    cfrNotAuthorizedByRecipient = 10,
    cfrSoundRecordingError = 11
};

struct __declspec(uuid("f1b2ad09-1961-4336-a6bf-93010b73de72"))
IParticipant : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHandle))
    _bstr_t Handle;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetCallType))
    enum TCallType CallType;
    __declspec(property(get=GetCallStatus))
    enum TCallStatus CallStatus;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHandle ( );
    _bstr_t GetDisplayName ( );
    enum TCallType GetCallType ( );
    enum TCallStatus GetCallStatus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CallType (
        /*[out,retval]*/ enum TCallType * pVal ) = 0;
      virtual HRESULT __stdcall get_CallStatus (
        /*[out,retval]*/ enum TCallStatus * pVal ) = 0;
};

struct __declspec(uuid("f825fe12-9826-4bd2-bf7e-1ed95b8480fe"))
IParticipantCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IParticipantPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IParticipant * pParticipant );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IParticipantPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IParticipant * pParticipant ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IParticipant * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

enum __declspec(uuid("169e6e65-20f4-47ad-8329-02425cd53769"))
TCallVideoStatus
{
    cvsUnknown = -1,
    cvsNone = 0,
    cvsSendEnabled = 1,
    cvsReceiveEnabled = 2,
    cvsBothEnabled = 3
};

enum __declspec(uuid("944f55cf-f7ac-4955-8368-b89027ebc75c"))
TCallVideoSendStatus
{
    vssUnknown = -1,
    vssNotAvailable = 0,
    vssAvailable = 1,
    vssStarting = 2,
    vssRejected = 3,
    vssRunning = 4,
    vssStopping = 5,
    vssPaused = 6
};

enum __declspec(uuid("8b0d63f5-57ec-4305-8f0d-517b6e85bad2"))
TCallIoDeviceType
{
    callIoDeviceTypeUnknown = -1,
    callIoDeviceTypeSoundcard = 0,
    callIoDeviceTypePort = 1,
    callIoDeviceTypeFile = 2
};

struct __declspec(uuid("76036886-436c-405f-a96e-7835ccfb82f3"))
ICall : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetTimestamp))
    DATE Timestamp;
    __declspec(property(get=GetPartnerHandle))
    _bstr_t PartnerHandle;
    __declspec(property(get=GetPartnerDisplayName))
    _bstr_t PartnerDisplayName;
    __declspec(property(get=GetConferenceId))
    long ConferenceId;
    __declspec(property(get=GetType))
    enum TCallType Type;
    __declspec(property(get=GetStatus,put=PutStatus))
    enum TCallStatus Status;
    __declspec(property(get=GetFailureReason))
    enum TCallFailureReason FailureReason;
    __declspec(property(get=GetSubject))
    _bstr_t Subject;
    __declspec(property(get=GetPstnNumber))
    _bstr_t PstnNumber;
    __declspec(property(get=GetDuration))
    long Duration;
    __declspec(property(get=GetPstnStatus))
    _bstr_t PstnStatus;
    __declspec(property(get=GetSeen,put=PutSeen))
    VARIANT_BOOL Seen;
    __declspec(property(put=PutDTMF))
    _bstr_t DTMF;
    __declspec(property(get=GetParticipants))
    IParticipantCollectionPtr Participants;
    __declspec(property(get=GetVmDuration))
    long VmDuration;
    __declspec(property(get=GetVmAllowedDuration))
    long VmAllowedDuration;
    __declspec(property(get=GetVideoStatus))
    enum TCallVideoStatus VideoStatus;
    __declspec(property(get=GetVideoSendStatus))
    enum TCallVideoSendStatus VideoSendStatus;
    __declspec(property(get=GetVideoReceiveStatus))
    enum TCallVideoSendStatus VideoReceiveStatus;
    __declspec(property(get=GetRate))
    long Rate;
    __declspec(property(get=GetRateCurrency))
    _bstr_t RateCurrency;
    __declspec(property(get=GetRatePrecision))
    long RatePrecision;
    __declspec(property(get=GetInputDevice,put=PutInputDevice))
    _bstr_t InputDevice[];
    __declspec(property(get=GetOutputDevice,put=PutOutputDevice))
    _bstr_t OutputDevice[];
    __declspec(property(get=GetCaptureMicDevice,put=PutCaptureMicDevice))
    _bstr_t CaptureMicDevice[];
    __declspec(property(get=GetInputStatus))
    VARIANT_BOOL InputStatus;
    __declspec(property(get=GetForwardedBy))
    _bstr_t ForwardedBy;
    __declspec(property(get=GetCanTransfer))
    VARIANT_BOOL CanTransfer[];
    __declspec(property(get=GetTransferStatus))
    enum TCallStatus TransferStatus;
    __declspec(property(get=GetTransferActive))
    VARIANT_BOOL TransferActive;
    __declspec(property(get=GetTransferredBy))
    _bstr_t TransferredBy;
    __declspec(property(get=GetTransferredTo))
    _bstr_t TransferredTo;
    __declspec(property(get=GetTargetIdentity))
    _bstr_t TargetIdentity;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    DATE GetTimestamp ( );
    _bstr_t GetPartnerHandle ( );
    _bstr_t GetPartnerDisplayName ( );
    long GetConferenceId ( );
    enum TCallType GetType ( );
    enum TCallStatus GetStatus ( );
    void PutStatus (
        enum TCallStatus pVal );
    enum TCallFailureReason GetFailureReason ( );
    _bstr_t GetSubject ( );
    _bstr_t GetPstnNumber ( );
    long GetDuration ( );
    _bstr_t GetPstnStatus ( );
    void PutSeen (
        VARIANT_BOOL pVal );
    HRESULT Hold ( );
    HRESULT Resume ( );
    HRESULT Finish ( );
    HRESULT Answer ( );
    void PutDTMF (
        _bstr_t _arg1 );
    IParticipantCollectionPtr GetParticipants ( );
    HRESULT Join (
        long Id );
    long GetVmDuration ( );
    long GetVmAllowedDuration ( );
    enum TCallVideoStatus GetVideoStatus ( );
    enum TCallVideoSendStatus GetVideoSendStatus ( );
    enum TCallVideoSendStatus GetVideoReceiveStatus ( );
    HRESULT StartVideoSend ( );
    HRESULT StopVideoSend ( );
    HRESULT StartVideoReceive ( );
    HRESULT StopVideoReceive ( );
    HRESULT RedirectToVoicemail ( );
    HRESULT Forward ( );
    long GetRate ( );
    _bstr_t GetRateCurrency ( );
    long GetRatePrecision ( );
    _bstr_t GetInputDevice (
        enum TCallIoDeviceType DeviceType );
    void PutInputDevice (
        enum TCallIoDeviceType DeviceType,
        _bstr_t pVal );
    _bstr_t GetOutputDevice (
        enum TCallIoDeviceType DeviceType );
    void PutOutputDevice (
        enum TCallIoDeviceType DeviceType,
        _bstr_t pVal );
    _bstr_t GetCaptureMicDevice (
        enum TCallIoDeviceType DeviceType );
    void PutCaptureMicDevice (
        enum TCallIoDeviceType DeviceType,
        _bstr_t pVal );
    VARIANT_BOOL GetInputStatus ( );
    _bstr_t GetForwardedBy ( );
    VARIANT_BOOL GetSeen ( );
    VARIANT_BOOL GetCanTransfer (
        _bstr_t Target );
    enum TCallStatus GetTransferStatus ( );
    VARIANT_BOOL GetTransferActive ( );
    _bstr_t GetTransferredBy ( );
    _bstr_t GetTransferredTo ( );
    HRESULT Transfer (
        _bstr_t Target );
    _bstr_t GetTargetIdentity ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Timestamp (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerHandle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerDisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ConferenceId (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum TCallType * pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum TCallStatus * pVal ) = 0;
      virtual HRESULT __stdcall put_Status (
        /*[in]*/ enum TCallStatus pVal ) = 0;
      virtual HRESULT __stdcall get_FailureReason (
        /*[out,retval]*/ enum TCallFailureReason * pVal ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PstnNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PstnStatus (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Seen (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_Hold ( ) = 0;
      virtual HRESULT __stdcall raw_Resume ( ) = 0;
      virtual HRESULT __stdcall raw_Finish ( ) = 0;
      virtual HRESULT __stdcall raw_Answer ( ) = 0;
      virtual HRESULT __stdcall put_DTMF (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_Participants (
        /*[out,retval]*/ struct IParticipantCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Join (
        /*[in]*/ long Id ) = 0;
      virtual HRESULT __stdcall get_VmDuration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_VmAllowedDuration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_VideoStatus (
        /*[out,retval]*/ enum TCallVideoStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_VideoSendStatus (
        /*[out,retval]*/ enum TCallVideoSendStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_VideoReceiveStatus (
        /*[out,retval]*/ enum TCallVideoSendStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_StartVideoSend ( ) = 0;
      virtual HRESULT __stdcall raw_StopVideoSend ( ) = 0;
      virtual HRESULT __stdcall raw_StartVideoReceive ( ) = 0;
      virtual HRESULT __stdcall raw_StopVideoReceive ( ) = 0;
      virtual HRESULT __stdcall raw_RedirectToVoicemail ( ) = 0;
      virtual HRESULT __stdcall raw_Forward ( ) = 0;
      virtual HRESULT __stdcall get_Rate (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_RateCurrency (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RatePrecision (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_InputDevice (
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_InputDevice (
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_OutputDevice (
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_OutputDevice (
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CaptureMicDevice (
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CaptureMicDevice (
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_InputStatus (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ForwardedBy (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Seen (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CanTransfer (
        /*[in]*/ BSTR Target,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_TransferStatus (
        /*[out,retval]*/ enum TCallStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_TransferActive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_TransferredBy (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_TransferredTo (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Transfer (
        /*[in]*/ BSTR Target ) = 0;
      virtual HRESULT __stdcall get_TargetIdentity (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

enum __declspec(uuid("46ff6ea6-e4b4-4e0a-b079-2e616f633396"))
TCallChannelType
{
    cctUnknown = -1,
    cctDatagram = 0,
    cctReliable = 1
};

enum __declspec(uuid("fbab58dc-9c60-4ee6-9826-26ee2335dd0a"))
TUserStatus
{
    cusUnknown = -1,
    cusOffline = 0,
    cusOnline = 1,
    cusAway = 2,
    cusNotAvailable = 3,
    cusDoNotDisturb = 4,
    cusInvisible = 5,
    cusLoggedOut = 6,
    cusSkypeMe = 7
};

enum __declspec(uuid("69658ffd-f587-4946-a4ec-7c0709ea9f44"))
TConnectionStatus
{
    conUnknown = -1,
    conOffline = 0,
    conConnecting = 1,
    conPausing = 2,
    conOnline = 3
};

enum __declspec(uuid("74a50ab8-1e6f-4246-8933-08e4fbbcf4e5"))
TAttachmentStatus
{
    apiAttachUnknown = -1,
    apiAttachSuccess = 0,
    apiAttachPendingAuthorization = 1,
    apiAttachRefused = 2,
    apiAttachNotAvailable = 3,
    apiAttachAvailable = 4
};

enum __declspec(uuid("fcdef5b9-bae9-4213-815f-0f68c7a8f03e"))
TChatLeaveReason
{
    leaUnknown = -1,
    leaUserNotFound = 0,
    leaUserIncapable = 1,
    leaAdderNotFriend = 2,
    leaAddedNotAuthorized = 3,
    leaAddDeclined = 4,
    leaUnsubscribe = 5
};

enum __declspec(uuid("d90b58cc-53aa-4a8c-8774-4b48bf307d9b"))
TChatStatus
{
    chsUnknown = -1,
    chsLegacyDialog = 0,
    chsDialog = 1,
    chsMultiNeedAccept = 2,
    chsMultiSubscribed = 3,
    chsUnsubscribed = 4
};

enum __declspec(uuid("7771be16-d5f0-4368-8a88-643b5b519a43"))
TVoicemailType
{
    vmtUnknown = -1,
    vmtIncoming = 0,
    vmtDefaultGreeting = 1,
    vmtCustomGreeting = 2,
    vmtOutgoing = 3
};

enum __declspec(uuid("f9810afa-dbc3-4327-9876-e94a47e7ced5"))
TVoicemailStatus
{
    vmsUnknown = -1,
    vmsNotDownloaded = 0,
    vmsDownloading = 1,
    vmsUnplayed = 2,
    vmsBuffering = 3,
    vmsPlaying = 4,
    vmsPlayed = 5,
    vmsBlank = 6,
    vmsRecording = 7,
    vmsRecorded = 8,
    vmsUploading = 9,
    vmsUploaded = 10,
    vmsDeleting = 11,
    vmsFailed = 12
};

enum __declspec(uuid("977e2f50-2361-4e81-b9f3-2303b8c8bb49"))
TVoicemailFailureReason
{
    vmrUnknown = -1,
    vmrNoError = 0,
    vmrMiscError = 1,
    vmrConnectError = 2,
    vmrNoPrivilege = 3,
    vmrNoVoicemail = 4,
    vmrFileReadError = 5,
    vmrFileWriteError = 6,
    vmrRecordingError = 7,
    vmrPlaybackError = 8
};

enum __declspec(uuid("6cf9ed72-45d0-479e-936a-eb34b748661e"))
TChatMessageStatus
{
    cmsUnknown = -1,
    cmsSending = 0,
    cmsSent = 1,
    cmsReceived = 2,
    cmsRead = 3
};

enum __declspec(uuid("28b277ba-2d86-467d-bb47-a805a15585c1"))
TChatMessageType
{
    cmeUnknown = -1,
    cmeCreatedChatWith = 0,
    cmeSawMembers = 1,
    cmeAddedMembers = 2,
    cmeSetTopic = 3,
    cmeSaid = 4,
    cmeLeft = 5,
    cmeEmoted = 6,
    cmePostedContacts = 7,
    cmeGapInChat = 8,
    cmeSetRole = 9,
    cmeKicked = 10,
    cmeSetOptions = 11,
    cmeKickBanned = 12,
    cmeJoinedAsApplicant = 13,
    cmeSetPicture = 14,
    cmeSetGuidelines = 15
};

enum __declspec(uuid("4015aae2-c9ad-40e6-a06c-a1609840ccdd"))
TGroupType
{
    grpUnknown = -1,
    grpCustomGroup = 0,
    grpAllUsers = 1,
    grpAllFriends = 2,
    grpSkypeFriends = 3,
    grpSkypeOutFriends = 4,
    grpOnlineFriends = 5,
    grpPendingAuthorizationFriends = 6,
    grpRecentlyContactedUsers = 7,
    grpUsersWaitingMyAuthorization = 8,
    grpUsersAuthorizedByMe = 9,
    grpUsersBlockedByMe = 10,
    grpUngroupedFriends = 11,
    grpSharedGroup = 12,
    grpProposedSharedGroup = 13
};

enum __declspec(uuid("531f8be0-6ab6-4521-a998-6c87bb9e5d5c"))
TSmsMessageStatus
{
    smsMessageStatusUnknown = -1,
    smsMessageStatusReceived = 0,
    smsMessageStatusRead = 1,
    smsMessageStatusComposing = 2,
    smsMessageStatusSendingToServer = 3,
    smsMessageStatusSentToServer = 4,
    smsMessageStatusDelivered = 5,
    smsMessageStatusSomeTargetsFailed = 6,
    smsMessageStatusFailed = 7
};

enum __declspec(uuid("48a2b076-ba6a-433b-8065-314987c89cc1"))
TSmsMessageType
{
    smsMessageTypeUnknown = -1,
    smsMessageTypeIncoming = 0,
    smsMessageTypeOutgoing = 1,
    smsMessageTypeCCRequest = 2,
    smsMessageTypeCCSubmit = 3
};

enum __declspec(uuid("34f2a71c-d453-4199-ab29-5b6e17b3fb5e"))
TSmsTargetStatus
{
    smsTargetStatusUnknown = -1,
    smsTargetStatusUndefined = 0,
    smsTargetStatusAnalyzing = 1,
    smsTargetStatusAcceptable = 2,
    smsTargetStatusNotRoutable = 3,
    smsTargetStatusDeliveryPending = 4,
    smsTargetStatusDeliverySuccessful = 5,
    smsTargetStatusDeliveryFailed = 6
};

struct __declspec(uuid("8d82f88a-b307-4074-8ed5-11c3bd213452"))
IConversion : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLanguage,put=PutLanguage))
    _bstr_t Language;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t OnlineStatusToText (
        enum TOnlineStatus Status );
    enum TOnlineStatus TextToOnlineStatus (
        _bstr_t Text );
    _bstr_t BuddyStatusToText (
        enum TBuddyStatus Status );
    enum TBuddyStatus TextToBuddyStatus (
        _bstr_t Text );
    _bstr_t CallStatusToText (
        enum TCallStatus Status );
    enum TCallStatus TextToCallStatus (
        _bstr_t Text );
    _bstr_t CallTypeToText (
        enum TCallType CallType );
    enum TCallType TextToCallType (
        _bstr_t Text );
    _bstr_t UserSexToText (
        enum TUserSex Sex );
    enum TUserSex TextToUserSex (
        _bstr_t Text );
    _bstr_t ConnectionStatusToText (
        enum TConnectionStatus Status );
    enum TConnectionStatus TextToConnectionStatus (
        _bstr_t Text );
    _bstr_t UserStatusToText (
        enum TUserStatus Status );
    enum TUserStatus TextToUserStatus (
        _bstr_t Text );
    _bstr_t CallFailureReasonToText (
        enum TCallFailureReason reason );
    _bstr_t AttachmentStatusToText (
        enum TAttachmentStatus Status );
    _bstr_t ChatLeaveReasonToText (
        enum TChatLeaveReason reason );
    _bstr_t ChatStatusToText (
        enum TChatStatus Status );
    _bstr_t VoicemailTypeToText (
        enum TVoicemailType Type );
    _bstr_t VoicemailStatusToText (
        enum TVoicemailStatus Status );
    enum TVoicemailStatus TextToVoicemailStatus (
        _bstr_t Text );
    _bstr_t VoicemailFailureReasonToText (
        enum TVoicemailFailureReason code );
    _bstr_t ChatMessageStatusToText (
        enum TChatMessageStatus Status );
    enum TChatMessageStatus TextToChatMessageStatus (
        _bstr_t Text );
    _bstr_t ChatMessageTypeToText (
        enum TChatMessageType Type );
    enum TChatMessageType TextToChatMessageType (
        _bstr_t Text );
    enum TAttachmentStatus TextToAttachmentStatus (
        _bstr_t Text );
    _bstr_t GroupTypeToText (
        enum TGroupType Type );
    enum TGroupType TextToGroupType (
        _bstr_t Text );
    _bstr_t CallVideoStatusToText (
        enum TCallVideoStatus Status );
    _bstr_t CallVideoSendStatusToText (
        enum TCallVideoSendStatus Status );
    _bstr_t GetLanguage ( );
    void PutLanguage (
        _bstr_t pVal );
    _bstr_t SmsMessageStatusToText (
        enum TSmsMessageStatus Status );
    _bstr_t SmsMessageTypeToText (
        enum TSmsMessageType Type );
    _bstr_t SmsTargetStatusToText (
        enum TSmsTargetStatus Status );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnlineStatusToText (
        /*[in]*/ enum TOnlineStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToOnlineStatus (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TOnlineStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_BuddyStatusToText (
        /*[in]*/ enum TBuddyStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToBuddyStatus (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TBuddyStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_CallStatusToText (
        /*[in]*/ enum TCallStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToCallStatus (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TCallStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_CallTypeToText (
        /*[in]*/ enum TCallType CallType,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToCallType (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TCallType * pVal ) = 0;
      virtual HRESULT __stdcall raw_UserSexToText (
        /*[in]*/ enum TUserSex Sex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToUserSex (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TUserSex * pVal ) = 0;
      virtual HRESULT __stdcall raw_ConnectionStatusToText (
        /*[in]*/ enum TConnectionStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToConnectionStatus (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TConnectionStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_UserStatusToText (
        /*[in]*/ enum TUserStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToUserStatus (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TUserStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_CallFailureReasonToText (
        /*[in]*/ enum TCallFailureReason reason,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_AttachmentStatusToText (
        /*[in]*/ enum TAttachmentStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_ChatLeaveReasonToText (
        /*[in]*/ enum TChatLeaveReason reason,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_ChatStatusToText (
        /*[in]*/ enum TChatStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_VoicemailTypeToText (
        /*[in]*/ enum TVoicemailType Type,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_VoicemailStatusToText (
        /*[in]*/ enum TVoicemailStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToVoicemailStatus (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TVoicemailStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_VoicemailFailureReasonToText (
        /*[in]*/ enum TVoicemailFailureReason code,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_ChatMessageStatusToText (
        /*[in]*/ enum TChatMessageStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToChatMessageStatus (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TChatMessageStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_ChatMessageTypeToText (
        /*[in]*/ enum TChatMessageType Type,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToChatMessageType (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TChatMessageType * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToAttachmentStatus (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TAttachmentStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_GroupTypeToText (
        /*[in]*/ enum TGroupType Type,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TextToGroupType (
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ enum TGroupType * pVal ) = 0;
      virtual HRESULT __stdcall raw_CallVideoStatusToText (
        /*[in]*/ enum TCallVideoStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_CallVideoSendStatusToText (
        /*[in]*/ enum TCallVideoSendStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Language (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Language (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_SmsMessageStatusToText (
        /*[in]*/ enum TSmsMessageStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SmsMessageTypeToText (
        /*[in]*/ enum TSmsMessageType Type,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SmsTargetStatusToText (
        /*[in]*/ enum TSmsTargetStatus Status,
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("72e1ec13-0df9-48ae-8a31-e2900d85ba55"))
ICallCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ICallPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct ICall * pCall );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    ICallPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct ICall * pCall ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICall * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

enum __declspec(uuid("ae9d03de-7e88-466a-a3e8-1e840acd9310"))
TChatMemberRole
{
    chatMemberRoleUnknown = -1,
    chatMemberRoleCreator = 0,
    chatMemberRoleMaster = 1,
    chatMemberRoleHelper = 2,
    chatMemberRoleUser = 3,
    chatMemberRoleListener = 4,
    chatMemberRoleApplicant = 5
};

enum __declspec(uuid("204d84e3-d7d1-450d-a038-6a3a5210e4fb"))
TChatType
{
    chatTypeUnknown = -1,
    chatTypeDialog = 0,
    chatTypeLegacyDialog = 1,
    chatTypeLegacyUnsubscribed = 2,
    chatTypeMultiChat = 3,
    chatTypeSharedGroup = 4
};

enum __declspec(uuid("1685094c-829a-431b-880c-fe61d82a085e"))
TChatMyStatus
{
    chatStatusUnknown = -1,
    chatStatusConnecting = 0,
    chatStatusWaitingRemoteAccept = 1,
    chatStatusAcceptRequired = 2,
    chatStatusPasswordRequired = 3,
    chatStatusSubscribed = 4,
    chatStatusUnsubscribed = 5,
    chatStatusDisbanded = 6,
    chatStatusQueuedBecauseChatIsFull = 7,
    chatStatusApplicationDenied = 8,
    chatStatusKicked = 9,
    chatStatusBanned = 10,
    chatStatusRetryConnecting = 11
};

struct __declspec(uuid("48e046a8-31d7-4e5f-a611-47bf32b86405"))
ICommand : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId,put=PutId))
    long Id;
    __declspec(property(get=GetTimeout,put=PutTimeout))
    long Timeout;
    __declspec(property(get=GetBlocking,put=PutBlocking))
    VARIANT_BOOL Blocking;
    __declspec(property(get=GetCommand,put=PutCommand))
    _bstr_t Command;
    __declspec(property(get=GetReply,put=PutReply))
    _bstr_t Reply;
    __declspec(property(get=GetExpected,put=PutExpected))
    _bstr_t Expected;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    void PutId (
        long pVal );
    long GetTimeout ( );
    void PutTimeout (
        long pVal );
    VARIANT_BOOL GetBlocking ( );
    void PutBlocking (
        VARIANT_BOOL pVal );
    _bstr_t GetCommand ( );
    void PutCommand (
        _bstr_t pVal );
    _bstr_t GetReply ( );
    void PutReply (
        _bstr_t pVal );
    _bstr_t GetExpected ( );
    void PutExpected (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Id (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Timeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Timeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Blocking (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Blocking (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Command (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Command (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Reply (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Reply (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Expected (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Expected (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("aeb48497-5090-479c-8be0-bd51597156a1"))
IConference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetCalls))
    ICallCollectionPtr Calls;
    __declspec(property(get=GetActiveCalls))
    ICallCollectionPtr ActiveCalls;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    ICallCollectionPtr GetCalls ( );
    ICallCollectionPtr GetActiveCalls ( );
    HRESULT Hold ( );
    HRESULT Resume ( );
    HRESULT Finish ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Calls (
        /*[out,retval]*/ struct ICallCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveCalls (
        /*[out,retval]*/ struct ICallCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Hold ( ) = 0;
      virtual HRESULT __stdcall raw_Resume ( ) = 0;
      virtual HRESULT __stdcall raw_Finish ( ) = 0;
};

struct __declspec(uuid("f3e0c529-7d4f-4af5-b501-27d25d4d2825"))
IConferenceCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IConferencePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IConference * pItem );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IConferencePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IConference * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IConference * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("120b425e-6313-4924-b5a9-3e9f2e444a00"))
IVoicemail : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum TVoicemailType Type;
    __declspec(property(get=GetPartnerHandle))
    _bstr_t PartnerHandle;
    __declspec(property(get=GetPartnerDisplayName))
    _bstr_t PartnerDisplayName;
    __declspec(property(get=GetStatus))
    enum TVoicemailStatus Status;
    __declspec(property(get=GetFailureReason))
    enum TVoicemailFailureReason FailureReason;
    __declspec(property(get=GetTimestamp))
    DATE Timestamp;
    __declspec(property(get=GetDuration))
    long Duration;
    __declspec(property(get=GetAllowedDuration))
    long AllowedDuration;
    __declspec(property(get=GetId))
    long Id;

    //
    // Wrapper methods for error-handling
    //

    enum TVoicemailType GetType ( );
    _bstr_t GetPartnerHandle ( );
    _bstr_t GetPartnerDisplayName ( );
    enum TVoicemailStatus GetStatus ( );
    enum TVoicemailFailureReason GetFailureReason ( );
    DATE GetTimestamp ( );
    long GetDuration ( );
    long GetAllowedDuration ( );
    long GetId ( );
    HRESULT Open ( );
    HRESULT StartPlayback ( );
    HRESULT StopPlayback ( );
    HRESULT Upload ( );
    HRESULT Download ( );
    HRESULT StartRecording ( );
    HRESULT StopRecording ( );
    HRESULT Delete ( );
    HRESULT StartPlaybackInCall ( );
    HRESULT SetUnplayed ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum TVoicemailType * pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerHandle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerDisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum TVoicemailStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_FailureReason (
        /*[out,retval]*/ enum TVoicemailFailureReason * pVal ) = 0;
      virtual HRESULT __stdcall get_Timestamp (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_Duration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_AllowedDuration (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Open ( ) = 0;
      virtual HRESULT __stdcall raw_StartPlayback ( ) = 0;
      virtual HRESULT __stdcall raw_StopPlayback ( ) = 0;
      virtual HRESULT __stdcall raw_Upload ( ) = 0;
      virtual HRESULT __stdcall raw_Download ( ) = 0;
      virtual HRESULT __stdcall raw_StartRecording ( ) = 0;
      virtual HRESULT __stdcall raw_StopRecording ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_StartPlaybackInCall ( ) = 0;
      virtual HRESULT __stdcall raw_SetUnplayed ( ) = 0;
};

struct __declspec(uuid("21494848-bbd5-4192-be32-57d1a19d8e94"))
IVoicemailCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IVoicemailPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IVoicemail * pItem );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IVoicemailPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IVoicemail * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IVoicemail * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

enum __declspec(uuid("aa127663-5272-473d-b14c-1a8bc3fb66c6"))
TCallHistory
{
    chsAllCalls = 0,
    chsMissedCalls = 1,
    chsIncomingCalls = 2,
    chsOutgoingCalls = 3
};

struct __declspec(uuid("b9a3d72f-04c1-4878-993c-d89f83e20569"))
IProfile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFullName,put=PutFullName))
    _bstr_t FullName;
    __declspec(property(get=GetBirthday,put=PutBirthday))
    _bstr_t Birthday;
    __declspec(property(get=GetSex,put=PutSex))
    enum TUserSex Sex;
    __declspec(property(get=GetLanguages,put=PutLanguages))
    _bstr_t Languages;
    __declspec(property(get=GetCountry,put=PutCountry))
    _bstr_t Country;
    __declspec(property(get=GetProvince,put=PutProvince))
    _bstr_t Province;
    __declspec(property(get=GetCity,put=PutCity))
    _bstr_t City;
    __declspec(property(get=GetPhoneHome,put=PutPhoneHome))
    _bstr_t PhoneHome;
    __declspec(property(get=GetPhoneOffice,put=PutPhoneOffice))
    _bstr_t PhoneOffice;
    __declspec(property(get=GetPhoneMobile,put=PutPhoneMobile))
    _bstr_t PhoneMobile;
    __declspec(property(get=GetHomepage,put=PutHomepage))
    _bstr_t Homepage;
    __declspec(property(get=GetAbout,put=PutAbout))
    _bstr_t About;
    __declspec(property(get=GetMoodText,put=PutMoodText))
    _bstr_t MoodText;
    __declspec(property(get=GetTimezone,put=PutTimezone))
    long Timezone;
    __declspec(property(get=GetCallNoAnswerTimeout,put=PutCallNoAnswerTimeout))
    short CallNoAnswerTimeout;
    __declspec(property(get=GetCallApplyCF,put=PutCallApplyCF))
    VARIANT_BOOL CallApplyCF;
    __declspec(property(get=GetCallSendToVM,put=PutCallSendToVM))
    VARIANT_BOOL CallSendToVM;
    __declspec(property(get=GetCallForwardRules,put=PutCallForwardRules))
    _bstr_t CallForwardRules;
    __declspec(property(get=GetBalance))
    long Balance;
    __declspec(property(get=GetBalanceCurrency))
    _bstr_t BalanceCurrency;
    __declspec(property(get=GetBalanceToText))
    _bstr_t BalanceToText;
    __declspec(property(get=GetIPCountry))
    _bstr_t IPCountry;
    __declspec(property(get=GetValidatedSmsNumbers))
    _bstr_t ValidatedSmsNumbers;
    __declspec(property(get=GetRichMoodText,put=PutRichMoodText))
    _bstr_t RichMoodText;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFullName ( );
    void PutFullName (
        _bstr_t pVal );
    _bstr_t GetBirthday ( );
    void PutBirthday (
        _bstr_t pVal );
    enum TUserSex GetSex ( );
    void PutSex (
        enum TUserSex pVal );
    _bstr_t GetLanguages ( );
    void PutLanguages (
        _bstr_t pVal );
    _bstr_t GetCountry ( );
    void PutCountry (
        _bstr_t pVal );
    _bstr_t GetProvince ( );
    void PutProvince (
        _bstr_t pVal );
    _bstr_t GetCity ( );
    void PutCity (
        _bstr_t pVal );
    _bstr_t GetPhoneHome ( );
    void PutPhoneHome (
        _bstr_t pVal );
    _bstr_t GetPhoneOffice ( );
    void PutPhoneOffice (
        _bstr_t pVal );
    _bstr_t GetPhoneMobile ( );
    void PutPhoneMobile (
        _bstr_t pVal );
    _bstr_t GetHomepage ( );
    void PutHomepage (
        _bstr_t pVal );
    _bstr_t GetAbout ( );
    void PutAbout (
        _bstr_t pVal );
    _bstr_t GetMoodText ( );
    void PutMoodText (
        _bstr_t pVal );
    long GetTimezone ( );
    void PutTimezone (
        long pVal );
    short GetCallNoAnswerTimeout ( );
    void PutCallNoAnswerTimeout (
        short pVal );
    VARIANT_BOOL GetCallApplyCF ( );
    void PutCallApplyCF (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetCallSendToVM ( );
    void PutCallSendToVM (
        VARIANT_BOOL pVal );
    _bstr_t GetCallForwardRules ( );
    void PutCallForwardRules (
        _bstr_t pVal );
    long GetBalance ( );
    _bstr_t GetBalanceCurrency ( );
    _bstr_t GetBalanceToText ( );
    _bstr_t GetIPCountry ( );
    _bstr_t GetValidatedSmsNumbers ( );
    _bstr_t GetRichMoodText ( );
    void PutRichMoodText (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_FullName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Birthday (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Birthday (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Sex (
        /*[out,retval]*/ enum TUserSex * pVal ) = 0;
      virtual HRESULT __stdcall put_Sex (
        /*[in]*/ enum TUserSex pVal ) = 0;
      virtual HRESULT __stdcall get_Languages (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Languages (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Country (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Country (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Province (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Province (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_City (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_City (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PhoneHome (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PhoneHome (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PhoneOffice (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PhoneOffice (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PhoneMobile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_PhoneMobile (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Homepage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Homepage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_About (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_About (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MoodText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_MoodText (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Timezone (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Timezone (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_CallNoAnswerTimeout (
        /*[out,retval]*/ short * pVal ) = 0;
      virtual HRESULT __stdcall put_CallNoAnswerTimeout (
        /*[in]*/ short pVal ) = 0;
      virtual HRESULT __stdcall get_CallApplyCF (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CallApplyCF (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CallSendToVM (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CallSendToVM (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_CallForwardRules (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CallForwardRules (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Balance (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_BalanceCurrency (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BalanceToText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IPCountry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ValidatedSmsNumbers (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_RichMoodText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_RichMoodText (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("84513274-9c49-4aaa-b8fc-316eb32cfe95"))
IGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetType))
    enum TGroupType Type;
    __declspec(property(get=GetCustomGroupId))
    _bstr_t CustomGroupId;
    __declspec(property(get=GetDisplayName,put=PutDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetUsers))
    IUserCollectionPtr Users;
    __declspec(property(get=GetOnlineUsers))
    IUserCollectionPtr OnlineUsers;
    __declspec(property(get=GetIsVisible))
    VARIANT_BOOL IsVisible;
    __declspec(property(get=GetIsExpanded))
    VARIANT_BOOL IsExpanded;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    enum TGroupType GetType ( );
    _bstr_t GetCustomGroupId ( );
    _bstr_t GetDisplayName ( );
    void PutDisplayName (
        _bstr_t pVal );
    IUserCollectionPtr GetUsers ( );
    IUserCollectionPtr GetOnlineUsers ( );
    VARIANT_BOOL GetIsVisible ( );
    VARIANT_BOOL GetIsExpanded ( );
    HRESULT AddUser (
        _bstr_t Username );
    HRESULT RemoveUser (
        _bstr_t Username );
    HRESULT Share (
        _bstr_t MessageText );
    HRESULT Accept ( );
    HRESULT Decline ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum TGroupType * pVal ) = 0;
      virtual HRESULT __stdcall get_CustomGroupId (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_DisplayName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Users (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_OnlineUsers (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_IsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsExpanded (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_AddUser (
        /*[in]*/ BSTR Username ) = 0;
      virtual HRESULT __stdcall raw_RemoveUser (
        /*[in]*/ BSTR Username ) = 0;
      virtual HRESULT __stdcall raw_Share (
        /*[in]*/ BSTR MessageText ) = 0;
      virtual HRESULT __stdcall raw_Accept ( ) = 0;
      virtual HRESULT __stdcall raw_Decline ( ) = 0;
};

struct __declspec(uuid("4c5c99dc-09cf-4a9c-bd94-8d655454a1f4"))
IGroupCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGroupPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IGroup * pGroup );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IGroupPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IGroup * pGroup ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IGroup * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("2bc8c53b-3312-4a77-ac87-31df18a1ec51"))
ISettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAudioIn,put=PutAudioIn))
    _bstr_t AudioIn;
    __declspec(property(get=GetAudioOut,put=PutAudioOut))
    _bstr_t AudioOut;
    __declspec(property(get=GetAutoAway,put=PutAutoAway))
    VARIANT_BOOL AutoAway;
    __declspec(property(get=GetRinger,put=PutRinger))
    _bstr_t Ringer;
    __declspec(property(put=PutAvatar))
    _bstr_t Avatar[];
    __declspec(property(get=GetRingToneStatus,put=PutRingToneStatus))
    VARIANT_BOOL RingToneStatus[];
    __declspec(property(put=PutRingTone))
    _bstr_t RingTone[];
    __declspec(property(get=GetVideoIn,put=PutVideoIn))
    _bstr_t VideoIn;
    __declspec(property(get=GetPCSpeaker,put=PutPCSpeaker))
    VARIANT_BOOL PCSpeaker;
    __declspec(property(get=GetAGC,put=PutAGC))
    VARIANT_BOOL AGC;
    __declspec(property(get=GetAEC,put=PutAEC))
    VARIANT_BOOL AEC;
    __declspec(property(get=GetLanguage,put=PutLanguage))
    _bstr_t Language;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetAudioIn ( );
    void PutAudioIn (
        _bstr_t pVal );
    _bstr_t GetAudioOut ( );
    void PutAudioOut (
        _bstr_t pVal );
    VARIANT_BOOL GetAutoAway ( );
    void PutAutoAway (
        VARIANT_BOOL pVal );
    _bstr_t GetRinger ( );
    void PutRinger (
        _bstr_t pVal );
    void PutAvatar (
        _bstr_t Id,
        _bstr_t _arg2 );
    VARIANT_BOOL GetRingToneStatus (
        _bstr_t Id );
    void PutRingTone (
        _bstr_t Id,
        _bstr_t _arg2 );
    _bstr_t GetVideoIn ( );
    void PutVideoIn (
        _bstr_t pVal );
    VARIANT_BOOL GetPCSpeaker ( );
    void PutPCSpeaker (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAGC ( );
    void PutAGC (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetAEC ( );
    void PutAEC (
        VARIANT_BOOL pVal );
    _bstr_t GetLanguage ( );
    void PutLanguage (
        _bstr_t pVal );
    void PutRingToneStatus (
        _bstr_t Id,
        VARIANT_BOOL pVal );
    HRESULT SaveAvatarToFile (
        _bstr_t Filename,
        _bstr_t AvatarId );
    HRESULT LoadAvatarFromFile (
        _bstr_t Filename,
        _bstr_t AvatarId );
    HRESULT ResetIdleTimer ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AudioIn (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AudioIn (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AudioOut (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_AudioOut (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_AutoAway (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AutoAway (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Ringer (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Ringer (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall put_Avatar (
        /*[in]*/ BSTR Id,
        /*[in]*/ BSTR _arg2 ) = 0;
      virtual HRESULT __stdcall get_RingToneStatus (
        /*[in]*/ BSTR Id,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_RingTone (
        /*[in]*/ BSTR Id,
        /*[in]*/ BSTR _arg2 ) = 0;
      virtual HRESULT __stdcall get_VideoIn (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_VideoIn (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_PCSpeaker (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_PCSpeaker (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AGC (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AGC (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_AEC (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_AEC (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Language (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Language (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall put_RingToneStatus (
        /*[in]*/ BSTR Id,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_SaveAvatarToFile (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR AvatarId ) = 0;
      virtual HRESULT __stdcall raw_LoadAvatarFromFile (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR AvatarId ) = 0;
      virtual HRESULT __stdcall raw_ResetIdleTimer ( ) = 0;
};

struct __declspec(uuid("4df5f83a-0aba-417d-a6fc-62a68ae06ef7"))
IPluginEvent : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    _bstr_t Id;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetId ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

enum __declspec(uuid("ed06559a-b942-49f5-ae48-dbd6bef807b9"))
TPluginContext
{
    pluginContextUnknown = -1,
    pluginContextChat = 0,
    pluginContextCall = 1,
    pluginContextContact = 2,
    pluginContextMyself = 3,
    pluginContextTools = 4
};

enum __declspec(uuid("000d0fd6-dc80-4cb1-a5af-1a748df8159e"))
TPluginContactType
{
    pluginContactTypeUnknown = -1,
    pluginContactTypeAll = 0,
    pluginContactTypeSkype = 1,
    pluginContactTypeSkypeOut = 2
};

struct __declspec(uuid("c4bdf667-3ff7-4b44-a9f4-f3937e3e6d86"))
IPluginMenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    _bstr_t Id;
    __declspec(property(put=PutCaption))
    _bstr_t Caption;
    __declspec(property(put=PutHint))
    _bstr_t Hint;
    __declspec(property(put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetId ( );
    void PutCaption (
        _bstr_t _arg1 );
    void PutHint (
        _bstr_t _arg1 );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_Hint (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("838731b0-88e7-4bed-81dc-b35ca8433341"))
IClient : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsRunning))
    VARIANT_BOOL IsRunning;
    __declspec(property(get=GetWallpaper,put=PutWallpaper))
    _bstr_t Wallpaper;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Start (
        VARIANT_BOOL Minimized,
        VARIANT_BOOL Nosplash );
    HRESULT Minimize ( );
    HRESULT Shutdown ( );
    VARIANT_BOOL GetIsRunning ( );
    HRESULT OpenProfileDialog ( );
    HRESULT OpenUserInfoDialog (
        _bstr_t Username );
    HRESULT OpenConferenceDialog ( );
    HRESULT OpenSearchDialog ( );
    HRESULT OpenOptionsDialog (
        _bstr_t Page );
    HRESULT OpenCallHistoryTab ( );
    HRESULT OpenContactsTab ( );
    HRESULT OpenDialpadTab ( );
    HRESULT OpenSendContactsDialog (
        _bstr_t Username );
    HRESULT OpenBlockedUsersDialog ( );
    HRESULT OpenImportContactsWizard ( );
    HRESULT OpenGettingStartedWizard ( );
    HRESULT OpenAuthorizationDialog (
        _bstr_t Username );
    HRESULT OpenDialog (
        _bstr_t Name,
        _bstr_t Param1,
        _bstr_t Param2 );
    HRESULT OpenVideoTestDialog ( );
    HRESULT OpenAddContactDialog (
        _bstr_t Username );
    HRESULT OpenMessageDialog (
        _bstr_t Username,
        _bstr_t Text );
    HRESULT OpenFileTransferDialog (
        _bstr_t User,
        _bstr_t Folder );
    HRESULT Focus ( );
    HRESULT ButtonPressed (
        _bstr_t Key );
    HRESULT ButtonReleased (
        _bstr_t Key );
    HRESULT OpenSmsDialog (
        _bstr_t SmsId );
    IPluginEventPtr CreateEvent (
        _bstr_t EventId,
        _bstr_t Caption,
        _bstr_t Hint );
    IPluginMenuItemPtr CreateMenuItem (
        _bstr_t MenuItemId,
        enum TPluginContext PluginContext,
        _bstr_t CaptionText,
        _bstr_t HintText,
        _bstr_t IconPath,
        VARIANT_BOOL Enabled,
        enum TPluginContactType ContactType,
        VARIANT_BOOL MultipleContacts );
    _bstr_t GetWallpaper ( );
    void PutWallpaper (
        _bstr_t pVal );
    HRESULT OpenLiveTab ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Start (
        /*[in]*/ VARIANT_BOOL Minimized,
        /*[in]*/ VARIANT_BOOL Nosplash ) = 0;
      virtual HRESULT __stdcall raw_Minimize ( ) = 0;
      virtual HRESULT __stdcall raw_Shutdown ( ) = 0;
      virtual HRESULT __stdcall get_IsRunning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenProfileDialog ( ) = 0;
      virtual HRESULT __stdcall raw_OpenUserInfoDialog (
        /*[in]*/ BSTR Username ) = 0;
      virtual HRESULT __stdcall raw_OpenConferenceDialog ( ) = 0;
      virtual HRESULT __stdcall raw_OpenSearchDialog ( ) = 0;
      virtual HRESULT __stdcall raw_OpenOptionsDialog (
        /*[in]*/ BSTR Page ) = 0;
      virtual HRESULT __stdcall raw_OpenCallHistoryTab ( ) = 0;
      virtual HRESULT __stdcall raw_OpenContactsTab ( ) = 0;
      virtual HRESULT __stdcall raw_OpenDialpadTab ( ) = 0;
      virtual HRESULT __stdcall raw_OpenSendContactsDialog (
        /*[in]*/ BSTR Username ) = 0;
      virtual HRESULT __stdcall raw_OpenBlockedUsersDialog ( ) = 0;
      virtual HRESULT __stdcall raw_OpenImportContactsWizard ( ) = 0;
      virtual HRESULT __stdcall raw_OpenGettingStartedWizard ( ) = 0;
      virtual HRESULT __stdcall raw_OpenAuthorizationDialog (
        /*[in]*/ BSTR Username ) = 0;
      virtual HRESULT __stdcall raw_OpenDialog (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Param1,
        /*[in]*/ BSTR Param2 ) = 0;
      virtual HRESULT __stdcall raw_OpenVideoTestDialog ( ) = 0;
      virtual HRESULT __stdcall raw_OpenAddContactDialog (
        /*[in]*/ BSTR Username ) = 0;
      virtual HRESULT __stdcall raw_OpenMessageDialog (
        /*[in]*/ BSTR Username,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_OpenFileTransferDialog (
        /*[in]*/ BSTR User,
        /*[in]*/ BSTR Folder ) = 0;
      virtual HRESULT __stdcall raw_Focus ( ) = 0;
      virtual HRESULT __stdcall raw_ButtonPressed (
        /*[in]*/ BSTR Key ) = 0;
      virtual HRESULT __stdcall raw_ButtonReleased (
        /*[in]*/ BSTR Key ) = 0;
      virtual HRESULT __stdcall raw_OpenSmsDialog (
        /*[in]*/ BSTR SmsId ) = 0;
      virtual HRESULT __stdcall raw_CreateEvent (
        /*[in]*/ BSTR EventId,
        /*[in]*/ BSTR Caption,
        /*[in]*/ BSTR Hint,
        /*[out,retval]*/ struct IPluginEvent * * pEvent ) = 0;
      virtual HRESULT __stdcall raw_CreateMenuItem (
        /*[in]*/ BSTR MenuItemId,
        /*[in]*/ enum TPluginContext PluginContext,
        /*[in]*/ BSTR CaptionText,
        /*[in]*/ BSTR HintText,
        /*[in]*/ BSTR IconPath,
        /*[in]*/ VARIANT_BOOL Enabled,
        /*[in]*/ enum TPluginContactType ContactType,
        /*[in]*/ VARIANT_BOOL MultipleContacts,
        /*[out,retval]*/ struct IPluginMenuItem * * pMenuItem ) = 0;
      virtual HRESULT __stdcall get_Wallpaper (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Wallpaper (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenLiveTab ( ) = 0;
};

enum __declspec(uuid("775c273f-6b14-4aa5-b33c-83127f41ba2e"))
TApiSecurityContext
{
    apiContextUnknown = 0,
    apiContextVoice = 1,
    apiContextMessaging = 2,
    apiContextAccount = 4,
    apiContextContacts = 8
};

enum __declspec(uuid("fe7e480a-5b32-432e-9711-e8e9c10c6bf9"))
TSmsFailureReason
{
    smsFailureReasonUnknown = -1,
    smsFailureReasonMiscError = 0,
    smsFailureReasonServerConnectFailed = 1,
    smsFailureReasonNoSmsCapability = 2,
    smsFailureReasonInsufficientFunds = 3,
    smsFailureReasonInvalidConfirmationCode = 4,
    smsFailureReasonUserBlocked = 5,
    smsFailureReasonIPBlocked = 6,
    smsFailureReasonNodeBlocked = 7
};

enum __declspec(uuid("bd808125-6cb8-46ad-88e1-13961434781f"))
TFileTransferType
{
    fileTransferTypeIncoming = 0,
    fileTransferTypeOutgoing = 1
};

enum __declspec(uuid("c4ce4074-11e0-4026-a809-5c6d259f1b7c"))
TFileTransferStatus
{
    fileTransferStatusNew = 0,
    fileTransferStatusConnecting = 1,
    fileTransferStatusWaitingForAccept = 2,
    fileTransferStatusTransferring = 3,
    fileTransferStatusTransferringOverRelay = 4,
    fileTransferStatusPaused = 5,
    fileTransferStatusRemotelyPaused = 6,
    fileTransferStatusCancelled = 7,
    fileTransferStatusCompleted = 8,
    fileTransferStatusFailed = 9
};

enum __declspec(uuid("a59e0aae-86ba-4d10-959b-4e75c2c8dad4"))
TFileTransferFailureReason
{
    fileTransferFailureReasonSenderNotAuthorized = 1,
    fileTransferFailureReasonRemotelyCancelled = 2,
    fileTransferFailureReasonFailedRead = 3,
    fileTransferFailureReasonFailedRemoteRead = 4,
    fileTransferFailureReasonFailedWrite = 5,
    fileTransferFailureReasonFailedRemoteWrite = 6,
    fileTransferFailureReasonRemoteDoesNotSupportFT = 7,
    fileTransferFailureReasonRemoteOfflineTooLong = 8
};

struct __declspec(uuid("4d36b368-b88c-45fa-b136-3ef77b2ead39"))
IFileTransfer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    _bstr_t Id;
    __declspec(property(get=GetType))
    enum TFileTransferType Type;
    __declspec(property(get=GetStatus))
    enum TFileTransferStatus Status;
    __declspec(property(get=GetFailureReason))
    enum TFileTransferFailureReason FailureReason;
    __declspec(property(get=GetPartnerHandle))
    _bstr_t PartnerHandle;
    __declspec(property(get=GetPartnerDisplayName))
    _bstr_t PartnerDisplayName;
    __declspec(property(get=GetStartTime))
    DATE StartTime;
    __declspec(property(get=GetFinishTime))
    DATE FinishTime;
    __declspec(property(get=GetFilePath))
    _bstr_t FilePath;
    __declspec(property(get=GetFilename))
    _bstr_t Filename;
    __declspec(property(get=GetBytesPerSecond))
    _bstr_t BytesPerSecond;
    __declspec(property(get=GetBytesTransferred))
    _bstr_t BytesTransferred;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetId ( );
    enum TFileTransferType GetType ( );
    enum TFileTransferStatus GetStatus ( );
    enum TFileTransferFailureReason GetFailureReason ( );
    _bstr_t GetPartnerHandle ( );
    _bstr_t GetPartnerDisplayName ( );
    DATE GetStartTime ( );
    DATE GetFinishTime ( );
    _bstr_t GetFilePath ( );
    _bstr_t GetFilename ( );
    _bstr_t GetBytesPerSecond ( );
    _bstr_t GetBytesTransferred ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum TFileTransferType * pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum TFileTransferStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_FailureReason (
        /*[out,retval]*/ enum TFileTransferFailureReason * pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerHandle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_PartnerDisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_StartTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_FinishTime (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Filename (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BytesPerSecond (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_BytesTransferred (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("70a59a25-e823-4c3f-8f33-775008895ee3"))
IFileTransferCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IFileTransferPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IFileTransfer * pItem );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IFileTransferPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IFileTransfer * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IFileTransfer * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("0ef6fd5d-607d-4ea3-9c90-683d73449e9d"))
ICallChannelMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("55a5200c-b2e8-4795-a6fa-858ca3fe2f26"))
ISkypeApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplicationStreams))
    IApplicationStreamCollectionPtr ApplicationStreams[];
    __declspec(property(get=GetApplicationConnectableUsers))
    IUserCollectionPtr ApplicationConnectableUsers[];
    __declspec(property(get=GetApplicationConnectingUsers))
    IUserCollectionPtr ApplicationConnectingUsers[];
    __declspec(property(get=GetApplicationSendingStreams))
    IApplicationStreamCollectionPtr ApplicationSendingStreams[];
    __declspec(property(get=GetApplicationReceivedStreams))
    IApplicationStreamCollectionPtr ApplicationReceivedStreams[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT CreateApplication (
        _bstr_t Name );
    HRESULT DeleteApplication (
        _bstr_t Name );
    IApplicationStreamCollectionPtr GetApplicationStreams (
        _bstr_t AppName );
    HRESULT ConnectApplicationUser (
        _bstr_t AppName,
        _bstr_t Username,
        VARIANT_BOOL WaitConnected );
    _bstr_t ReadApplicationStream (
        _bstr_t AppName,
        _bstr_t StreamHandle );
    HRESULT WriteApplicationStream (
        _bstr_t AppName,
        _bstr_t StreamHandle,
        _bstr_t Text );
    IUserCollectionPtr GetApplicationConnectableUsers (
        _bstr_t AppName );
    IUserCollectionPtr GetApplicationConnectingUsers (
        _bstr_t AppName );
    HRESULT DisconnectApplicationUser (
        _bstr_t AppName,
        _bstr_t Username );
    HRESULT SendApplicationDatagram (
        _bstr_t AppName,
        _bstr_t StreamHandle,
        _bstr_t Text );
    IApplicationStreamCollectionPtr GetApplicationSendingStreams (
        _bstr_t AppName );
    IApplicationStreamCollectionPtr GetApplicationReceivedStreams (
        _bstr_t AppName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreateApplication (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_DeleteApplication (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_ApplicationStreams (
        /*[in]*/ BSTR AppName,
        /*[out,retval]*/ struct IApplicationStreamCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ConnectApplicationUser (
        /*[in]*/ BSTR AppName,
        /*[in]*/ BSTR Username,
        /*[in]*/ VARIANT_BOOL WaitConnected ) = 0;
      virtual HRESULT __stdcall raw_ReadApplicationStream (
        /*[in]*/ BSTR AppName,
        /*[in]*/ BSTR StreamHandle,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_WriteApplicationStream (
        /*[in]*/ BSTR AppName,
        /*[in]*/ BSTR StreamHandle,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_ApplicationConnectableUsers (
        /*[in]*/ BSTR AppName,
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ApplicationConnectingUsers (
        /*[in]*/ BSTR AppName,
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_DisconnectApplicationUser (
        /*[in]*/ BSTR AppName,
        /*[in]*/ BSTR Username ) = 0;
      virtual HRESULT __stdcall raw_SendApplicationDatagram (
        /*[in]*/ BSTR AppName,
        /*[in]*/ BSTR StreamHandle,
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_ApplicationSendingStreams (
        /*[in]*/ BSTR AppName,
        /*[out,retval]*/ struct IApplicationStreamCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ApplicationReceivedStreams (
        /*[in]*/ BSTR AppName,
        /*[out,retval]*/ struct IApplicationStreamCollection * * pVal ) = 0;
};

struct __declspec(uuid("54590fc3-0405-4a2d-b4a5-beac026577f2"))
ISkypeCall : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCallTimestamp))
    DATE CallTimestamp[];
    __declspec(property(get=GetCallPartnerHandle))
    _bstr_t CallPartnerHandle[];
    __declspec(property(get=GetCallPartnerDisplayName))
    _bstr_t CallPartnerDisplayName[];
    __declspec(property(get=GetCallConferenceId))
    _bstr_t CallConferenceId[];
    __declspec(property(get=GetCallType))
    enum TCallType CallType[];
    __declspec(property(get=GetCallStatus,put=PutCallStatus))
    enum TCallStatus CallStatus[];
    __declspec(property(get=GetCallFailureReason))
    enum TCallFailureReason CallFailureReason[];
    __declspec(property(get=GetCallSubject))
    _bstr_t CallSubject[];
    __declspec(property(get=GetCallPstnNumber))
    _bstr_t CallPstnNumber[];
    __declspec(property(get=GetCallDuration))
    long CallDuration[];
    __declspec(property(get=GetCallPstnStatus))
    _bstr_t CallPstnStatus[];
    __declspec(property(get=GetCallSeenStatus,put=PutCallSeenStatus))
    VARIANT_BOOL CallSeenStatus[];
    __declspec(property(put=PutCallDTMF))
    _bstr_t CallDTMF[];
    __declspec(property(get=GetCallParticipants))
    IParticipantCollectionPtr CallParticipants[];
    __declspec(property(get=GetCallVmDuration))
    long CallVmDuration[];
    __declspec(property(get=GetCallVmAllowedDuration))
    long CallVmAllowedDuration[];
    __declspec(property(get=GetCallVideoStatus))
    enum TCallVideoStatus CallVideoStatus[];
    __declspec(property(get=GetCallVideoSendStatus))
    enum TCallVideoSendStatus CallVideoSendStatus[];
    __declspec(property(get=GetCallVideoReceiveStatus))
    enum TCallVideoSendStatus CallVideoReceiveStatus[];
    __declspec(property(get=GetCallRate))
    long CallRate[];
    __declspec(property(get=GetCallRateCurrency))
    _bstr_t CallRateCurrency[];
    __declspec(property(get=GetCallRatePrecision))
    long CallRatePrecision[];
    __declspec(property(get=GetCallInputDevice,put=PutCallInputDevice))
    _bstr_t CallInputDevice[][];
    __declspec(property(get=GetCallOutputDevice,put=PutCallOutputDevice))
    _bstr_t CallOutputDevice[][];
    __declspec(property(get=GetCallCaptureMicDevice,put=PutCallCaptureMicDevice))
    _bstr_t CallCaptureMicDevice[][];
    __declspec(property(get=GetCallInputStatus))
    VARIANT_BOOL CallInputStatus[];
    __declspec(property(get=GetCallForwardedBy))
    _bstr_t CallForwardedBy[];
    __declspec(property(get=GetCallCanTransfer))
    VARIANT_BOOL CallCanTransfer[][];
    __declspec(property(get=GetCallTransferStatus))
    enum TCallStatus CallTransferStatus[];
    __declspec(property(get=GetCallTransferActive))
    VARIANT_BOOL CallTransferActive[];
    __declspec(property(get=GetCallTransferredBy))
    _bstr_t CallTransferredBy[];
    __declspec(property(get=GetCallTransferredTo))
    _bstr_t CallTransferredTo[];
    __declspec(property(get=GetCallTargetIdentity))
    _bstr_t CallTargetIdentity[];

    //
    // Wrapper methods for error-handling
    //

    DATE GetCallTimestamp (
        _bstr_t CallId );
    _bstr_t GetCallPartnerHandle (
        _bstr_t CallId );
    _bstr_t GetCallPartnerDisplayName (
        _bstr_t CallId );
    _bstr_t GetCallConferenceId (
        _bstr_t CallId );
    enum TCallType GetCallType (
        _bstr_t CallId );
    enum TCallStatus GetCallStatus (
        _bstr_t CallId );
    void PutCallStatus (
        _bstr_t CallId,
        enum TCallStatus pVal );
    enum TCallFailureReason GetCallFailureReason (
        _bstr_t CallId );
    _bstr_t GetCallSubject (
        _bstr_t CallId );
    _bstr_t GetCallPstnNumber (
        _bstr_t CallId );
    long GetCallDuration (
        _bstr_t CallId );
    _bstr_t GetCallPstnStatus (
        _bstr_t CallId );
    void PutCallSeenStatus (
        _bstr_t CallId,
        VARIANT_BOOL pVal );
    HRESULT CallHold (
        _bstr_t CallId );
    HRESULT CallResume (
        _bstr_t CallId );
    HRESULT CallFinish (
        _bstr_t CallId );
    HRESULT CallAnswer (
        _bstr_t CallId );
    void PutCallDTMF (
        _bstr_t CallId,
        _bstr_t _arg2 );
    IParticipantCollectionPtr GetCallParticipants (
        _bstr_t CallId );
    HRESULT CallJoin (
        _bstr_t CallId1,
        _bstr_t CallId2 );
    long GetCallVmDuration (
        _bstr_t CallId );
    long GetCallVmAllowedDuration (
        _bstr_t CallId );
    enum TCallVideoStatus GetCallVideoStatus (
        _bstr_t CallId );
    enum TCallVideoSendStatus GetCallVideoSendStatus (
        _bstr_t CallId );
    enum TCallVideoSendStatus GetCallVideoReceiveStatus (
        _bstr_t CallId );
    HRESULT StartCallVideoSend (
        _bstr_t CallId );
    HRESULT StopCallVideoSend (
        _bstr_t CallId );
    HRESULT StartCallVideoReceive (
        _bstr_t CallId );
    HRESULT StopCallVideoReceive (
        _bstr_t CallId );
    HRESULT RedirectCallToVoicemail (
        _bstr_t CallId );
    HRESULT ForwardCall (
        _bstr_t CallId );
    long GetCallRate (
        _bstr_t CallId );
    _bstr_t GetCallRateCurrency (
        _bstr_t CallId );
    long GetCallRatePrecision (
        _bstr_t CallId );
    _bstr_t GetCallInputDevice (
        _bstr_t CallId,
        enum TCallIoDeviceType DeviceType );
    void PutCallInputDevice (
        _bstr_t CallId,
        enum TCallIoDeviceType DeviceType,
        _bstr_t pVal );
    _bstr_t GetCallOutputDevice (
        _bstr_t CallId,
        enum TCallIoDeviceType DeviceType );
    void PutCallOutputDevice (
        _bstr_t CallId,
        enum TCallIoDeviceType DeviceType,
        _bstr_t pVal );
    _bstr_t GetCallCaptureMicDevice (
        _bstr_t CallId,
        enum TCallIoDeviceType DeviceType );
    void PutCallCaptureMicDevice (
        _bstr_t CallId,
        enum TCallIoDeviceType DeviceType,
        _bstr_t pVal );
    VARIANT_BOOL GetCallInputStatus (
        _bstr_t CallId );
    _bstr_t GetCallForwardedBy (
        _bstr_t CallId );
    VARIANT_BOOL GetCallSeenStatus (
        _bstr_t CallId );
    VARIANT_BOOL GetCallCanTransfer (
        _bstr_t CallId,
        _bstr_t Target );
    enum TCallStatus GetCallTransferStatus (
        _bstr_t CallId );
    VARIANT_BOOL GetCallTransferActive (
        _bstr_t CallId );
    _bstr_t GetCallTransferredBy (
        _bstr_t CallId );
    _bstr_t GetCallTransferredTo (
        _bstr_t CallId );
    HRESULT TransferCall (
        _bstr_t CallId,
        _bstr_t Target );
    _bstr_t GetCallTargetIdentity (
        _bstr_t CallId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CallTimestamp (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_CallPartnerHandle (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CallPartnerDisplayName (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CallConferenceId (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CallType (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ enum TCallType * pVal ) = 0;
      virtual HRESULT __stdcall get_CallStatus (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ enum TCallStatus * pVal ) = 0;
      virtual HRESULT __stdcall put_CallStatus (
        /*[in]*/ BSTR CallId,
        /*[in]*/ enum TCallStatus pVal ) = 0;
      virtual HRESULT __stdcall get_CallFailureReason (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ enum TCallFailureReason * pVal ) = 0;
      virtual HRESULT __stdcall get_CallSubject (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CallPstnNumber (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CallDuration (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CallPstnStatus (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CallSeenStatus (
        /*[in]*/ BSTR CallId,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_CallHold (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall raw_CallResume (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall raw_CallFinish (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall raw_CallAnswer (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall put_CallDTMF (
        /*[in]*/ BSTR CallId,
        /*[in]*/ BSTR _arg2 ) = 0;
      virtual HRESULT __stdcall get_CallParticipants (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ struct IParticipantCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CallJoin (
        /*[in]*/ BSTR CallId1,
        /*[in]*/ BSTR CallId2 ) = 0;
      virtual HRESULT __stdcall get_CallVmDuration (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CallVmAllowedDuration (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CallVideoStatus (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ enum TCallVideoStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_CallVideoSendStatus (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ enum TCallVideoSendStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_CallVideoReceiveStatus (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ enum TCallVideoSendStatus * pVal ) = 0;
      virtual HRESULT __stdcall raw_StartCallVideoSend (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall raw_StopCallVideoSend (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall raw_StartCallVideoReceive (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall raw_StopCallVideoReceive (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall raw_RedirectCallToVoicemail (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall raw_ForwardCall (
        /*[in]*/ BSTR CallId ) = 0;
      virtual HRESULT __stdcall get_CallRate (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CallRateCurrency (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CallRatePrecision (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CallInputDevice (
        /*[in]*/ BSTR CallId,
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CallInputDevice (
        /*[in]*/ BSTR CallId,
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CallOutputDevice (
        /*[in]*/ BSTR CallId,
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CallOutputDevice (
        /*[in]*/ BSTR CallId,
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CallCaptureMicDevice (
        /*[in]*/ BSTR CallId,
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_CallCaptureMicDevice (
        /*[in]*/ BSTR CallId,
        /*[in]*/ enum TCallIoDeviceType DeviceType,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CallInputStatus (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CallForwardedBy (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CallSeenStatus (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CallCanTransfer (
        /*[in]*/ BSTR CallId,
        /*[in]*/ BSTR Target,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CallTransferStatus (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ enum TCallStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_CallTransferActive (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CallTransferredBy (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CallTransferredTo (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_TransferCall (
        /*[in]*/ BSTR CallId,
        /*[in]*/ BSTR Target ) = 0;
      virtual HRESULT __stdcall get_CallTargetIdentity (
        /*[in]*/ BSTR CallId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("a569b841-cc8a-4c12-b937-cbc17d9e64f0"))
ISkypeChatMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChatMessageTimestamp))
    DATE ChatMessageTimestamp[];
    __declspec(property(get=GetChatMessageFromHandle))
    _bstr_t ChatMessageFromHandle[];
    __declspec(property(get=GetChatMessageFromDisplayName))
    _bstr_t ChatMessageFromDisplayName[];
    __declspec(property(get=GetChatMessageType))
    enum TChatMessageType ChatMessageType[];
    __declspec(property(get=GetChatMessageStatus))
    enum TChatMessageStatus ChatMessageStatus[];
    __declspec(property(get=GetChatMessageLeaveReason))
    enum TChatLeaveReason ChatMessageLeaveReason[];
    __declspec(property(get=GetChatMessageBody,put=PutChatMessageBody))
    _bstr_t ChatMessageBody[];
    __declspec(property(get=GetChatMessageChatname))
    _bstr_t ChatMessageChatname[];
    __declspec(property(get=GetChatMessageUsers))
    IUserCollectionPtr ChatMessageUsers[];
    __declspec(property(put=PutChatMessageSeen))
    _bstr_t ChatMessageSeen;
    __declspec(property(get=GetChatMessageSender))
    IUserPtr ChatMessageSender[];
    __declspec(property(get=GetChatMessageIsEditable))
    VARIANT_BOOL ChatMessageIsEditable[];
    __declspec(property(get=GetChatMessageEditedBy))
    _bstr_t ChatMessageEditedBy[];
    __declspec(property(get=GetChatMessageRole))
    enum TChatMemberRole ChatMessageRole[];
    __declspec(property(get=GetChatMessageOptons))
    long ChatMessageOptons[];
    __declspec(property(get=GetChatMessageGuid))
    _bstr_t ChatMessageGuid[];

    //
    // Wrapper methods for error-handling
    //

    DATE GetChatMessageTimestamp (
        _bstr_t MessageId );
    _bstr_t GetChatMessageFromHandle (
        _bstr_t MessageId );
    _bstr_t GetChatMessageFromDisplayName (
        _bstr_t MessageId );
    enum TChatMessageType GetChatMessageType (
        _bstr_t MessageId );
    enum TChatMessageStatus GetChatMessageStatus (
        _bstr_t MessageId );
    enum TChatLeaveReason GetChatMessageLeaveReason (
        _bstr_t MessageId );
    _bstr_t GetChatMessageBody (
        _bstr_t MessageId );
    _bstr_t GetChatMessageChatname (
        _bstr_t MessageId );
    IUserCollectionPtr GetChatMessageUsers (
        _bstr_t MessageId );
    void PutChatMessageSeen (
        _bstr_t _arg1 );
    IUserPtr GetChatMessageSender (
        _bstr_t MessageId );
    VARIANT_BOOL GetChatMessageIsEditable (
        _bstr_t MessageId );
    _bstr_t GetChatMessageEditedBy (
        _bstr_t MessageId );
    DATE GetChatMessageEditedTimestamp (
        _bstr_t MessageId );
    void PutChatMessageBody (
        _bstr_t MessageId,
        _bstr_t pVal );
    enum TChatMemberRole GetChatMessageRole (
        _bstr_t MessageId );
    long GetChatMessageOptons (
        _bstr_t MessageId );
    _bstr_t GetChatMessageGuid (
        _bstr_t MessageId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChatMessageTimestamp (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageFromHandle (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageFromDisplayName (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageType (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ enum TChatMessageType * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageStatus (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ enum TChatMessageStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageLeaveReason (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ enum TChatLeaveReason * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageBody (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageChatname (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageUsers (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall put_ChatMessageSeen (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_ChatMessageSender (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ struct IUser * * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageIsEditable (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageEditedBy (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageEditedTimestamp (
        BSTR MessageId,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_ChatMessageBody (
        /*[in]*/ BSTR MessageId,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageRole (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ enum TChatMemberRole * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageOptons (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessageGuid (
        /*[in]*/ BSTR MessageId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("30678f8a-c104-40c0-a6ae-7c150e83300e"))
ISkypeConference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConferenceCalls))
    ICallCollectionPtr ConferenceCalls[];
    __declspec(property(get=GetConferenceActiveCalls))
    ICallCollectionPtr ConferenceActiveCalls[];

    //
    // Wrapper methods for error-handling
    //

    ICallCollectionPtr GetConferenceCalls (
        _bstr_t ConfId );
    ICallCollectionPtr GetConferenceActiveCalls (
        _bstr_t ConfId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ConferenceCalls (
        /*[in]*/ BSTR ConfId,
        /*[out,retval]*/ struct ICallCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ConferenceActiveCalls (
        /*[in]*/ BSTR ConfId,
        /*[out,retval]*/ struct ICallCollection * * pVal ) = 0;
};

struct __declspec(uuid("2b929860-6af4-40df-9d77-308ca7c23e66"))
ISkypeFileTransfer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFileTransferType))
    enum TFileTransferType FileTransferType[];
    __declspec(property(get=GetFileTransferStatus))
    enum TFileTransferStatus FileTransferStatus[];
    __declspec(property(get=GetFileTransferFailureReason))
    enum TFileTransferFailureReason FileTransferFailureReason[];
    __declspec(property(get=GetFileTransferPartnerHandle))
    _bstr_t FileTransferPartnerHandle[];
    __declspec(property(get=GetFileTransferPartnerDisplayName))
    _bstr_t FileTransferPartnerDisplayName[];
    __declspec(property(get=GetFileTransferStartTime))
    DATE FileTransferStartTime[];
    __declspec(property(get=GetFileTransferFinishTime))
    DATE FileTransferFinishTime[];
    __declspec(property(get=GetFileTransferFilePath))
    _bstr_t FileTransferFilePath[];
    __declspec(property(get=GetFileTransferFileName))
    _bstr_t FileTransferFileName[];
    __declspec(property(get=GetFileTransferBytesPerSecond))
    _bstr_t FileTransferBytesPerSecond[];
    __declspec(property(get=GetFileTransferBytesTransferred))
    _bstr_t FileTransferBytesTransferred[];

    //
    // Wrapper methods for error-handling
    //

    enum TFileTransferType GetFileTransferType (
        _bstr_t TransferId );
    enum TFileTransferStatus GetFileTransferStatus (
        _bstr_t TransferId );
    enum TFileTransferFailureReason GetFileTransferFailureReason (
        _bstr_t TransferId );
    _bstr_t GetFileTransferPartnerHandle (
        _bstr_t TransferId );
    _bstr_t GetFileTransferPartnerDisplayName (
        _bstr_t TransferId );
    DATE GetFileTransferStartTime (
        _bstr_t TransferId );
    DATE GetFileTransferFinishTime (
        _bstr_t TransferId );
    _bstr_t GetFileTransferFilePath (
        _bstr_t TransferId );
    _bstr_t GetFileTransferFileName (
        _bstr_t TransferId );
    _bstr_t GetFileTransferBytesPerSecond (
        _bstr_t TransferId );
    _bstr_t GetFileTransferBytesTransferred (
        _bstr_t TransferId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileTransferType (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ enum TFileTransferType * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferStatus (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ enum TFileTransferStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferFailureReason (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ enum TFileTransferFailureReason * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferPartnerHandle (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferPartnerDisplayName (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferStartTime (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferFinishTime (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferFilePath (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferFileName (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferBytesPerSecond (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransferBytesTransferred (
        /*[in]*/ BSTR TransferId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("c219279c-f557-4bad-b3be-750e91ca9944"))
ISkypeUser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserFullName))
    _bstr_t UserFullName[];
    __declspec(property(get=GetUserBirthday))
    DATE UserBirthday[];
    __declspec(property(get=GetUserSex))
    enum TUserSex UserSex[];
    __declspec(property(get=GetUserCountry))
    _bstr_t UserCountry[];
    __declspec(property(get=GetUserProvince))
    _bstr_t UserProvince[];
    __declspec(property(get=GetUserCity))
    _bstr_t UserCity[];
    __declspec(property(get=GetUserPhoneHome))
    _bstr_t UserPhoneHome[];
    __declspec(property(get=GetUserPhoneOffice))
    _bstr_t UserPhoneOffice[];
    __declspec(property(get=GetUserPhoneMobile))
    _bstr_t UserPhoneMobile[];
    __declspec(property(get=GetUserHomepage))
    _bstr_t UserHomepage[];
    __declspec(property(get=GetUserAbout))
    _bstr_t UserAbout[];
    __declspec(property(get=GetUserHasCallEquipment))
    VARIANT_BOOL UserHasCallEquipment[];
    __declspec(property(get=GetUserBuddyStatus,put=PutUserBuddyStatus))
    enum TBuddyStatus UserBuddyStatus[];
    __declspec(property(get=GetUserIsAuthorized,put=PutUserIsAuthorized))
    VARIANT_BOOL UserIsAuthorized[];
    __declspec(property(get=GetUserIsBlocked,put=PutUserIsBlocked))
    VARIANT_BOOL UserIsBlocked[];
    __declspec(property(get=GetUserDisplayName,put=PutUserDisplayName))
    _bstr_t UserDisplayName[];
    __declspec(property(get=GetUserOnlineStatus))
    enum TOnlineStatus UserOnlineStatus[];
    __declspec(property(get=GetUserLastOnline))
    DATE UserLastOnline[];
    __declspec(property(get=GetUserCountryCode))
    _bstr_t UserCountryCode[];
    __declspec(property(get=GetUserReceivedAuthRequest))
    _bstr_t UserReceivedAuthRequest[];
    __declspec(property(get=GetUserSpeedDial,put=PutUserSpeedDial))
    _bstr_t UserSpeedDial[];
    __declspec(property(get=GetUserCanLeaveVoicemail))
    VARIANT_BOOL UserCanLeaveVoicemail[];
    __declspec(property(get=GetUserMoodText))
    _bstr_t UserMoodText[];
    __declspec(property(get=GetUserAliases))
    _bstr_t UserAliases[];
    __declspec(property(get=GetUserTimezone))
    long UserTimezone[];
    __declspec(property(get=GetIsCallForwardActive))
    VARIANT_BOOL IsCallForwardActive[];
    __declspec(property(get=GetUserLanguage))
    _bstr_t UserLanguage[];
    __declspec(property(get=GetUserLanguageCode))
    _bstr_t UserLanguageCode[];
    __declspec(property(get=GetUserIsVideoCapable))
    VARIANT_BOOL UserIsVideoCapable[];
    __declspec(property(get=GetUserNumberOfAuthBuddies))
    long UserNumberOfAuthBuddies[];
    __declspec(property(get=GetUserRichMoodText))
    _bstr_t UserRichMoodText[];
    __declspec(property(get=GetUserIsVoicemailCapable))
    VARIANT_BOOL UserIsVoicemailCapable[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUserFullName (
        _bstr_t Username );
    DATE GetUserBirthday (
        _bstr_t Username );
    enum TUserSex GetUserSex (
        _bstr_t Username );
    _bstr_t GetUserCountry (
        _bstr_t Username );
    _bstr_t GetUserProvince (
        _bstr_t Username );
    _bstr_t GetUserCity (
        _bstr_t Username );
    _bstr_t GetUserPhoneHome (
        _bstr_t Username );
    _bstr_t GetUserPhoneOffice (
        _bstr_t Username );
    _bstr_t GetUserPhoneMobile (
        _bstr_t Username );
    _bstr_t GetUserHomepage (
        _bstr_t Username );
    _bstr_t GetUserAbout (
        _bstr_t Username );
    VARIANT_BOOL GetUserHasCallEquipment (
        _bstr_t Username );
    enum TBuddyStatus GetUserBuddyStatus (
        _bstr_t Username );
    void PutUserBuddyStatus (
        _bstr_t Username,
        enum TBuddyStatus pVal );
    VARIANT_BOOL GetUserIsAuthorized (
        _bstr_t Username );
    void PutUserIsAuthorized (
        _bstr_t Username,
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUserIsBlocked (
        _bstr_t Username );
    void PutUserIsBlocked (
        _bstr_t Username,
        VARIANT_BOOL pVal );
    _bstr_t GetUserDisplayName (
        _bstr_t Username );
    enum TOnlineStatus GetUserOnlineStatus (
        _bstr_t Username );
    DATE GetUserLastOnline (
        _bstr_t Username );
    _bstr_t GetUserCountryCode (
        _bstr_t Username );
    _bstr_t GetUserReceivedAuthRequest (
        _bstr_t Username );
    _bstr_t GetUserSpeedDial (
        _bstr_t Username );
    void PutUserSpeedDial (
        _bstr_t Username,
        _bstr_t pVal );
    VARIANT_BOOL GetUserCanLeaveVoicemail (
        _bstr_t Username );
    _bstr_t GetUserMoodText (
        _bstr_t Username );
    _bstr_t GetUserAliases (
        _bstr_t Username );
    long GetUserTimezone (
        _bstr_t Username );
    VARIANT_BOOL GetIsCallForwardActive (
        _bstr_t Username );
    _bstr_t GetUserLanguage (
        _bstr_t Username );
    _bstr_t GetUserLanguageCode (
        _bstr_t Username );
    VARIANT_BOOL GetUserIsVideoCapable (
        _bstr_t Username );
    long GetUserNumberOfAuthBuddies (
        _bstr_t Username );
    void PutUserDisplayName (
        _bstr_t Username,
        _bstr_t pVal );
    _bstr_t GetUserRichMoodText (
        _bstr_t Username );
    VARIANT_BOOL GetUserIsVoicemailCapable (
        _bstr_t Username );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UserFullName (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserBirthday (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_UserSex (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ enum TUserSex * pVal ) = 0;
      virtual HRESULT __stdcall get_UserCountry (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserProvince (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserCity (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserPhoneHome (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserPhoneOffice (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserPhoneMobile (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserHomepage (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserAbout (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserHasCallEquipment (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_UserBuddyStatus (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ enum TBuddyStatus * pVal ) = 0;
      virtual HRESULT __stdcall put_UserBuddyStatus (
        /*[in]*/ BSTR Username,
        /*[in]*/ enum TBuddyStatus pVal ) = 0;
      virtual HRESULT __stdcall get_UserIsAuthorized (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UserIsAuthorized (
        /*[in]*/ BSTR Username,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UserIsBlocked (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UserIsBlocked (
        /*[in]*/ BSTR Username,
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UserDisplayName (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserOnlineStatus (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ enum TOnlineStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_UserLastOnline (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_UserCountryCode (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserReceivedAuthRequest (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserSpeedDial (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_UserSpeedDial (
        /*[in]*/ BSTR Username,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UserCanLeaveVoicemail (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_UserMoodText (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserAliases (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserTimezone (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IsCallForwardActive (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_UserLanguage (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserLanguageCode (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserIsVideoCapable (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_UserNumberOfAuthBuddies (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_UserDisplayName (
        /*[in]*/ BSTR Username,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_UserRichMoodText (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_UserIsVoicemailCapable (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("4d33e14e-9921-4860-92f4-5dc1586f403c"))
ISkypeVoicemail : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVoicemailType))
    enum TVoicemailType VoicemailType[];
    __declspec(property(get=GetVoicemailPartnerHandle))
    _bstr_t VoicemailPartnerHandle[];
    __declspec(property(get=GetVoicemailPartnerDisplayName))
    _bstr_t VoicemailPartnerDisplayName[];
    __declspec(property(get=GetVoicemailStatus))
    enum TVoicemailStatus VoicemailStatus[];
    __declspec(property(get=GetVoicemailFailureReason))
    enum TVoicemailFailureReason VoicemailFailureReason[];
    __declspec(property(get=GetVoicemailTimestamp))
    DATE VoicemailTimestamp[];
    __declspec(property(get=GetVoicemailDuration))
    long VoicemailDuration[];
    __declspec(property(get=GetVoicemailAllowedDuration))
    long VoicemailAllowedDuration[];

    //
    // Wrapper methods for error-handling
    //

    enum TVoicemailType GetVoicemailType (
        _bstr_t VoicemailId );
    _bstr_t GetVoicemailPartnerHandle (
        _bstr_t VoicemailId );
    _bstr_t GetVoicemailPartnerDisplayName (
        _bstr_t VoicemailId );
    enum TVoicemailStatus GetVoicemailStatus (
        _bstr_t VoicemailId );
    enum TVoicemailFailureReason GetVoicemailFailureReason (
        _bstr_t VoicemailId );
    DATE GetVoicemailTimestamp (
        _bstr_t VoicemailId );
    long GetVoicemailDuration (
        _bstr_t VoicemailId );
    long GetVoicemailAllowedDuration (
        _bstr_t VoicemailId );
    HRESULT OpenVoicemail (
        _bstr_t VoicemailId );
    HRESULT StartVoicemailPlayback (
        _bstr_t VoicemailId );
    HRESULT StopVoicemailPlayback (
        _bstr_t VoicemailId );
    HRESULT UploadVoicemail (
        _bstr_t VoicemailId );
    HRESULT DownloadVoicemail (
        _bstr_t VoicemailId );
    HRESULT StartVoicemailRecording (
        _bstr_t VoicemailId );
    HRESULT StopVoicemailRecording (
        _bstr_t VoicemailId );
    HRESULT DeleteVoicemail (
        _bstr_t VoicemailId );
    HRESULT StartVoicemailPlaybackInCall (
        _bstr_t VoicemailId );
    HRESULT SetVoicemailUnplayed (
        _bstr_t VoicemailId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VoicemailType (
        /*[in]*/ BSTR VoicemailId,
        /*[out,retval]*/ enum TVoicemailType * pVal ) = 0;
      virtual HRESULT __stdcall get_VoicemailPartnerHandle (
        /*[in]*/ BSTR VoicemailId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_VoicemailPartnerDisplayName (
        /*[in]*/ BSTR VoicemailId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_VoicemailStatus (
        /*[in]*/ BSTR VoicemailId,
        /*[out,retval]*/ enum TVoicemailStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_VoicemailFailureReason (
        /*[in]*/ BSTR VoicemailId,
        /*[out,retval]*/ enum TVoicemailFailureReason * pVal ) = 0;
      virtual HRESULT __stdcall get_VoicemailTimestamp (
        /*[in]*/ BSTR VoicemailId,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_VoicemailDuration (
        /*[in]*/ BSTR VoicemailId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_VoicemailAllowedDuration (
        /*[in]*/ BSTR VoicemailId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenVoicemail (
        /*[in]*/ BSTR VoicemailId ) = 0;
      virtual HRESULT __stdcall raw_StartVoicemailPlayback (
        /*[in]*/ BSTR VoicemailId ) = 0;
      virtual HRESULT __stdcall raw_StopVoicemailPlayback (
        /*[in]*/ BSTR VoicemailId ) = 0;
      virtual HRESULT __stdcall raw_UploadVoicemail (
        /*[in]*/ BSTR VoicemailId ) = 0;
      virtual HRESULT __stdcall raw_DownloadVoicemail (
        /*[in]*/ BSTR VoicemailId ) = 0;
      virtual HRESULT __stdcall raw_StartVoicemailRecording (
        /*[in]*/ BSTR VoicemailId ) = 0;
      virtual HRESULT __stdcall raw_StopVoicemailRecording (
        /*[in]*/ BSTR VoicemailId ) = 0;
      virtual HRESULT __stdcall raw_DeleteVoicemail (
        /*[in]*/ BSTR VoicemailId ) = 0;
      virtual HRESULT __stdcall raw_StartVoicemailPlaybackInCall (
        /*[in]*/ BSTR VoicemailId ) = 0;
      virtual HRESULT __stdcall raw_SetVoicemailUnplayed (
        /*[in]*/ BSTR VoicemailId ) = 0;
};

struct __declspec(uuid("f4f90cdd-c620-4118-945e-caa1bbeba435"))
_ISkypeEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Command (
        struct ICommand * pCommand );
    HRESULT Reply (
        struct ICommand * pCommand );
    HRESULT Error (
        struct ICommand * pCommand,
        long Number,
        _bstr_t Description );
    HRESULT AttachmentStatus (
        enum TAttachmentStatus Status );
    HRESULT ConnectionStatus (
        enum TConnectionStatus Status );
    HRESULT UserStatus (
        enum TUserStatus Status );
    HRESULT OnlineStatus (
        struct IUser * pUser,
        enum TOnlineStatus Status );
    HRESULT CallStatus (
        struct ICall * pCall,
        enum TCallStatus Status );
    HRESULT CallHistory ( );
    HRESULT Mute (
        VARIANT_BOOL Mute );
    HRESULT MessageStatus (
        struct IChatMessage * pMessage,
        enum TChatMessageStatus Status );
    HRESULT MessageHistory (
        _bstr_t Username );
    HRESULT AutoAway (
        VARIANT_BOOL Automatic );
    HRESULT CallDtmfReceived (
        struct ICall * pCall,
        _bstr_t code );
    HRESULT VoicemailStatus (
        struct IVoicemail * pMail,
        enum TVoicemailStatus Status );
    HRESULT ApplicationConnecting (
        struct IApplication * pApp,
        struct IUserCollection * pUsers );
    HRESULT ApplicationStreams (
        struct IApplication * pApp,
        struct IApplicationStreamCollection * pStreams );
    HRESULT ApplicationDatagram (
        struct IApplication * pApp,
        struct IApplicationStream * pStream,
        _bstr_t Text );
    HRESULT ApplicationSending (
        struct IApplication * pApp,
        struct IApplicationStreamCollection * pStreams );
    HRESULT ApplicationReceiving (
        struct IApplication * pApp,
        struct IApplicationStreamCollection * pStreams );
    HRESULT ContactsFocused (
        _bstr_t Username );
    HRESULT GroupVisible (
        struct IGroup * pGroup,
        VARIANT_BOOL Visible );
    HRESULT GroupExpanded (
        struct IGroup * pGroup,
        VARIANT_BOOL Expanded );
    HRESULT GroupUsers (
        struct IGroup * pGroup,
        struct IUserCollection * pUsers );
    HRESULT GroupDeleted (
        long GroupId );
    HRESULT UserMood (
        struct IUser * pUser,
        _bstr_t MoodText );
    HRESULT SmsMessageStatusChanged (
        struct ISmsMessage * pMessage,
        enum TSmsMessageStatus Status );
    HRESULT SmsTargetStatusChanged (
        struct ISmsTarget * pTarget,
        enum TSmsTargetStatus Status );
    HRESULT CallInputStatusChanged (
        struct ICall * pCall,
        VARIANT_BOOL Status );
    HRESULT AsyncSearchUsersFinished (
        long Cookie,
        struct IUserCollection * pUsers );
    HRESULT CallSeenStatusChanged (
        struct ICall * pCall,
        VARIANT_BOOL Status );
    HRESULT PluginEventClicked (
        struct IPluginEvent * pEvent );
    HRESULT PluginMenuItemClicked (
        struct IPluginMenuItem * pMenuItem,
        struct IUserCollection * pUsers,
        enum TPluginContext PluginContext,
        _bstr_t ContextId );
    HRESULT WallpaperChanged (
        _bstr_t Path );
    HRESULT FileTransferStatusChanged (
        struct IFileTransfer * pTransfer,
        enum TFileTransferStatus Status );
    HRESULT CallTransferStatusChanged (
        struct ICall * pCall,
        enum TCallStatus Status );
    HRESULT ChatMembersChanged (
        struct IChat * pChat,
        struct IUserCollection * pMembers );
    HRESULT ChatMemberRoleChanged (
        struct IChatMember * pMember,
        enum TChatMemberRole Role );
    HRESULT CallVideoStatusChanged (
        struct ICall * pCall,
        enum TCallVideoStatus Status );
    HRESULT CallVideoSendStatusChanged (
        struct ICall * pCall,
        enum TCallVideoSendStatus Status );
    HRESULT CallVideoReceiveStatusChanged (
        struct ICall * pCall,
        enum TCallVideoSendStatus Status );
    HRESULT SilentModeStatusChanged (
        VARIANT_BOOL Silent );
    HRESULT UILanguageChanged (
        _bstr_t code );
    HRESULT UserAuthorizationRequestReceived (
        struct IUser * pUser );
};

struct __declspec(uuid("497abb45-20ae-49d1-a39d-cbe84a31b20c"))
_ICallChannelManagerEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Channels (
        struct ICallChannelManager * pManager,
        struct ICallChannelCollection * pChannels );
    HRESULT Message (
        struct ICallChannelManager * pManager,
        struct ICallChannel * pChannel,
        struct ICallChannelMessage * pMessage );
    HRESULT Created ( );
};

struct __declspec(uuid("830690fc-bf2f-47a6-ac2d-330bcb402664"))
Skype;
    // [ default ] interface ISkype
    // [ default, source ] dispinterface _ISkypeEvents
    // interface ISkypeApplication
    // interface ISkypeCall
    // interface ISkypeChat
    // interface ISkypeChatMessage
    // interface ISkypeConference
    // interface ISkypeFileTransfer
    // interface ISkypePlugin
    // interface ISkypeSms
    // interface ISkypeUser
    // interface ISkypeVoicemail

struct __declspec(uuid("b77a3d1f-6847-402f-bb82-a0564379088e"))
ISkypePlugin : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutPluginMenuItemCaption))
    _bstr_t PluginMenuItemCaption[];
    __declspec(property(put=PutPluginMenuItemHint))
    _bstr_t PluginMenuItemHint[];

    //
    // Wrapper methods for error-handling
    //

    IPluginEventPtr CreatePluginEvent (
        _bstr_t EventId,
        _bstr_t Caption,
        _bstr_t Hint );
    HRESULT DeletePluginEvent (
        _bstr_t EventId );
    IPluginMenuItemPtr CreatePluginMenuItem (
        _bstr_t MenuItemId,
        enum TPluginContext PluginContext,
        _bstr_t CaptionText,
        _bstr_t HintText,
        _bstr_t IconPath,
        VARIANT_BOOL Enabled,
        enum TPluginContactType ContactType,
        VARIANT_BOOL MultipleContacts );
    HRESULT DeletePluginMenuItem (
        _bstr_t MenuItemId );
    void PutPluginMenuItemCaption (
        _bstr_t MenuItemId,
        _bstr_t _arg2 );
    void PutPluginMenuItemHint (
        _bstr_t MenuItemId,
        _bstr_t _arg2 );
    HRESULT EnablePluginMenuItem (
        _bstr_t MenuItemId,
        VARIANT_BOOL Enabled );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CreatePluginEvent (
        /*[in]*/ BSTR EventId,
        /*[in]*/ BSTR Caption,
        /*[in]*/ BSTR Hint,
        /*[out,retval]*/ struct IPluginEvent * * pEvent ) = 0;
      virtual HRESULT __stdcall raw_DeletePluginEvent (
        /*[in]*/ BSTR EventId ) = 0;
      virtual HRESULT __stdcall raw_CreatePluginMenuItem (
        /*[in]*/ BSTR MenuItemId,
        /*[in]*/ enum TPluginContext PluginContext,
        /*[in]*/ BSTR CaptionText,
        /*[in]*/ BSTR HintText,
        /*[in]*/ BSTR IconPath,
        /*[in]*/ VARIANT_BOOL Enabled,
        /*[in]*/ enum TPluginContactType ContactType,
        /*[in]*/ VARIANT_BOOL MultipleContacts,
        /*[out,retval]*/ struct IPluginMenuItem * * pMenuItem ) = 0;
      virtual HRESULT __stdcall raw_DeletePluginMenuItem (
        /*[in]*/ BSTR MenuItemId ) = 0;
      virtual HRESULT __stdcall put_PluginMenuItemCaption (
        /*[in]*/ BSTR MenuItemId,
        /*[in]*/ BSTR _arg2 ) = 0;
      virtual HRESULT __stdcall put_PluginMenuItemHint (
        /*[in]*/ BSTR MenuItemId,
        /*[in]*/ BSTR _arg2 ) = 0;
      virtual HRESULT __stdcall raw_EnablePluginMenuItem (
        /*[in]*/ BSTR MenuItemId,
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
};

struct __declspec(uuid("3e01d8e0-a72b-4c9f-99bd-8a6e7b97a48d"))
User;
    // [ default ] interface IUser

struct __declspec(uuid("7b030003-037d-490d-9169-a4f391b3d831"))
UserCollection;
    // [ default ] interface IUserCollection

struct __declspec(uuid("2eeab6d0-491e-4962-bba1-ff1cca6d4dd0"))
Conversion;
    // [ default ] interface IConversion

struct __declspec(uuid("d26b1d42-9c42-4e7b-bb73-86384c4b4345"))
Call;
    // [ default ] interface ICall

struct __declspec(uuid("f3188cf3-ef22-4c5b-92cb-605964761c3b"))
CallCollection;
    // [ default ] interface ICallCollection

struct __declspec(uuid("7acdc5b4-76a1-4bdf-918d-6962fcabbad3"))
Chat;
    // [ default ] interface IChat

struct __declspec(uuid("15b6fee5-5fb3-4071-ac1f-7aedc0e2a6bb"))
ChatCollection;
    // [ default ] interface IChatCollection

struct __declspec(uuid("52071016-e648-4d3b-b57e-2b46cc993ce0"))
Participant;
    // [ default ] interface IParticipant

struct __declspec(uuid("e1bc9147-c3e3-4e8a-8304-5e6b5c1c0774"))
ParticipantCollection;
    // [ default ] interface IParticipantCollection

struct __declspec(uuid("a983c9ec-d73e-4364-b89b-acd1e405674f"))
Conference;
    // [ default ] interface IConference

struct __declspec(uuid("3506cdb7-8bc6-40c0-b108-cea0b9480130"))
ConferenceCollection;
    // [ default ] interface IConferenceCollection

struct __declspec(uuid("dd0e8ed5-1494-4b87-a35c-39f6ed4b1153"))
Voicemail;
    // [ default ] interface IVoicemail

struct __declspec(uuid("a7df2611-d752-4c9f-a90a-b56f18485ee9"))
VoicemailCollection;
    // [ default ] interface IVoicemailCollection

struct __declspec(uuid("29dcd339-d184-469b-8bfb-199a2ccf014e"))
Application;
    // [ default ] interface IApplication

struct __declspec(uuid("6fa10a39-4760-4c94-a210-2398848618ec"))
ApplicationStream;
    // [ default ] interface IApplicationStream

struct __declspec(uuid("4b42750b-57a1-47e7-b340-8eae0e3126a4"))
ApplicationStreamCollection;
    // [ default ] interface IApplicationStreamCollection

struct __declspec(uuid("9017071a-2e34-4c3a-9bbb-688cbb5a9ff2"))
ChatMessage;
    // [ default ] interface IChatMessage

struct __declspec(uuid("10dd084e-a5ae-456f-a3be-da67ebe6b090"))
ChatMessageCollection;
    // [ default ] interface IChatMessageCollection

struct __declspec(uuid("452ccb69-6a95-4370-9e5a-b3efb06a7651"))
Profile;
    // [ default ] interface IProfile

struct __declspec(uuid("222c0f35-3d78-4570-9f6d-baee289d0304"))
Group;
    // [ default ] interface IGroup

struct __declspec(uuid("a8109db9-88e0-42fe-98ea-8a12be5394c6"))
GroupCollection;
    // [ default ] interface IGroupCollection

struct __declspec(uuid("b0fe88f0-c92f-46d6-878f-31599bea944c"))
Settings;
    // [ default ] interface ISettings

struct __declspec(uuid("b09ac3ff-0d5d-41c6-a34e-7c3f58a3127c"))
Client;
    // [ default ] interface IClient

struct __declspec(uuid("2dbcda9f-1248-400b-a382-a56d71bf7b15"))
Command;
    // [ default ] interface ICommand

struct __declspec(uuid("89dd2f9d-c325-48bf-a615-96bd039bbc83"))
CallChannel;
    // [ default ] interface ICallChannel

struct __declspec(uuid("42fe718b-a148-41d6-885b-01a0afae8723"))
CallChannelCollection;
    // [ default ] interface ICallChannelCollection

struct __declspec(uuid("5e541e71-a474-4ead-8fcb-24d400d023b7"))
CallChannelManager;
    // [ default ] interface ICallChannelManager
    // [ default, source ] dispinterface _ICallChannelManagerEvents

struct __declspec(uuid("3d3e7c1b-79a7-4cc7-8925-41fa813e9913"))
CallChannelMessage;
    // [ default ] interface ICallChannelMessage

struct __declspec(uuid("ffc8b962-9b40-4dff-9458-1830c7dd7f5d"))
IEProtocolHandler;
    // [ default ] interface IUnknown

struct __declspec(uuid("f278d870-7af7-4957-96ee-e6ac72d0b109"))
SmsMessage;
    // [ default ] interface ISmsMessage

struct __declspec(uuid("1bca4635-f1fc-44c8-b829-48229aeb32e3"))
SmsMessageCollection;
    // [ default ] interface ISmsMessageCollection

struct __declspec(uuid("5792fc7d-5e1d-4f1a-bd4f-a7a50f92bc6e"))
SmsChunk;
    // [ default ] interface ISmsChunk

struct __declspec(uuid("cc461fc3-c9be-41fb-8e47-e0115cbc01cc"))
SmsChunkCollection;
    // [ default ] interface ISmsChunkCollection

struct __declspec(uuid("61f8faf0-82d0-407c-ae97-31441483ae40"))
SmsTarget;
    // [ default ] interface ISmsTarget

struct __declspec(uuid("6ac51e9c-7947-4b46-a978-0ad601c4efc9"))
SmsTargetCollection;
    // [ default ] interface ISmsTargetCollection

struct __declspec(uuid("3f06dcd2-3a04-463d-a08b-1ffed02c4d4c"))
PluginMenuItem;
    // [ default ] interface IPluginMenuItem

struct __declspec(uuid("9d073235-d787-497d-8d1f-929559f1c621"))
PluginEvent;
    // [ default ] interface IPluginEvent

struct __declspec(uuid("b76c04c9-0eb1-4748-b0c0-d01deb595906"))
ICallChannel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum TCallChannelType Type;
    __declspec(property(get=GetStream))
    IApplicationStreamPtr Stream;
    __declspec(property(get=GetManager))
    ICallChannelManagerPtr Manager;
    __declspec(property(get=GetCall))
    ICallPtr Call;

    //
    // Wrapper methods for error-handling
    //

    enum TCallChannelType GetType ( );
    void PutType (
        enum TCallChannelType pVal );
    HRESULT SendTextMessage (
        _bstr_t Text );
    IApplicationStreamPtr GetStream ( );
    ICallChannelManagerPtr GetManager ( );
    ICallPtr GetCall ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum TCallChannelType * pVal ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum TCallChannelType pVal ) = 0;
      virtual HRESULT __stdcall raw_SendTextMessage (
        BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Stream (
        /*[out,retval]*/ struct IApplicationStream * * pVal ) = 0;
      virtual HRESULT __stdcall get_Manager (
        /*[out,retval]*/ struct ICallChannelManager * * pVal ) = 0;
      virtual HRESULT __stdcall get_Call (
        /*[out,retval]*/ struct ICall * * pVal ) = 0;
};

struct __declspec(uuid("8cb09087-e389-4c6d-a6a2-7d4bca8545d9"))
ICallChannelCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ICallChannelPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct ICallChannel * pChannel );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    ICallChannelPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct ICallChannel * pChannel ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ICallChannel * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("30c27c77-525f-4a3f-b9dd-c5a77c67250d"))
ICallChannelManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChannels))
    ICallChannelCollectionPtr Channels;
    __declspec(property(get=GetChannelType,put=PutChannelType))
    enum TCallChannelType ChannelType;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCreated))
    VARIANT_BOOL Created;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Connect (
        struct ISkype * pSkype );
    HRESULT Disconnect ( );
    ICallChannelCollectionPtr GetChannels ( );
    enum TCallChannelType GetChannelType ( );
    void PutChannelType (
        enum TCallChannelType pVal );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t pVal );
    HRESULT CreateApplication (
        _bstr_t ApplicationName );
    VARIANT_BOOL GetCreated ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ struct ISkype * pSkype ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
      virtual HRESULT __stdcall get_Channels (
        /*[out,retval]*/ struct ICallChannelCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ChannelType (
        /*[out,retval]*/ enum TCallChannelType * pVal ) = 0;
      virtual HRESULT __stdcall put_ChannelType (
        /*[in]*/ enum TCallChannelType pVal ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateApplication (
        /*[in]*/ BSTR ApplicationName ) = 0;
      virtual HRESULT __stdcall get_Created (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b1878bfe-53d3-402e-8c86-190b19af70d5"))
ISkype : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeout,put=PutTimeout))
    long Timeout;
    __declspec(property(get=GetProperty,put=PutProperty))
    _bstr_t Property[][][];
    __declspec(property(get=GetVariable,put=PutVariable))
    _bstr_t Variable[];
    __declspec(property(get=GetCurrentUserHandle))
    _bstr_t CurrentUserHandle;
    __declspec(property(get=GetCurrentUserStatus,put=PutCurrentUserStatus))
    enum TUserStatus CurrentUserStatus;
    __declspec(property(get=GetConnectionStatus))
    enum TConnectionStatus ConnectionStatus;
    __declspec(property(get=GetMute,put=PutMute))
    VARIANT_BOOL Mute;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetPrivilege))
    VARIANT_BOOL Privilege[];
    __declspec(property(get=GetCurrentUser))
    IUserPtr CurrentUser;
    __declspec(property(get=GetConvert))
    IConversionPtr Convert;
    __declspec(property(get=GetFriends))
    IUserCollectionPtr Friends;
    __declspec(property(get=GetCalls))
    ICallCollectionPtr Calls[];
    __declspec(property(get=GetActiveCalls))
    ICallCollectionPtr ActiveCalls;
    __declspec(property(get=GetMissedCalls))
    ICallCollectionPtr MissedCalls;
    __declspec(property(get=GetMessages))
    IChatMessageCollectionPtr Messages[];
    __declspec(property(get=GetMissedMessages))
    IChatMessageCollectionPtr MissedMessages;
    __declspec(property(get=GetAttachmentStatus))
    enum TAttachmentStatus AttachmentStatus;
    __declspec(property(get=GetProtocol,put=PutProtocol))
    long Protocol;
    __declspec(property(get=GetUser))
    IUserPtr User[];
    __declspec(property(get=GetMessage))
    IChatMessagePtr Message[];
    __declspec(property(get=GetCall))
    ICallPtr Call[];
    __declspec(property(get=GetChats))
    IChatCollectionPtr Chats;
    __declspec(property(get=GetChat))
    IChatPtr Chat[];
    __declspec(property(get=GetConference))
    IConferencePtr Conference[];
    __declspec(property(get=GetConferences))
    IConferenceCollectionPtr Conferences;
    __declspec(property(get=GetProfile,put=PutProfile))
    _bstr_t Profile[];
    __declspec(property(get=GetActiveChats))
    IChatCollectionPtr ActiveChats;
    __declspec(property(get=GetMissedChats))
    IChatCollectionPtr MissedChats;
    __declspec(property(get=GetRecentChats))
    IChatCollectionPtr RecentChats;
    __declspec(property(get=GetBookmarkedChats))
    IChatCollectionPtr BookmarkedChats;
    __declspec(property(get=GetVoicemails))
    IVoicemailCollectionPtr Voicemails;
    __declspec(property(get=GetUsersWaitingAuthorization))
    IUserCollectionPtr UsersWaitingAuthorization;
    __declspec(property(get=GetCommandId,put=PutCommandId))
    VARIANT_BOOL CommandId;
    __declspec(property(get=GetApplication))
    IApplicationPtr Application[];
    __declspec(property(get=GetGreeting))
    IVoicemailPtr Greeting[];
    __declspec(property(get=GetCache,put=PutCache))
    VARIANT_BOOL Cache;
    __declspec(property(get=GetCurrentUserProfile))
    IProfilePtr CurrentUserProfile;
    __declspec(property(get=GetGroups))
    IGroupCollectionPtr Groups;
    __declspec(property(get=GetCustomGroups))
    IGroupCollectionPtr CustomGroups;
    __declspec(property(get=GetHardwiredGroups))
    IGroupCollectionPtr HardwiredGroups;
    __declspec(property(get=GetSettings))
    ISettingsPtr Settings;
    __declspec(property(get=GetClient))
    IClientPtr Client;
    __declspec(property(put=PutFriendlyName))
    _bstr_t FriendlyName;
    __declspec(property(get=GetCommand))
    ICommandPtr Command[][][][][];
    __declspec(property(get=GetVoicemail))
    IVoicemailPtr Voicemail[];
    __declspec(property(get=GetMissedVoicemails))
    IVoicemailCollectionPtr MissedVoicemails;
    __declspec(property(get=GetApiSecurityContextEnabled))
    VARIANT_BOOL ApiSecurityContextEnabled[];
    __declspec(property(get=GetSmss))
    ISmsMessageCollectionPtr Smss;
    __declspec(property(get=GetMissedSmss))
    ISmsMessageCollectionPtr MissedSmss;
    __declspec(property(get=GetApiWrapperVersion))
    _bstr_t ApiWrapperVersion;
    __declspec(property(get=GetSilentMode,put=PutSilentMode))
    VARIANT_BOOL SilentMode;
    __declspec(property(get=GetFileTransfers))
    IFileTransferCollectionPtr FileTransfers;
    __declspec(property(get=GetActiveFileTransfers))
    IFileTransferCollectionPtr ActiveFileTransfers;
    __declspec(property(get=GetFocusedContacts))
    IUserCollectionPtr FocusedContacts;
    __declspec(property(get=GetPredictiveDialerCountry))
    _bstr_t PredictiveDialerCountry;

    //
    // Wrapper methods for error-handling
    //

    long GetTimeout ( );
    void PutTimeout (
        long pVal );
    _bstr_t GetProperty (
        _bstr_t ObjectType,
        _bstr_t ObjectId,
        _bstr_t PropName );
    void PutProperty (
        _bstr_t ObjectType,
        _bstr_t ObjectId,
        _bstr_t PropName,
        _bstr_t pVal );
    _bstr_t GetVariable (
        _bstr_t Name );
    void PutVariable (
        _bstr_t Name,
        _bstr_t pVal );
    _bstr_t GetCurrentUserHandle ( );
    enum TUserStatus GetCurrentUserStatus ( );
    void PutCurrentUserStatus (
        enum TUserStatus pVal );
    enum TConnectionStatus GetConnectionStatus ( );
    VARIANT_BOOL GetMute ( );
    void PutMute (
        VARIANT_BOOL pVal );
    _bstr_t GetVersion ( );
    VARIANT_BOOL GetPrivilege (
        _bstr_t Name );
    IUserPtr GetCurrentUser ( );
    IConversionPtr GetConvert ( );
    IUserCollectionPtr GetFriends ( );
    IUserCollectionPtr SearchForUsers (
        _bstr_t Target );
    ICallCollectionPtr GetCalls (
        _bstr_t Target );
    ICallCollectionPtr GetActiveCalls ( );
    ICallCollectionPtr GetMissedCalls ( );
    IChatMessageCollectionPtr GetMessages (
        _bstr_t Target );
    IChatMessageCollectionPtr GetMissedMessages ( );
    enum TAttachmentStatus GetAttachmentStatus ( );
    long GetProtocol ( );
    void PutProtocol (
        long pVal );
    HRESULT Attach (
        long Protocol,
        VARIANT_BOOL Wait );
    ICallPtr PlaceCall (
        _bstr_t Target,
        _bstr_t Target2,
        _bstr_t Target3,
        _bstr_t Target4 );
    IChatMessagePtr SendMessage (
        _bstr_t Username,
        _bstr_t Text );
    IUserPtr GetUser (
        _bstr_t Username );
    IChatMessagePtr GetMessage (
        long Id );
    ICallPtr GetCall (
        long Id );
    HRESULT SendCommand (
        struct ICommand * pCommand );
    IChatCollectionPtr GetChats ( );
    IChatPtr GetChat (
        _bstr_t Name );
    HRESULT ChangeUserStatus (
        enum TUserStatus newVal );
    IConferencePtr GetConference (
        long Id );
    IConferenceCollectionPtr GetConferences ( );
    _bstr_t GetProfile (
        _bstr_t Property );
    void PutProfile (
        _bstr_t Property,
        _bstr_t pVal );
    IChatCollectionPtr GetActiveChats ( );
    IChatCollectionPtr GetMissedChats ( );
    IChatCollectionPtr GetRecentChats ( );
    IChatCollectionPtr GetBookmarkedChats ( );
    IChatPtr CreateChatWith (
        _bstr_t Username );
    IChatPtr CreateChatMultiple (
        struct IUserCollection * pMembers );
    IVoicemailCollectionPtr GetVoicemails ( );
    IVoicemailPtr SendVoicemail (
        _bstr_t Username );
    IUserCollectionPtr GetUsersWaitingAuthorization ( );
    HRESULT ClearChatHistory ( );
    HRESULT ClearVoicemailHistory ( );
    HRESULT ClearCallHistory (
        _bstr_t Username,
        enum TCallHistory Type );
    VARIANT_BOOL GetCommandId ( );
    void PutCommandId (
        VARIANT_BOOL pVal );
    IApplicationPtr GetApplication (
        _bstr_t Name );
    IVoicemailPtr GetGreeting (
        _bstr_t Username );
    VARIANT_BOOL GetCache ( );
    void PutCache (
        VARIANT_BOOL pVal );
    HRESULT ResetCache ( );
    IProfilePtr GetCurrentUserProfile ( );
    IGroupCollectionPtr GetGroups ( );
    IGroupCollectionPtr GetCustomGroups ( );
    IGroupCollectionPtr GetHardwiredGroups ( );
    IGroupPtr CreateGroup (
        _bstr_t GroupName );
    HRESULT DeleteGroup (
        long GroupId );
    ISettingsPtr GetSettings ( );
    IClientPtr GetClient ( );
    void PutFriendlyName (
        _bstr_t _arg1 );
    ICommandPtr GetCommand (
        long Id,
        _bstr_t Command,
        _bstr_t Reply,
        VARIANT_BOOL Block,
        long Timeout );
    IVoicemailPtr GetVoicemail (
        long Id );
    IVoicemailCollectionPtr GetMissedVoicemails ( );
    HRESULT EnableApiSecurityContext (
        enum TApiSecurityContext Context );
    VARIANT_BOOL GetApiSecurityContextEnabled (
        enum TApiSecurityContext Context );
    ISmsMessagePtr CreateSms (
        enum TSmsMessageType MessageType,
        _bstr_t TargetNumbers );
    ISmsMessageCollectionPtr GetSmss ( );
    ISmsMessageCollectionPtr GetMissedSmss ( );
    ISmsMessagePtr SendSms (
        _bstr_t TargetNumbers,
        _bstr_t MessageText,
        _bstr_t ReplyToNumber );
    long AsyncSearchUsers (
        _bstr_t Target );
    _bstr_t GetApiWrapperVersion ( );
    VARIANT_BOOL GetSilentMode ( );
    void PutSilentMode (
        VARIANT_BOOL pVal );
    IFileTransferCollectionPtr GetFileTransfers ( );
    IFileTransferCollectionPtr GetActiveFileTransfers ( );
    IUserCollectionPtr GetFocusedContacts ( );
    IChatPtr FindChatUsingBlob (
        _bstr_t Blob );
    IChatPtr CreateChatUsingBlob (
        _bstr_t Blob );
    _bstr_t GetPredictiveDialerCountry ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Timeout (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Timeout (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_Property (
        /*[in]*/ BSTR ObjectType,
        /*[in]*/ BSTR ObjectId,
        /*[in]*/ BSTR PropName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Property (
        /*[in]*/ BSTR ObjectType,
        /*[in]*/ BSTR ObjectId,
        /*[in]*/ BSTR PropName,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Variable (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Variable (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentUserHandle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentUserStatus (
        /*[out,retval]*/ enum TUserStatus * pVal ) = 0;
      virtual HRESULT __stdcall put_CurrentUserStatus (
        /*[in]*/ enum TUserStatus pVal ) = 0;
      virtual HRESULT __stdcall get_ConnectionStatus (
        /*[out,retval]*/ enum TConnectionStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_Mute (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Mute (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Privilege (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_CurrentUser (
        /*[out,retval]*/ struct IUser * * pVal ) = 0;
      virtual HRESULT __stdcall get_Convert (
        /*[out,retval]*/ struct IConversion * * pVal ) = 0;
      virtual HRESULT __stdcall get_Friends (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SearchForUsers (
        /*[in]*/ BSTR Target,
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Calls (
        /*[in]*/ BSTR Target,
        /*[out,retval]*/ struct ICallCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveCalls (
        /*[out,retval]*/ struct ICallCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_MissedCalls (
        /*[out,retval]*/ struct ICallCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Messages (
        /*[in]*/ BSTR Target,
        /*[out,retval]*/ struct IChatMessageCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_MissedMessages (
        /*[out,retval]*/ struct IChatMessageCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_AttachmentStatus (
        /*[out,retval]*/ enum TAttachmentStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_Protocol (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Protocol (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_Attach (
        /*[in]*/ long Protocol,
        /*[in]*/ VARIANT_BOOL Wait ) = 0;
      virtual HRESULT __stdcall raw_PlaceCall (
        /*[in]*/ BSTR Target,
        /*[in]*/ BSTR Target2,
        /*[in]*/ BSTR Target3,
        /*[in]*/ BSTR Target4,
        /*[out,retval]*/ struct ICall * * pCall ) = 0;
      virtual HRESULT __stdcall raw_SendMessage (
        /*[in]*/ BSTR Username,
        /*[in]*/ BSTR Text,
        /*[out,retval]*/ struct IChatMessage * * pMessage ) = 0;
      virtual HRESULT __stdcall get_User (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ struct IUser * * pVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IChatMessage * * pVal ) = 0;
      virtual HRESULT __stdcall get_Call (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct ICall * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SendCommand (
        /*[in]*/ struct ICommand * pCommand ) = 0;
      virtual HRESULT __stdcall get_Chats (
        /*[out,retval]*/ struct IChatCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Chat (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IChat * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ChangeUserStatus (
        /*[in]*/ enum TUserStatus newVal ) = 0;
      virtual HRESULT __stdcall get_Conference (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IConference * * pVal ) = 0;
      virtual HRESULT __stdcall get_Conferences (
        /*[out,retval]*/ struct IConferenceCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Profile (
        /*[in]*/ BSTR Property,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Profile (
        /*[in]*/ BSTR Property,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveChats (
        /*[out,retval]*/ struct IChatCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_MissedChats (
        /*[out,retval]*/ struct IChatCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_RecentChats (
        /*[out,retval]*/ struct IChatCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_BookmarkedChats (
        /*[out,retval]*/ struct IChatCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateChatWith (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ struct IChat * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateChatMultiple (
        /*[in]*/ struct IUserCollection * pMembers,
        /*[out,retval]*/ struct IChat * * pChat ) = 0;
      virtual HRESULT __stdcall get_Voicemails (
        /*[out,retval]*/ struct IVoicemailCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SendVoicemail (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ struct IVoicemail * * pVoicemail ) = 0;
      virtual HRESULT __stdcall get_UsersWaitingAuthorization (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ClearChatHistory ( ) = 0;
      virtual HRESULT __stdcall raw_ClearVoicemailHistory ( ) = 0;
      virtual HRESULT __stdcall raw_ClearCallHistory (
        /*[in]*/ BSTR Username,
        /*[in]*/ enum TCallHistory Type ) = 0;
      virtual HRESULT __stdcall get_CommandId (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_CommandId (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct IApplication * * pVal ) = 0;
      virtual HRESULT __stdcall get_Greeting (
        /*[in]*/ BSTR Username,
        /*[out,retval]*/ struct IVoicemail * * pVal ) = 0;
      virtual HRESULT __stdcall get_Cache (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Cache (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_ResetCache ( ) = 0;
      virtual HRESULT __stdcall get_CurrentUserProfile (
        /*[out,retval]*/ struct IProfile * * pVal ) = 0;
      virtual HRESULT __stdcall get_Groups (
        /*[out,retval]*/ struct IGroupCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_CustomGroups (
        /*[out,retval]*/ struct IGroupCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_HardwiredGroups (
        /*[out,retval]*/ struct IGroupCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateGroup (
        /*[in]*/ BSTR GroupName,
        /*[out,retval]*/ struct IGroup * * pGroup ) = 0;
      virtual HRESULT __stdcall raw_DeleteGroup (
        /*[in]*/ long GroupId ) = 0;
      virtual HRESULT __stdcall get_Settings (
        /*[out,retval]*/ struct ISettings * * pVal ) = 0;
      virtual HRESULT __stdcall get_Client (
        /*[out,retval]*/ struct IClient * * pVal ) = 0;
      virtual HRESULT __stdcall put_FriendlyName (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_Command (
        /*[in]*/ long Id,
        /*[in]*/ BSTR Command,
        /*[in]*/ BSTR Reply,
        /*[in]*/ VARIANT_BOOL Block,
        /*[in]*/ long Timeout,
        /*[out,retval]*/ struct ICommand * * pVal ) = 0;
      virtual HRESULT __stdcall get_Voicemail (
        /*[in]*/ long Id,
        /*[out,retval]*/ struct IVoicemail * * pVal ) = 0;
      virtual HRESULT __stdcall get_MissedVoicemails (
        /*[out,retval]*/ struct IVoicemailCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_EnableApiSecurityContext (
        /*[in]*/ enum TApiSecurityContext Context ) = 0;
      virtual HRESULT __stdcall get_ApiSecurityContextEnabled (
        /*[in]*/ enum TApiSecurityContext Context,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_CreateSms (
        /*[in]*/ enum TSmsMessageType MessageType,
        /*[in]*/ BSTR TargetNumbers,
        /*[out,retval]*/ struct ISmsMessage * * pMessage ) = 0;
      virtual HRESULT __stdcall get_Smss (
        /*[out,retval]*/ struct ISmsMessageCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_MissedSmss (
        /*[out,retval]*/ struct ISmsMessageCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SendSms (
        /*[in]*/ BSTR TargetNumbers,
        /*[in]*/ BSTR MessageText,
        /*[in]*/ BSTR ReplyToNumber,
        /*[out,retval]*/ struct ISmsMessage * * pMessage ) = 0;
      virtual HRESULT __stdcall raw_AsyncSearchUsers (
        /*[in]*/ BSTR Target,
        /*[out,retval]*/ long * pCookie ) = 0;
      virtual HRESULT __stdcall get_ApiWrapperVersion (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SilentMode (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SilentMode (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_FileTransfers (
        /*[out,retval]*/ struct IFileTransferCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveFileTransfers (
        /*[out,retval]*/ struct IFileTransferCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_FocusedContacts (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_FindChatUsingBlob (
        /*[in]*/ BSTR Blob,
        /*[out,retval]*/ struct IChat * * pChat ) = 0;
      virtual HRESULT __stdcall raw_CreateChatUsingBlob (
        /*[in]*/ BSTR Blob,
        /*[out,retval]*/ struct IChat * * pChat ) = 0;
      virtual HRESULT __stdcall get_PredictiveDialerCountry (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("9511117a-7bca-4669-be96-6ea6866975c1"))
IChatMessageCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IChatMessagePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IChatMessage * pItem );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IChatMessagePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IChatMessage * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IChatMessage * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("4cff5c70-3c95-4566-824a-fa164586d535"))
IChatMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetTimestamp))
    DATE Timestamp;
    __declspec(property(get=GetFromHandle))
    _bstr_t FromHandle;
    __declspec(property(get=GetFromDisplayName))
    _bstr_t FromDisplayName;
    __declspec(property(get=GetType))
    enum TChatMessageType Type;
    __declspec(property(get=GetStatus))
    enum TChatMessageStatus Status;
    __declspec(property(get=GetLeaveReason))
    enum TChatLeaveReason LeaveReason;
    __declspec(property(get=GetBody,put=PutBody))
    _bstr_t Body;
    __declspec(property(get=GetChatName))
    _bstr_t ChatName;
    __declspec(property(get=GetUsers))
    IUserCollectionPtr Users;
    __declspec(property(put=PutSeen))
    VARIANT_BOOL Seen;
    __declspec(property(get=GetChat))
    IChatPtr Chat;
    __declspec(property(get=GetSender))
    IUserPtr Sender;
    __declspec(property(get=GetEditedBy))
    _bstr_t EditedBy;
    __declspec(property(get=GetEditedTimestamp))
    DATE EditedTimestamp;
    __declspec(property(get=GetRole))
    enum TChatMemberRole Role;
    __declspec(property(get=GetOptions))
    long Options;
    __declspec(property(get=GetIsEditable))
    VARIANT_BOOL IsEditable;
    __declspec(property(get=GetGuid))
    _bstr_t Guid;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    DATE GetTimestamp ( );
    _bstr_t GetFromHandle ( );
    _bstr_t GetFromDisplayName ( );
    enum TChatMessageType GetType ( );
    enum TChatMessageStatus GetStatus ( );
    enum TChatLeaveReason GetLeaveReason ( );
    _bstr_t GetBody ( );
    _bstr_t GetChatName ( );
    IUserCollectionPtr GetUsers ( );
    void PutSeen (
        VARIANT_BOOL _arg1 );
    IChatPtr GetChat ( );
    IUserPtr GetSender ( );
    _bstr_t GetEditedBy ( );
    DATE GetEditedTimestamp ( );
    void PutBody (
        _bstr_t pVal );
    enum TChatMemberRole GetRole ( );
    long GetOptions ( );
    VARIANT_BOOL GetIsEditable ( );
    _bstr_t GetGuid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Timestamp (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_FromHandle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_FromDisplayName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum TChatMessageType * pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum TChatMessageStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_LeaveReason (
        /*[out,retval]*/ enum TChatLeaveReason * pVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Users (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall put_Seen (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall get_Chat (
        /*[out,retval]*/ struct IChat * * pVal ) = 0;
      virtual HRESULT __stdcall get_Sender (
        /*[out,retval]*/ struct IUser * * pVal ) = 0;
      virtual HRESULT __stdcall get_EditedBy (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_EditedTimestamp (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum TChatMemberRole * pVal ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IsEditable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Guid (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("8c24106c-3368-4580-93e5-5ed4accde306"))
IChat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetMessages))
    IChatMessageCollectionPtr Messages;
    __declspec(property(get=GetTimestamp))
    DATE Timestamp;
    __declspec(property(get=GetAdder))
    IUserPtr Adder;
    __declspec(property(get=GetStatus))
    enum TChatStatus Status;
    __declspec(property(get=GetPosters))
    IUserCollectionPtr Posters;
    __declspec(property(get=GetMembers))
    IUserCollectionPtr Members;
    __declspec(property(get=GetTopic,put=PutTopic))
    _bstr_t Topic;
    __declspec(property(get=GetActiveMembers))
    IUserCollectionPtr ActiveMembers;
    __declspec(property(get=GetFriendlyName))
    _bstr_t FriendlyName;
    __declspec(property(get=GetRecentMessages))
    IChatMessageCollectionPtr RecentMessages;
    __declspec(property(get=GetBookmarked))
    VARIANT_BOOL Bookmarked;
    __declspec(property(get=GetTopicXML,put=PutTopicXML))
    _bstr_t TopicXML;
    __declspec(property(get=GetMemberObjects))
    IChatMemberCollectionPtr MemberObjects;
    __declspec(property(get=GetBlob))
    _bstr_t Blob;
    __declspec(property(get=GetOptions,put=PutOptions))
    long Options;
    __declspec(property(get=GetPasswordHint))
    _bstr_t PasswordHint;
    __declspec(property(get=GetGuideLines,put=PutGuideLines))
    _bstr_t GuideLines;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetDialogPartner))
    _bstr_t DialogPartner;
    __declspec(property(get=GetActivityTimestamp))
    DATE ActivityTimestamp;
    __declspec(property(get=GetMyRole))
    enum TChatMemberRole MyRole;
    __declspec(property(get=GetApplicants))
    IUserCollectionPtr Applicants;
    __declspec(property(put=PutAlertString))
    _bstr_t AlertString;
    __declspec(property(get=GetType))
    enum TChatType Type;
    __declspec(property(get=GetMyStatus))
    enum TChatMyStatus MyStatus;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    IChatMessageCollectionPtr GetMessages ( );
    DATE GetTimestamp ( );
    IUserPtr GetAdder ( );
    enum TChatStatus GetStatus ( );
    IUserCollectionPtr GetPosters ( );
    IUserCollectionPtr GetMembers ( );
    _bstr_t GetTopic ( );
    void PutTopic (
        _bstr_t pVal );
    IUserCollectionPtr GetActiveMembers ( );
    _bstr_t GetFriendlyName ( );
    HRESULT OpenWindow ( );
    IChatMessagePtr SendMessage (
        _bstr_t MessageText );
    HRESULT Leave ( );
    HRESULT AddMembers (
        struct IUserCollection * pMembers );
    IChatMessageCollectionPtr GetRecentMessages ( );
    VARIANT_BOOL GetBookmarked ( );
    HRESULT Bookmark ( );
    HRESULT Unbookmark ( );
    _bstr_t GetTopicXML ( );
    void PutTopicXML (
        _bstr_t pVal );
    IChatMemberCollectionPtr GetMemberObjects ( );
    _bstr_t GetBlob ( );
    long GetOptions ( );
    void PutOptions (
        long pVal );
    _bstr_t GetPasswordHint ( );
    HRESULT SetPassword (
        _bstr_t Password,
        _bstr_t Hint );
    _bstr_t GetGuideLines ( );
    void PutGuideLines (
        _bstr_t pVal );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pVal );
    _bstr_t GetDialogPartner ( );
    DATE GetActivityTimestamp ( );
    enum TChatMemberRole GetMyRole ( );
    IUserCollectionPtr GetApplicants ( );
    HRESULT Join ( );
    HRESULT Kick (
        _bstr_t Handle );
    HRESULT KickBan (
        _bstr_t Handle );
    HRESULT Disband ( );
    HRESULT EnterPassword (
        _bstr_t Password );
    HRESULT ClearRecentMessages ( );
    HRESULT AcceptAdd ( );
    void PutAlertString (
        _bstr_t _arg1 );
    enum TChatType GetType ( );
    enum TChatMyStatus GetMyStatus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Messages (
        /*[out,retval]*/ struct IChatMessageCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Timestamp (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_Adder (
        /*[out,retval]*/ struct IUser * * pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum TChatStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_Posters (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Members (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Topic (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Topic (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ActiveMembers (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_FriendlyName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenWindow ( ) = 0;
      virtual HRESULT __stdcall raw_SendMessage (
        /*[in]*/ BSTR MessageText,
        /*[out,retval]*/ struct IChatMessage * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Leave ( ) = 0;
      virtual HRESULT __stdcall raw_AddMembers (
        /*[in]*/ struct IUserCollection * pMembers ) = 0;
      virtual HRESULT __stdcall get_RecentMessages (
        /*[out,retval]*/ struct IChatMessageCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Bookmarked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_Bookmark ( ) = 0;
      virtual HRESULT __stdcall raw_Unbookmark ( ) = 0;
      virtual HRESULT __stdcall get_TopicXML (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TopicXML (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_MemberObjects (
        /*[out,retval]*/ struct IChatMemberCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Blob (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Options (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_Options (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_PasswordHint (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetPassword (
        /*[in]*/ BSTR Password,
        /*[in]*/ BSTR Hint ) = 0;
      virtual HRESULT __stdcall get_GuideLines (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_GuideLines (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_DialogPartner (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ActivityTimestamp (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_MyRole (
        /*[out,retval]*/ enum TChatMemberRole * pVal ) = 0;
      virtual HRESULT __stdcall get_Applicants (
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_Join ( ) = 0;
      virtual HRESULT __stdcall raw_Kick (
        /*[in]*/ BSTR Handle ) = 0;
      virtual HRESULT __stdcall raw_KickBan (
        /*[in]*/ BSTR Handle ) = 0;
      virtual HRESULT __stdcall raw_Disband ( ) = 0;
      virtual HRESULT __stdcall raw_EnterPassword (
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_ClearRecentMessages ( ) = 0;
      virtual HRESULT __stdcall raw_AcceptAdd ( ) = 0;
      virtual HRESULT __stdcall put_AlertString (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum TChatType * pVal ) = 0;
      virtual HRESULT __stdcall get_MyStatus (
        /*[out,retval]*/ enum TChatMyStatus * pVal ) = 0;
};

struct __declspec(uuid("9e9f0473-94c2-4fdd-85d2-43e3478765f9"))
IChatMember : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    _bstr_t Id;
    __declspec(property(get=GetHandle))
    _bstr_t Handle;
    __declspec(property(get=GetRole,put=PutRole))
    enum TChatMemberRole Role;
    __declspec(property(get=GetCanSetRoleTo))
    VARIANT_BOOL CanSetRoleTo[];
    __declspec(property(get=GetIsActive))
    VARIANT_BOOL IsActive;
    __declspec(property(get=GetChat))
    IChatPtr Chat;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetId ( );
    _bstr_t GetHandle ( );
    enum TChatMemberRole GetRole ( );
    void PutRole (
        enum TChatMemberRole pVal );
    VARIANT_BOOL GetCanSetRoleTo (
        enum TChatMemberRole Role );
    VARIANT_BOOL GetIsActive ( );
    IChatPtr GetChat ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Handle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Role (
        /*[out,retval]*/ enum TChatMemberRole * pVal ) = 0;
      virtual HRESULT __stdcall put_Role (
        /*[in]*/ enum TChatMemberRole pVal ) = 0;
      virtual HRESULT __stdcall get_CanSetRoleTo (
        /*[in]*/ enum TChatMemberRole Role,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsActive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Chat (
        /*[out,retval]*/ struct IChat * * pVal ) = 0;
};

struct __declspec(uuid("8ffc686b-2e5e-4763-8b03-ff4fd3a0c4da"))
IChatMemberCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IChatMemberPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IChatMemberPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IChatMember * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("052a4165-010a-457d-a874-e661b6322846"))
IChatCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IChatPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IChat * pItem );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    IChatPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct IChat * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct IChat * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("3f6758d2-1d3c-4a8f-bd99-6fc6b0e2dc8f"))
ISkypeChat : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChatTimestamp))
    DATE ChatTimestamp[];
    __declspec(property(get=GetChatAdder))
    IUserPtr ChatAdder[];
    __declspec(property(get=GetChatStatus))
    enum TChatStatus ChatStatus[];
    __declspec(property(get=GetChatPosters))
    IUserCollectionPtr ChatPosters[];
    __declspec(property(get=GetChatMembers))
    IUserCollectionPtr ChatMembers[];
    __declspec(property(get=GetChatTopic,put=PutChatTopic))
    _bstr_t ChatTopic[];
    __declspec(property(get=GetChatActiveMembers))
    IUserCollectionPtr ChatActiveMembers[];
    __declspec(property(get=GetChatFriendlyName))
    _bstr_t ChatFriendlyName[];
    __declspec(property(get=GetChatMessages))
    IChatMessageCollectionPtr ChatMessages[];
    __declspec(property(get=GetChatRecentMessages))
    IChatMessageCollectionPtr ChatRecentMessages[];
    __declspec(property(get=GetChatBookmarked))
    VARIANT_BOOL ChatBookmarked[];
    __declspec(property(get=GetChatTopicXML,put=PutChatTopicXML))
    _bstr_t ChatTopicXML[];
    __declspec(property(get=GetChatMemberObjects))
    IChatMemberCollectionPtr ChatMemberObjects[];
    __declspec(property(get=GetChatBlob))
    _bstr_t ChatBlob[];
    __declspec(property(get=GetChatOptions,put=PutChatOptions))
    long ChatOptions[];
    __declspec(property(get=GetChatPasswordHint))
    _bstr_t ChatPasswordHint[];
    __declspec(property(get=GetChatGuideLines,put=PutChatGuideLines))
    _bstr_t ChatGuideLines[];
    __declspec(property(get=GetChatDescription,put=PutChatDescription))
    _bstr_t ChatDescription[];
    __declspec(property(get=GetChatDialogPartner))
    _bstr_t ChatDialogPartner[];
    __declspec(property(get=GetChatActivityTimestamp))
    DATE ChatActivityTimestamp[];
    __declspec(property(get=GetChatMyRole))
    enum TChatMemberRole ChatMyRole[];
    __declspec(property(get=GetChatApplicants))
    IUserCollectionPtr ChatApplicants[];
    __declspec(property(put=PutChatAlertString))
    _bstr_t ChatAlertString[];
    __declspec(property(get=GetChatType))
    enum TChatType ChatType[];
    __declspec(property(get=GetChatMyStatus))
    enum TChatMyStatus ChatMyStatus[];

    //
    // Wrapper methods for error-handling
    //

    DATE GetChatTimestamp (
        _bstr_t ChatName );
    IUserPtr GetChatAdder (
        _bstr_t ChatName );
    enum TChatStatus GetChatStatus (
        _bstr_t ChatName );
    IUserCollectionPtr GetChatPosters (
        _bstr_t ChatName );
    IUserCollectionPtr GetChatMembers (
        _bstr_t ChatName );
    _bstr_t GetChatTopic (
        _bstr_t ChatName );
    void PutChatTopic (
        _bstr_t ChatName,
        _bstr_t pVal );
    IUserCollectionPtr GetChatActiveMembers (
        _bstr_t ChatName );
    _bstr_t GetChatFriendlyName (
        _bstr_t ChatName );
    IChatMessageCollectionPtr GetChatMessages (
        _bstr_t ChatName );
    HRESULT OpenChatWindow (
        _bstr_t ChatName );
    IChatMessagePtr SendChatMessage (
        _bstr_t ChatName,
        _bstr_t MessageText );
    HRESULT LeaveChat (
        _bstr_t ChatName );
    HRESULT AddChatMembers (
        _bstr_t ChatName,
        struct IUserCollection * pMembers );
    IChatMessageCollectionPtr GetChatRecentMessages (
        _bstr_t ChatName );
    VARIANT_BOOL GetChatBookmarked (
        _bstr_t ChatName );
    HRESULT BookmarkChat (
        _bstr_t ChatName );
    HRESULT UnbookmarkChat (
        _bstr_t ChatName );
    _bstr_t GetChatTopicXML (
        _bstr_t ChatName );
    void PutChatTopicXML (
        _bstr_t ChatName,
        _bstr_t pVal );
    IChatMemberCollectionPtr GetChatMemberObjects (
        _bstr_t ChatName );
    _bstr_t GetChatBlob (
        _bstr_t ChatName );
    long GetChatOptions (
        _bstr_t ChatName );
    void PutChatOptions (
        _bstr_t ChatName,
        long pVal );
    _bstr_t GetChatPasswordHint (
        _bstr_t ChatName );
    HRESULT SetChatPassword (
        _bstr_t ChatName,
        _bstr_t Password,
        _bstr_t Hint );
    _bstr_t GetChatGuideLines (
        _bstr_t ChatName );
    void PutChatGuideLines (
        _bstr_t ChatName,
        _bstr_t pVal );
    _bstr_t GetChatDescription (
        _bstr_t ChatName );
    void PutChatDescription (
        _bstr_t ChatName,
        _bstr_t pVal );
    _bstr_t GetChatDialogPartner (
        _bstr_t ChatName );
    DATE GetChatActivityTimestamp (
        _bstr_t ChatName );
    enum TChatMemberRole GetChatMyRole (
        _bstr_t ChatName );
    IUserCollectionPtr GetChatApplicants (
        _bstr_t ChatName );
    HRESULT JoinChat (
        _bstr_t ChatName );
    HRESULT KickChatMember (
        _bstr_t ChatName,
        _bstr_t Handle );
    HRESULT KickBanChatMember (
        _bstr_t ChatName,
        _bstr_t Handle );
    HRESULT DisbandChat (
        _bstr_t ChatName );
    HRESULT EnterChatPassword (
        _bstr_t ChatName,
        _bstr_t Password );
    HRESULT ClearChatRecentMessages (
        _bstr_t ChatName );
    HRESULT AcceptSharedGroupAdd (
        _bstr_t ChatName );
    void PutChatAlertString (
        _bstr_t ChatName,
        _bstr_t _arg2 );
    enum TChatType GetChatType (
        _bstr_t ChatName );
    enum TChatMyStatus GetChatMyStatus (
        _bstr_t ChatName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChatTimestamp (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatAdder (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ struct IUser * * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatStatus (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ enum TChatStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatPosters (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMembers (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatTopic (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ChatTopic (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ChatActiveMembers (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatFriendlyName (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMessages (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ struct IChatMessageCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_OpenChatWindow (
        /*[in]*/ BSTR ChatName ) = 0;
      virtual HRESULT __stdcall raw_SendChatMessage (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR MessageText,
        /*[out,retval]*/ struct IChatMessage * * pVal ) = 0;
      virtual HRESULT __stdcall raw_LeaveChat (
        /*[in]*/ BSTR ChatName ) = 0;
      virtual HRESULT __stdcall raw_AddChatMembers (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ struct IUserCollection * pMembers ) = 0;
      virtual HRESULT __stdcall get_ChatRecentMessages (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ struct IChatMessageCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatBookmarked (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_BookmarkChat (
        /*[in]*/ BSTR ChatName ) = 0;
      virtual HRESULT __stdcall raw_UnbookmarkChat (
        /*[in]*/ BSTR ChatName ) = 0;
      virtual HRESULT __stdcall get_ChatTopicXML (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ChatTopicXML (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMemberObjects (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ struct IChatMemberCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatBlob (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatOptions (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_ChatOptions (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_ChatPasswordHint (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_SetChatPassword (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR Password,
        /*[in]*/ BSTR Hint ) = 0;
      virtual HRESULT __stdcall get_ChatGuideLines (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ChatGuideLines (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ChatDescription (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ChatDescription (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_ChatDialogPartner (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatActivityTimestamp (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMyRole (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ enum TChatMemberRole * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatApplicants (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ struct IUserCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_JoinChat (
        /*[in]*/ BSTR ChatName ) = 0;
      virtual HRESULT __stdcall raw_KickChatMember (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR Handle ) = 0;
      virtual HRESULT __stdcall raw_KickBanChatMember (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR Handle ) = 0;
      virtual HRESULT __stdcall raw_DisbandChat (
        /*[in]*/ BSTR ChatName ) = 0;
      virtual HRESULT __stdcall raw_EnterChatPassword (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_ClearChatRecentMessages (
        /*[in]*/ BSTR ChatName ) = 0;
      virtual HRESULT __stdcall raw_AcceptSharedGroupAdd (
        /*[in]*/ BSTR ChatName ) = 0;
      virtual HRESULT __stdcall put_ChatAlertString (
        /*[in]*/ BSTR ChatName,
        /*[in]*/ BSTR _arg2 ) = 0;
      virtual HRESULT __stdcall get_ChatType (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ enum TChatType * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMyStatus (
        /*[in]*/ BSTR ChatName,
        /*[out,retval]*/ enum TChatMyStatus * pVal ) = 0;
};

struct __declspec(uuid("6cf6dbde-ab7c-4635-96ed-2ff525ab4457"))
ISkypeChatMember : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetChatMemberHandle))
    _bstr_t ChatMemberHandle[];
    __declspec(property(get=GetChatMemberRole,put=PutChatMemberRole))
    enum TChatMemberRole ChatMemberRole[];
    __declspec(property(get=GetCanSetChatMemberRoleTo))
    VARIANT_BOOL CanSetChatMemberRoleTo[][];
    __declspec(property(get=GetIsChatMemberActive))
    VARIANT_BOOL IsChatMemberActive[];
    __declspec(property(get=GetChatMemberChat))
    IChatPtr ChatMemberChat[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetChatMemberHandle (
        _bstr_t MemberId );
    enum TChatMemberRole GetChatMemberRole (
        _bstr_t MemberId );
    void PutChatMemberRole (
        _bstr_t MemberId,
        enum TChatMemberRole pVal );
    VARIANT_BOOL GetCanSetChatMemberRoleTo (
        _bstr_t MemberId,
        enum TChatMemberRole Role );
    VARIANT_BOOL GetIsChatMemberActive (
        _bstr_t MemberId );
    IChatPtr GetChatMemberChat (
        _bstr_t MemberId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ChatMemberHandle (
        /*[in]*/ BSTR MemberId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMemberRole (
        /*[in]*/ BSTR MemberId,
        /*[out,retval]*/ enum TChatMemberRole * pVal ) = 0;
      virtual HRESULT __stdcall put_ChatMemberRole (
        /*[in]*/ BSTR MemberId,
        /*[in]*/ enum TChatMemberRole pVal ) = 0;
      virtual HRESULT __stdcall get_CanSetChatMemberRoleTo (
        /*[in]*/ BSTR MemberId,
        /*[in]*/ enum TChatMemberRole Role,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_IsChatMemberActive (
        /*[in]*/ BSTR MemberId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_ChatMemberChat (
        /*[in]*/ BSTR MemberId,
        /*[out,retval]*/ struct IChat * * pVal ) = 0;
};

struct __declspec(uuid("82d97f2a-0e17-40f3-8e01-24937f936ff4"))
ISmsMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetType))
    enum TSmsMessageType Type;
    __declspec(property(get=GetStatus))
    enum TSmsMessageStatus Status;
    __declspec(property(get=GetFailureReason))
    enum TSmsFailureReason FailureReason;
    __declspec(property(get=GetIsFailedUnseen))
    VARIANT_BOOL IsFailedUnseen;
    __declspec(property(put=PutSeen))
    VARIANT_BOOL Seen;
    __declspec(property(get=GetPrice))
    long Price;
    __declspec(property(get=GetPricePrecision))
    long PricePrecision;
    __declspec(property(get=GetPriceCurrency))
    _bstr_t PriceCurrency;
    __declspec(property(get=GetReplyToNumber,put=PutReplyToNumber))
    _bstr_t ReplyToNumber;
    __declspec(property(get=GetTargets))
    ISmsTargetCollectionPtr Targets;
    __declspec(property(get=GetBody,put=PutBody))
    _bstr_t Body;
    __declspec(property(get=GetChunks))
    ISmsChunkCollectionPtr Chunks;
    __declspec(property(get=GetTimestamp))
    DATE Timestamp;
    __declspec(property(get=GetTargetNumbers,put=PutTargetNumbers))
    _bstr_t TargetNumbers;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    enum TSmsMessageType GetType ( );
    enum TSmsMessageStatus GetStatus ( );
    enum TSmsFailureReason GetFailureReason ( );
    VARIANT_BOOL GetIsFailedUnseen ( );
    void PutSeen (
        VARIANT_BOOL _arg1 );
    long GetPrice ( );
    long GetPricePrecision ( );
    _bstr_t GetPriceCurrency ( );
    _bstr_t GetReplyToNumber ( );
    void PutReplyToNumber (
        _bstr_t pVal );
    ISmsTargetCollectionPtr GetTargets ( );
    _bstr_t GetBody ( );
    void PutBody (
        _bstr_t pVal );
    ISmsChunkCollectionPtr GetChunks ( );
    DATE GetTimestamp ( );
    HRESULT Send ( );
    HRESULT Delete ( );
    _bstr_t GetTargetNumbers ( );
    void PutTargetNumbers (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum TSmsMessageType * pVal ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum TSmsMessageStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_FailureReason (
        /*[out,retval]*/ enum TSmsFailureReason * pVal ) = 0;
      virtual HRESULT __stdcall get_IsFailedUnseen (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Seen (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall get_Price (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PricePrecision (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_PriceCurrency (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ReplyToNumber (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_ReplyToNumber (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Targets (
        /*[out,retval]*/ struct ISmsTargetCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Chunks (
        /*[out,retval]*/ struct ISmsChunkCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_Timestamp (
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall raw_Send ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_TargetNumbers (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_TargetNumbers (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("a9b9c33a-49a6-41d5-b13f-2aa4f284f406"))
ISmsTarget : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStatus))
    enum TSmsTargetStatus Status;
    __declspec(property(get=GetNumber))
    _bstr_t Number;
    __declspec(property(get=GetMessage))
    ISmsMessagePtr Message;

    //
    // Wrapper methods for error-handling
    //

    enum TSmsTargetStatus GetStatus ( );
    _bstr_t GetNumber ( );
    ISmsMessagePtr GetMessage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum TSmsTargetStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ struct ISmsMessage * * pVal ) = 0;
};

struct __declspec(uuid("a2365ef3-4805-4dd3-a9d4-1a8ae3e17d84"))
ISmsTargetCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISmsTargetPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct ISmsTarget * pItem );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    ISmsTargetPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct ISmsTarget * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISmsTarget * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("a9062508-c926-4415-abb7-a5a46db34456"))
ISmsChunk : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetCharactersLeft))
    long CharactersLeft;
    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetMessage))
    ISmsMessagePtr Message;

    //
    // Wrapper methods for error-handling
    //

    long GetId ( );
    long GetCharactersLeft ( );
    _bstr_t GetText ( );
    ISmsMessagePtr GetMessage ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_CharactersLeft (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ struct ISmsMessage * * pVal ) = 0;
};

struct __declspec(uuid("bbda7d2d-b1c2-4af9-ab5b-d762341d8903"))
ISmsChunkCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISmsChunkPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct ISmsChunk * pItem );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    ISmsChunkPtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct ISmsChunk * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISmsChunk * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("1d5bab2e-69cc-4136-8e02-fc20767dc9e2"))
ISmsMessageCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISmsMessagePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct ISmsMessage * pItem );
    HRESULT Remove (
        long Index );
    HRESULT RemoveAll ( );
    ISmsMessagePtr GetItem (
        long Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct ISmsMessage * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ struct ISmsMessage * * pVal ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pVal ) = 0;
};

struct __declspec(uuid("6d0b4547-771d-4c4f-b3e8-98a33fd24d2b"))
ISkypeSms : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSmsMessageType))
    enum TSmsMessageType SmsMessageType[];
    __declspec(property(get=GetSmsMessageStatus))
    enum TSmsMessageStatus SmsMessageStatus[];
    __declspec(property(get=GetSmsFailureReason))
    enum TSmsFailureReason SmsFailureReason[];
    __declspec(property(get=GetSmsIsFailedUnseen))
    VARIANT_BOOL SmsIsFailedUnseen[];
    __declspec(property(put=PutSmsSeen))
    _bstr_t SmsSeen;
    __declspec(property(get=GetSmsPrice))
    long SmsPrice[];
    __declspec(property(get=GetSmsPriceCurrency))
    _bstr_t SmsPriceCurrency[];
    __declspec(property(get=GetSmsPricePrecision))
    long SmsPricePrecision[];
    __declspec(property(get=GetSmsReplyToNumber,put=PutSmsReplyToNumber))
    _bstr_t SmsReplyToNumber[];
    __declspec(property(get=GetSmsTargets))
    ISmsTargetCollectionPtr SmsTargets[];
    __declspec(property(get=GetSmsBody,put=PutSmsBody))
    _bstr_t SmsBody[];
    __declspec(property(get=GetSmsChunks))
    ISmsChunkCollectionPtr SmsChunks[];
    __declspec(property(get=GetSmsTargetStatus))
    enum TSmsTargetStatus SmsTargetStatus[][];
    __declspec(property(get=GetSmsChunkText))
    _bstr_t SmsChunkText[][];
    __declspec(property(get=GetSmsChunkCharactersLeft))
    long SmsChunkCharactersLeft[][];
    __declspec(property(get=GetSmsTimestamp))
    DATE SmsTimestamp[];
    __declspec(property(get=GetSmsTargetNumbers,put=PutSmsTargetNumbers))
    _bstr_t SmsTargetNumbers[];

    //
    // Wrapper methods for error-handling
    //

    enum TSmsMessageType GetSmsMessageType (
        _bstr_t SmsId );
    enum TSmsMessageStatus GetSmsMessageStatus (
        _bstr_t SmsId );
    enum TSmsFailureReason GetSmsFailureReason (
        _bstr_t SmsId );
    VARIANT_BOOL GetSmsIsFailedUnseen (
        _bstr_t SmsId );
    void PutSmsSeen (
        _bstr_t _arg1 );
    long GetSmsPrice (
        _bstr_t SmsId );
    _bstr_t GetSmsPriceCurrency (
        _bstr_t SmsId );
    long GetSmsPricePrecision (
        _bstr_t SmsId );
    _bstr_t GetSmsReplyToNumber (
        _bstr_t SmsId );
    void PutSmsReplyToNumber (
        _bstr_t SmsId,
        _bstr_t pVal );
    ISmsTargetCollectionPtr GetSmsTargets (
        _bstr_t SmsId );
    _bstr_t GetSmsBody (
        _bstr_t SmsId );
    void PutSmsBody (
        _bstr_t SmsId,
        _bstr_t pVal );
    ISmsChunkCollectionPtr GetSmsChunks (
        _bstr_t SmsId );
    HRESULT SendSmsMessage (
        _bstr_t SmsId );
    HRESULT DeleteSmsMessage (
        _bstr_t SmsId );
    enum TSmsTargetStatus GetSmsTargetStatus (
        _bstr_t SmsId,
        _bstr_t Number );
    _bstr_t GetSmsChunkText (
        _bstr_t SmsId,
        _bstr_t ChunkId );
    long GetSmsChunkCharactersLeft (
        _bstr_t SmsId,
        _bstr_t ChunkId );
    DATE GetSmsTimestamp (
        _bstr_t SmsId );
    _bstr_t GetSmsTargetNumbers (
        _bstr_t SmsId );
    void PutSmsTargetNumbers (
        _bstr_t SmsId,
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SmsMessageType (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ enum TSmsMessageType * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsMessageStatus (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ enum TSmsMessageStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsFailureReason (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ enum TSmsFailureReason * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsIsFailedUnseen (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_SmsSeen (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_SmsPrice (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsPriceCurrency (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsPricePrecision (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsReplyToNumber (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SmsReplyToNumber (
        /*[in]*/ BSTR SmsId,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SmsTargets (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ struct ISmsTargetCollection * * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsBody (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SmsBody (
        /*[in]*/ BSTR SmsId,
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_SmsChunks (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ struct ISmsChunkCollection * * pVal ) = 0;
      virtual HRESULT __stdcall raw_SendSmsMessage (
        /*[in]*/ BSTR SmsId ) = 0;
      virtual HRESULT __stdcall raw_DeleteSmsMessage (
        /*[in]*/ BSTR SmsId ) = 0;
      virtual HRESULT __stdcall get_SmsTargetStatus (
        /*[in]*/ BSTR SmsId,
        /*[in]*/ BSTR Number,
        /*[out,retval]*/ enum TSmsTargetStatus * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsChunkText (
        /*[in]*/ BSTR SmsId,
        /*[in]*/ BSTR ChunkId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsChunkCharactersLeft (
        /*[in]*/ BSTR SmsId,
        /*[in]*/ BSTR ChunkId,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsTimestamp (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ DATE * pVal ) = 0;
      virtual HRESULT __stdcall get_SmsTargetNumbers (
        /*[in]*/ BSTR SmsId,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_SmsTargetNumbers (
        /*[in]*/ BSTR SmsId,
        /*[in]*/ BSTR pVal ) = 0;
};

//
// Wrapper method implementations
//

#include "f:\vebcam\host_po_skype_hidlibrary_win\host_po_skype_hidlibrary_win\debug\skype4com.tli"

} // namespace SKYPE4COMLib

#pragma pack(pop)
