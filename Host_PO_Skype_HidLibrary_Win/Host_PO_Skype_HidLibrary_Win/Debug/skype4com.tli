// Created by Microsoft (R) C/C++ Compiler Version 11.00.50727.1 (5fc98081).
//
// f:\vebcam\host_po_skype_hidlibrary_win\host_po_skype_hidlibrary_win\debug\skype4com.tli
//
// Wrapper implementations for Win32 type library Skype4COM.dll
// compiler-generated file created 03/13/14 at 20:55:17 - DO NOT EDIT!

#pragma once

//
// interface IApplicationStream wrapper method implementations
//

inline _bstr_t IApplicationStream::GetApplicationName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApplicationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IApplicationStream::GetHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Handle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IApplicationStream::Read ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Read(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IApplicationStream::Write ( _bstr_t Text ) {
    HRESULT _hr = raw_Write(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IApplicationStream::SendDatagram ( _bstr_t Text ) {
    HRESULT _hr = raw_SendDatagram(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IApplicationStream::GetDataLength ( ) {
    long _result = 0;
    HRESULT _hr = get_DataLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IApplicationStream::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IApplicationStream::GetPartnerHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IApplicationStreamCollection wrapper method implementations
//

inline long IApplicationStreamCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IApplicationStreamCollection::Add ( struct IApplicationStream * pItem ) {
    HRESULT _hr = raw_Add(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IApplicationStreamCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IApplicationStreamCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IApplicationStreamPtr IApplicationStreamCollection::GetItem ( long Index ) {
    struct IApplicationStream * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationStreamPtr(_result, false);
}

inline IUnknownPtr IApplicationStreamCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IUser wrapper method implementations
//

inline _bstr_t IUser::GetHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Handle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IUser::PutHandle ( _bstr_t pVal ) {
    HRESULT _hr = put_Handle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IUser::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IUser::GetBirthday ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Birthday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TUserSex IUser::GetSex ( ) {
    enum TUserSex _result;
    HRESULT _hr = get_Sex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IUser::GetCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Country(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetProvince ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Province(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_City(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetPhoneHome ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneHome(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetPhoneOffice ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneOffice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetPhoneMobile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneMobile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetHomepage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Homepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetAbout ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_About(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IUser::GetHasCallEquipment ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasCallEquipment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TBuddyStatus IUser::GetBuddyStatus ( ) {
    enum TBuddyStatus _result;
    HRESULT _hr = get_BuddyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IUser::PutBuddyStatus ( enum TBuddyStatus pVal ) {
    HRESULT _hr = put_BuddyStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IUser::GetIsAuthorized ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsAuthorized(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IUser::PutIsAuthorized ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsAuthorized(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IUser::GetIsBlocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsBlocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IUser::PutIsBlocked ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_IsBlocked(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IUser::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TOnlineStatus IUser::GetOnlineStatus ( ) {
    enum TOnlineStatus _result;
    HRESULT _hr = get_OnlineStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IUser::GetLastOnline ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastOnline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IUser::GetCountryCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CountryCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetReceivedAuthRequest ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedAuthRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetSpeedDial ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SpeedDial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IUser::PutSpeedDial ( _bstr_t pVal ) {
    HRESULT _hr = put_SpeedDial(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IUser::GetCanLeaveVoicemail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanLeaveVoicemail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IUser::GetMoodText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MoodText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetAliases ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Aliases(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IUser::GetTimezone ( ) {
    long _result = 0;
    HRESULT _hr = get_Timezone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IUser::GetIsCallForwardActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCallForwardActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IUser::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IUser::GetLanguageCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LanguageCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IUser::GetIsVideoCapable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVideoCapable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IUser::GetIsSkypeOutContact ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSkypeOutContact(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IUser::GetNumberOfAuthBuddies ( ) {
    long _result = 0;
    HRESULT _hr = get_NumberOfAuthBuddies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IUser::PutDisplayName ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IUser::GetRichMoodText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RichMoodText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IUser::GetIsVoicemailCapable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVoicemailCapable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IUserCollection wrapper method implementations
//

inline long IUserCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IUserCollection::Add ( struct IUser * pUser ) {
    HRESULT _hr = raw_Add(pUser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IUserCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IUserCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUserPtr IUserCollection::GetItem ( long Index ) {
    struct IUser * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserPtr(_result, false);
}

inline IUnknownPtr IUserCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IApplication wrapper method implementations
//

inline _bstr_t IApplication::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IApplication::Create ( ) {
    HRESULT _hr = raw_Create();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IApplication::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IApplicationStreamCollectionPtr IApplication::GetStreams ( ) {
    struct IApplicationStreamCollection * _result = 0;
    HRESULT _hr = get_Streams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationStreamCollectionPtr(_result, false);
}

inline IUserCollectionPtr IApplication::GetConnectableUsers ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ConnectableUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline IUserCollectionPtr IApplication::GetConnectingUsers ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ConnectingUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline HRESULT IApplication::Connect ( _bstr_t Username, VARIANT_BOOL WaitConnected ) {
    HRESULT _hr = raw_Connect(Username, WaitConnected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IApplicationStreamCollectionPtr IApplication::GetSendingStreams ( ) {
    struct IApplicationStreamCollection * _result = 0;
    HRESULT _hr = get_SendingStreams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationStreamCollectionPtr(_result, false);
}

inline IApplicationStreamCollectionPtr IApplication::GetReceivedStreams ( ) {
    struct IApplicationStreamCollection * _result = 0;
    HRESULT _hr = get_ReceivedStreams(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationStreamCollectionPtr(_result, false);
}

inline HRESULT IApplication::SendDatagram ( _bstr_t Text, struct IApplicationStreamCollection * pStreams ) {
    HRESULT _hr = raw_SendDatagram(Text, pStreams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IParticipant wrapper method implementations
//

inline _bstr_t IParticipant::GetHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Handle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IParticipant::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TCallType IParticipant::GetCallType ( ) {
    enum TCallType _result;
    HRESULT _hr = get_CallType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallStatus IParticipant::GetCallStatus ( ) {
    enum TCallStatus _result;
    HRESULT _hr = get_CallStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IParticipantCollection wrapper method implementations
//

inline long IParticipantCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IParticipantCollection::Add ( struct IParticipant * pParticipant ) {
    HRESULT _hr = raw_Add(pParticipant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IParticipantCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IParticipantCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IParticipantPtr IParticipantCollection::GetItem ( long Index ) {
    struct IParticipant * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantPtr(_result, false);
}

inline IUnknownPtr IParticipantCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICall wrapper method implementations
//

inline long ICall::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE ICall::GetTimestamp ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Timestamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICall::GetPartnerHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICall::GetPartnerDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ICall::GetConferenceId ( ) {
    long _result = 0;
    HRESULT _hr = get_ConferenceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallType ICall::GetType ( ) {
    enum TCallType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallStatus ICall::GetStatus ( ) {
    enum TCallStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICall::PutStatus ( enum TCallStatus pVal ) {
    HRESULT _hr = put_Status(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TCallFailureReason ICall::GetFailureReason ( ) {
    enum TCallFailureReason _result;
    HRESULT _hr = get_FailureReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICall::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICall::GetPstnNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PstnNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ICall::GetDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICall::GetPstnStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PstnStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICall::PutSeen ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Seen(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ICall::Hold ( ) {
    HRESULT _hr = raw_Hold();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICall::Resume ( ) {
    HRESULT _hr = raw_Resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICall::Finish ( ) {
    HRESULT _hr = raw_Finish();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICall::Answer ( ) {
    HRESULT _hr = raw_Answer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void ICall::PutDTMF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_DTMF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IParticipantCollectionPtr ICall::GetParticipants ( ) {
    struct IParticipantCollection * _result = 0;
    HRESULT _hr = get_Participants(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantCollectionPtr(_result, false);
}

inline HRESULT ICall::Join ( long Id ) {
    HRESULT _hr = raw_Join(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ICall::GetVmDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_VmDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ICall::GetVmAllowedDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_VmAllowedDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallVideoStatus ICall::GetVideoStatus ( ) {
    enum TCallVideoStatus _result;
    HRESULT _hr = get_VideoStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallVideoSendStatus ICall::GetVideoSendStatus ( ) {
    enum TCallVideoSendStatus _result;
    HRESULT _hr = get_VideoSendStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallVideoSendStatus ICall::GetVideoReceiveStatus ( ) {
    enum TCallVideoSendStatus _result;
    HRESULT _hr = get_VideoReceiveStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICall::StartVideoSend ( ) {
    HRESULT _hr = raw_StartVideoSend();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICall::StopVideoSend ( ) {
    HRESULT _hr = raw_StopVideoSend();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICall::StartVideoReceive ( ) {
    HRESULT _hr = raw_StartVideoReceive();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICall::StopVideoReceive ( ) {
    HRESULT _hr = raw_StopVideoReceive();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICall::RedirectToVoicemail ( ) {
    HRESULT _hr = raw_RedirectToVoicemail();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICall::Forward ( ) {
    HRESULT _hr = raw_Forward();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ICall::GetRate ( ) {
    long _result = 0;
    HRESULT _hr = get_Rate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICall::GetRateCurrency ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RateCurrency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ICall::GetRatePrecision ( ) {
    long _result = 0;
    HRESULT _hr = get_RatePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICall::GetInputDevice ( enum TCallIoDeviceType DeviceType ) {
    BSTR _result = 0;
    HRESULT _hr = get_InputDevice(DeviceType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICall::PutInputDevice ( enum TCallIoDeviceType DeviceType, _bstr_t pVal ) {
    HRESULT _hr = put_InputDevice(DeviceType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICall::GetOutputDevice ( enum TCallIoDeviceType DeviceType ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutputDevice(DeviceType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICall::PutOutputDevice ( enum TCallIoDeviceType DeviceType, _bstr_t pVal ) {
    HRESULT _hr = put_OutputDevice(DeviceType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICall::GetCaptureMicDevice ( enum TCallIoDeviceType DeviceType ) {
    BSTR _result = 0;
    HRESULT _hr = get_CaptureMicDevice(DeviceType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICall::PutCaptureMicDevice ( enum TCallIoDeviceType DeviceType, _bstr_t pVal ) {
    HRESULT _hr = put_CaptureMicDevice(DeviceType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ICall::GetInputStatus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InputStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICall::GetForwardedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ForwardedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ICall::GetSeen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Seen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ICall::GetCanTransfer ( _bstr_t Target ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanTransfer(Target, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallStatus ICall::GetTransferStatus ( ) {
    enum TCallStatus _result;
    HRESULT _hr = get_TransferStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ICall::GetTransferActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TransferActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICall::GetTransferredBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TransferredBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICall::GetTransferredTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TransferredTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ICall::Transfer ( _bstr_t Target ) {
    HRESULT _hr = raw_Transfer(Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ICall::GetTargetIdentity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetIdentity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IConversion wrapper method implementations
//

inline _bstr_t IConversion::OnlineStatusToText ( enum TOnlineStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_OnlineStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TOnlineStatus IConversion::TextToOnlineStatus ( _bstr_t Text ) {
    enum TOnlineStatus _result;
    HRESULT _hr = raw_TextToOnlineStatus(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::BuddyStatusToText ( enum TBuddyStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_BuddyStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TBuddyStatus IConversion::TextToBuddyStatus ( _bstr_t Text ) {
    enum TBuddyStatus _result;
    HRESULT _hr = raw_TextToBuddyStatus(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::CallStatusToText ( enum TCallStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CallStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TCallStatus IConversion::TextToCallStatus ( _bstr_t Text ) {
    enum TCallStatus _result;
    HRESULT _hr = raw_TextToCallStatus(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::CallTypeToText ( enum TCallType CallType ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CallTypeToText(CallType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TCallType IConversion::TextToCallType ( _bstr_t Text ) {
    enum TCallType _result;
    HRESULT _hr = raw_TextToCallType(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::UserSexToText ( enum TUserSex Sex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_UserSexToText(Sex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TUserSex IConversion::TextToUserSex ( _bstr_t Text ) {
    enum TUserSex _result;
    HRESULT _hr = raw_TextToUserSex(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::ConnectionStatusToText ( enum TConnectionStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ConnectionStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TConnectionStatus IConversion::TextToConnectionStatus ( _bstr_t Text ) {
    enum TConnectionStatus _result;
    HRESULT _hr = raw_TextToConnectionStatus(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::UserStatusToText ( enum TUserStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_UserStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TUserStatus IConversion::TextToUserStatus ( _bstr_t Text ) {
    enum TUserStatus _result;
    HRESULT _hr = raw_TextToUserStatus(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::CallFailureReasonToText ( enum TCallFailureReason reason ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CallFailureReasonToText(reason, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::AttachmentStatusToText ( enum TAttachmentStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_AttachmentStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::ChatLeaveReasonToText ( enum TChatLeaveReason reason ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ChatLeaveReasonToText(reason, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::ChatStatusToText ( enum TChatStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ChatStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::VoicemailTypeToText ( enum TVoicemailType Type ) {
    BSTR _result = 0;
    HRESULT _hr = raw_VoicemailTypeToText(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::VoicemailStatusToText ( enum TVoicemailStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_VoicemailStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TVoicemailStatus IConversion::TextToVoicemailStatus ( _bstr_t Text ) {
    enum TVoicemailStatus _result;
    HRESULT _hr = raw_TextToVoicemailStatus(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::VoicemailFailureReasonToText ( enum TVoicemailFailureReason code ) {
    BSTR _result = 0;
    HRESULT _hr = raw_VoicemailFailureReasonToText(code, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::ChatMessageStatusToText ( enum TChatMessageStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ChatMessageStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TChatMessageStatus IConversion::TextToChatMessageStatus ( _bstr_t Text ) {
    enum TChatMessageStatus _result;
    HRESULT _hr = raw_TextToChatMessageStatus(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::ChatMessageTypeToText ( enum TChatMessageType Type ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ChatMessageTypeToText(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TChatMessageType IConversion::TextToChatMessageType ( _bstr_t Text ) {
    enum TChatMessageType _result;
    HRESULT _hr = raw_TextToChatMessageType(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TAttachmentStatus IConversion::TextToAttachmentStatus ( _bstr_t Text ) {
    enum TAttachmentStatus _result;
    HRESULT _hr = raw_TextToAttachmentStatus(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::GroupTypeToText ( enum TGroupType Type ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GroupTypeToText(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TGroupType IConversion::TextToGroupType ( _bstr_t Text ) {
    enum TGroupType _result;
    HRESULT _hr = raw_TextToGroupType(Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConversion::CallVideoStatusToText ( enum TCallVideoStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CallVideoStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::CallVideoSendStatusToText ( enum TCallVideoSendStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_CallVideoSendStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IConversion::PutLanguage ( _bstr_t pVal ) {
    HRESULT _hr = put_Language(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IConversion::SmsMessageStatusToText ( enum TSmsMessageStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmsMessageStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::SmsMessageTypeToText ( enum TSmsMessageType Type ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmsMessageTypeToText(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConversion::SmsTargetStatusToText ( enum TSmsTargetStatus Status ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmsTargetStatusToText(Status, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICallCollection wrapper method implementations
//

inline long ICallCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICallCollection::Add ( struct ICall * pCall ) {
    HRESULT _hr = raw_Add(pCall);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICallCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICallCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ICallPtr ICallCollection::GetItem ( long Index ) {
    struct ICall * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallPtr(_result, false);
}

inline IUnknownPtr ICallCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICommand wrapper method implementations
//

inline long ICommand::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICommand::PutId ( long pVal ) {
    HRESULT _hr = put_Id(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ICommand::GetTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_Timeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICommand::PutTimeout ( long pVal ) {
    HRESULT _hr = put_Timeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ICommand::GetBlocking ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Blocking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICommand::PutBlocking ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Blocking(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICommand::GetCommand ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Command(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICommand::PutCommand ( _bstr_t pVal ) {
    HRESULT _hr = put_Command(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICommand::GetReply ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICommand::PutReply ( _bstr_t pVal ) {
    HRESULT _hr = put_Reply(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICommand::GetExpected ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Expected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICommand::PutExpected ( _bstr_t pVal ) {
    HRESULT _hr = put_Expected(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IConference wrapper method implementations
//

inline long IConference::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ICallCollectionPtr IConference::GetCalls ( ) {
    struct ICallCollection * _result = 0;
    HRESULT _hr = get_Calls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallCollectionPtr(_result, false);
}

inline ICallCollectionPtr IConference::GetActiveCalls ( ) {
    struct ICallCollection * _result = 0;
    HRESULT _hr = get_ActiveCalls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallCollectionPtr(_result, false);
}

inline HRESULT IConference::Hold ( ) {
    HRESULT _hr = raw_Hold();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConference::Resume ( ) {
    HRESULT _hr = raw_Resume();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConference::Finish ( ) {
    HRESULT _hr = raw_Finish();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConferenceCollection wrapper method implementations
//

inline long IConferenceCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IConferenceCollection::Add ( struct IConference * pItem ) {
    HRESULT _hr = raw_Add(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConferenceCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IConferenceCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IConferencePtr IConferenceCollection::GetItem ( long Index ) {
    struct IConference * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConferencePtr(_result, false);
}

inline IUnknownPtr IConferenceCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IVoicemail wrapper method implementations
//

inline enum TVoicemailType IVoicemail::GetType ( ) {
    enum TVoicemailType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IVoicemail::GetPartnerHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IVoicemail::GetPartnerDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TVoicemailStatus IVoicemail::GetStatus ( ) {
    enum TVoicemailStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TVoicemailFailureReason IVoicemail::GetFailureReason ( ) {
    enum TVoicemailFailureReason _result;
    HRESULT _hr = get_FailureReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IVoicemail::GetTimestamp ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Timestamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IVoicemail::GetDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IVoicemail::GetAllowedDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_AllowedDuration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IVoicemail::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IVoicemail::Open ( ) {
    HRESULT _hr = raw_Open();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemail::StartPlayback ( ) {
    HRESULT _hr = raw_StartPlayback();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemail::StopPlayback ( ) {
    HRESULT _hr = raw_StopPlayback();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemail::Upload ( ) {
    HRESULT _hr = raw_Upload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemail::Download ( ) {
    HRESULT _hr = raw_Download();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemail::StartRecording ( ) {
    HRESULT _hr = raw_StartRecording();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemail::StopRecording ( ) {
    HRESULT _hr = raw_StopRecording();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemail::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemail::StartPlaybackInCall ( ) {
    HRESULT _hr = raw_StartPlaybackInCall();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemail::SetUnplayed ( ) {
    HRESULT _hr = raw_SetUnplayed();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IVoicemailCollection wrapper method implementations
//

inline long IVoicemailCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IVoicemailCollection::Add ( struct IVoicemail * pItem ) {
    HRESULT _hr = raw_Add(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemailCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IVoicemailCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IVoicemailPtr IVoicemailCollection::GetItem ( long Index ) {
    struct IVoicemail * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVoicemailPtr(_result, false);
}

inline IUnknownPtr IVoicemailCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IProfile wrapper method implementations
//

inline _bstr_t IProfile::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutFullName ( _bstr_t pVal ) {
    HRESULT _hr = put_FullName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetBirthday ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Birthday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutBirthday ( _bstr_t pVal ) {
    HRESULT _hr = put_Birthday(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TUserSex IProfile::GetSex ( ) {
    enum TUserSex _result;
    HRESULT _hr = get_Sex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IProfile::PutSex ( enum TUserSex pVal ) {
    HRESULT _hr = put_Sex(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetLanguages ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Languages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutLanguages ( _bstr_t pVal ) {
    HRESULT _hr = put_Languages(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Country(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutCountry ( _bstr_t pVal ) {
    HRESULT _hr = put_Country(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetProvince ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Province(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutProvince ( _bstr_t pVal ) {
    HRESULT _hr = put_Province(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_City(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutCity ( _bstr_t pVal ) {
    HRESULT _hr = put_City(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetPhoneHome ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneHome(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutPhoneHome ( _bstr_t pVal ) {
    HRESULT _hr = put_PhoneHome(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetPhoneOffice ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneOffice(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutPhoneOffice ( _bstr_t pVal ) {
    HRESULT _hr = put_PhoneOffice(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetPhoneMobile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneMobile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutPhoneMobile ( _bstr_t pVal ) {
    HRESULT _hr = put_PhoneMobile(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetHomepage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Homepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutHomepage ( _bstr_t pVal ) {
    HRESULT _hr = put_Homepage(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetAbout ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_About(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutAbout ( _bstr_t pVal ) {
    HRESULT _hr = put_About(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetMoodText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MoodText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutMoodText ( _bstr_t pVal ) {
    HRESULT _hr = put_MoodText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IProfile::GetTimezone ( ) {
    long _result = 0;
    HRESULT _hr = get_Timezone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IProfile::PutTimezone ( long pVal ) {
    HRESULT _hr = put_Timezone(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline short IProfile::GetCallNoAnswerTimeout ( ) {
    short _result = 0;
    HRESULT _hr = get_CallNoAnswerTimeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IProfile::PutCallNoAnswerTimeout ( short pVal ) {
    HRESULT _hr = put_CallNoAnswerTimeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IProfile::GetCallApplyCF ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CallApplyCF(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IProfile::PutCallApplyCF ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CallApplyCF(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IProfile::GetCallSendToVM ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CallSendToVM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IProfile::PutCallSendToVM ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CallSendToVM(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IProfile::GetCallForwardRules ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallForwardRules(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutCallForwardRules ( _bstr_t pVal ) {
    HRESULT _hr = put_CallForwardRules(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IProfile::GetBalance ( ) {
    long _result = 0;
    HRESULT _hr = get_Balance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IProfile::GetBalanceCurrency ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BalanceCurrency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IProfile::GetBalanceToText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BalanceToText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IProfile::GetIPCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IPCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IProfile::GetValidatedSmsNumbers ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidatedSmsNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IProfile::GetRichMoodText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RichMoodText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IProfile::PutRichMoodText ( _bstr_t pVal ) {
    HRESULT _hr = put_RichMoodText(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGroup wrapper method implementations
//

inline long IGroup::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TGroupType IGroup::GetType ( ) {
    enum TGroupType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IGroup::GetCustomGroupId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomGroupId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IGroup::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IGroup::PutDisplayName ( _bstr_t pVal ) {
    HRESULT _hr = put_DisplayName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUserCollectionPtr IGroup::GetUsers ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_Users(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline IUserCollectionPtr IGroup::GetOnlineUsers ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_OnlineUsers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline VARIANT_BOOL IGroup::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IGroup::GetIsExpanded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsExpanded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGroup::AddUser ( _bstr_t Username ) {
    HRESULT _hr = raw_AddUser(Username);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGroup::RemoveUser ( _bstr_t Username ) {
    HRESULT _hr = raw_RemoveUser(Username);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGroup::Share ( _bstr_t MessageText ) {
    HRESULT _hr = raw_Share(MessageText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGroup::Accept ( ) {
    HRESULT _hr = raw_Accept();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGroup::Decline ( ) {
    HRESULT _hr = raw_Decline();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IGroupCollection wrapper method implementations
//

inline long IGroupCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IGroupCollection::Add ( struct IGroup * pGroup ) {
    HRESULT _hr = raw_Add(pGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGroupCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IGroupCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IGroupPtr IGroupCollection::GetItem ( long Index ) {
    struct IGroup * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupPtr(_result, false);
}

inline IUnknownPtr IGroupCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISettings wrapper method implementations
//

inline _bstr_t ISettings::GetAudioIn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AudioIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISettings::PutAudioIn ( _bstr_t pVal ) {
    HRESULT _hr = put_AudioIn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISettings::GetAudioOut ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AudioOut(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISettings::PutAudioOut ( _bstr_t pVal ) {
    HRESULT _hr = put_AudioOut(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISettings::GetAutoAway ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoAway(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISettings::PutAutoAway ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AutoAway(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISettings::GetRinger ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Ringer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISettings::PutRinger ( _bstr_t pVal ) {
    HRESULT _hr = put_Ringer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISettings::PutAvatar ( _bstr_t Id, _bstr_t _arg2 ) {
    HRESULT _hr = put_Avatar(Id, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISettings::GetRingToneStatus ( _bstr_t Id ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RingToneStatus(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISettings::PutRingTone ( _bstr_t Id, _bstr_t _arg2 ) {
    HRESULT _hr = put_RingTone(Id, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISettings::GetVideoIn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VideoIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISettings::PutVideoIn ( _bstr_t pVal ) {
    HRESULT _hr = put_VideoIn(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISettings::GetPCSpeaker ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PCSpeaker(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISettings::PutPCSpeaker ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_PCSpeaker(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISettings::GetAGC ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AGC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISettings::PutAGC ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AGC(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISettings::GetAEC ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AEC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISettings::PutAEC ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_AEC(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISettings::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISettings::PutLanguage ( _bstr_t pVal ) {
    HRESULT _hr = put_Language(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISettings::PutRingToneStatus ( _bstr_t Id, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_RingToneStatus(Id, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISettings::SaveAvatarToFile ( _bstr_t Filename, _bstr_t AvatarId ) {
    HRESULT _hr = raw_SaveAvatarToFile(Filename, AvatarId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISettings::LoadAvatarFromFile ( _bstr_t Filename, _bstr_t AvatarId ) {
    HRESULT _hr = raw_LoadAvatarFromFile(Filename, AvatarId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISettings::ResetIdleTimer ( ) {
    HRESULT _hr = raw_ResetIdleTimer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPluginEvent wrapper method implementations
//

inline _bstr_t IPluginEvent::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IPluginEvent::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPluginMenuItem wrapper method implementations
//

inline _bstr_t IPluginMenuItem::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPluginMenuItem::PutCaption ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Caption(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IPluginMenuItem::PutHint ( _bstr_t _arg1 ) {
    HRESULT _hr = put_Hint(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IPluginMenuItem::PutEnabled ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_Enabled(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPluginMenuItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IClient wrapper method implementations
//

inline HRESULT IClient::Start ( VARIANT_BOOL Minimized, VARIANT_BOOL Nosplash ) {
    HRESULT _hr = raw_Start(Minimized, Nosplash);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::Minimize ( ) {
    HRESULT _hr = raw_Minimize();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::Shutdown ( ) {
    HRESULT _hr = raw_Shutdown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IClient::GetIsRunning ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRunning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IClient::OpenProfileDialog ( ) {
    HRESULT _hr = raw_OpenProfileDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenUserInfoDialog ( _bstr_t Username ) {
    HRESULT _hr = raw_OpenUserInfoDialog(Username);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenConferenceDialog ( ) {
    HRESULT _hr = raw_OpenConferenceDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenSearchDialog ( ) {
    HRESULT _hr = raw_OpenSearchDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenOptionsDialog ( _bstr_t Page ) {
    HRESULT _hr = raw_OpenOptionsDialog(Page);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenCallHistoryTab ( ) {
    HRESULT _hr = raw_OpenCallHistoryTab();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenContactsTab ( ) {
    HRESULT _hr = raw_OpenContactsTab();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenDialpadTab ( ) {
    HRESULT _hr = raw_OpenDialpadTab();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenSendContactsDialog ( _bstr_t Username ) {
    HRESULT _hr = raw_OpenSendContactsDialog(Username);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenBlockedUsersDialog ( ) {
    HRESULT _hr = raw_OpenBlockedUsersDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenImportContactsWizard ( ) {
    HRESULT _hr = raw_OpenImportContactsWizard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenGettingStartedWizard ( ) {
    HRESULT _hr = raw_OpenGettingStartedWizard();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenAuthorizationDialog ( _bstr_t Username ) {
    HRESULT _hr = raw_OpenAuthorizationDialog(Username);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenDialog ( _bstr_t Name, _bstr_t Param1, _bstr_t Param2 ) {
    HRESULT _hr = raw_OpenDialog(Name, Param1, Param2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenVideoTestDialog ( ) {
    HRESULT _hr = raw_OpenVideoTestDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenAddContactDialog ( _bstr_t Username ) {
    HRESULT _hr = raw_OpenAddContactDialog(Username);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenMessageDialog ( _bstr_t Username, _bstr_t Text ) {
    HRESULT _hr = raw_OpenMessageDialog(Username, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenFileTransferDialog ( _bstr_t User, _bstr_t Folder ) {
    HRESULT _hr = raw_OpenFileTransferDialog(User, Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::Focus ( ) {
    HRESULT _hr = raw_Focus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::ButtonPressed ( _bstr_t Key ) {
    HRESULT _hr = raw_ButtonPressed(Key);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::ButtonReleased ( _bstr_t Key ) {
    HRESULT _hr = raw_ButtonReleased(Key);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IClient::OpenSmsDialog ( _bstr_t SmsId ) {
    HRESULT _hr = raw_OpenSmsDialog(SmsId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IPluginEventPtr IClient::CreateEvent ( _bstr_t EventId, _bstr_t Caption, _bstr_t Hint ) {
    struct IPluginEvent * _result = 0;
    HRESULT _hr = raw_CreateEvent(EventId, Caption, Hint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPluginEventPtr(_result, false);
}

inline IPluginMenuItemPtr IClient::CreateMenuItem ( _bstr_t MenuItemId, enum TPluginContext PluginContext, _bstr_t CaptionText, _bstr_t HintText, _bstr_t IconPath, VARIANT_BOOL Enabled, enum TPluginContactType ContactType, VARIANT_BOOL MultipleContacts ) {
    struct IPluginMenuItem * _result = 0;
    HRESULT _hr = raw_CreateMenuItem(MenuItemId, PluginContext, CaptionText, HintText, IconPath, Enabled, ContactType, MultipleContacts, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPluginMenuItemPtr(_result, false);
}

inline _bstr_t IClient::GetWallpaper ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Wallpaper(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IClient::PutWallpaper ( _bstr_t pVal ) {
    HRESULT _hr = put_Wallpaper(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IClient::OpenLiveTab ( ) {
    HRESULT _hr = raw_OpenLiveTab();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFileTransfer wrapper method implementations
//

inline _bstr_t IFileTransfer::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TFileTransferType IFileTransfer::GetType ( ) {
    enum TFileTransferType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TFileTransferStatus IFileTransfer::GetStatus ( ) {
    enum TFileTransferStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TFileTransferFailureReason IFileTransfer::GetFailureReason ( ) {
    enum TFileTransferFailureReason _result;
    HRESULT _hr = get_FailureReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IFileTransfer::GetPartnerHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IFileTransfer::GetPartnerDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PartnerDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IFileTransfer::GetStartTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IFileTransfer::GetFinishTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_FinishTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IFileTransfer::GetFilePath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FilePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IFileTransfer::GetFilename ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filename(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IFileTransfer::GetBytesPerSecond ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BytesPerSecond(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IFileTransfer::GetBytesTransferred ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BytesTransferred(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IFileTransferCollection wrapper method implementations
//

inline long IFileTransferCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IFileTransferCollection::Add ( struct IFileTransfer * pItem ) {
    HRESULT _hr = raw_Add(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFileTransferCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IFileTransferCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IFileTransferPtr IFileTransferCollection::GetItem ( long Index ) {
    struct IFileTransfer * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFileTransferPtr(_result, false);
}

inline IUnknownPtr IFileTransferCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICallChannelMessage wrapper method implementations
//

inline _bstr_t ICallChannelMessage::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICallChannelMessage::PutText ( _bstr_t pVal ) {
    HRESULT _hr = put_Text(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISkypeApplication wrapper method implementations
//

inline HRESULT ISkypeApplication::CreateApplication ( _bstr_t Name ) {
    HRESULT _hr = raw_CreateApplication(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeApplication::DeleteApplication ( _bstr_t Name ) {
    HRESULT _hr = raw_DeleteApplication(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IApplicationStreamCollectionPtr ISkypeApplication::GetApplicationStreams ( _bstr_t AppName ) {
    struct IApplicationStreamCollection * _result = 0;
    HRESULT _hr = get_ApplicationStreams(AppName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationStreamCollectionPtr(_result, false);
}

inline HRESULT ISkypeApplication::ConnectApplicationUser ( _bstr_t AppName, _bstr_t Username, VARIANT_BOOL WaitConnected ) {
    HRESULT _hr = raw_ConnectApplicationUser(AppName, Username, WaitConnected);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISkypeApplication::ReadApplicationStream ( _bstr_t AppName, _bstr_t StreamHandle ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ReadApplicationStream(AppName, StreamHandle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISkypeApplication::WriteApplicationStream ( _bstr_t AppName, _bstr_t StreamHandle, _bstr_t Text ) {
    HRESULT _hr = raw_WriteApplicationStream(AppName, StreamHandle, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUserCollectionPtr ISkypeApplication::GetApplicationConnectableUsers ( _bstr_t AppName ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ApplicationConnectableUsers(AppName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline IUserCollectionPtr ISkypeApplication::GetApplicationConnectingUsers ( _bstr_t AppName ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ApplicationConnectingUsers(AppName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline HRESULT ISkypeApplication::DisconnectApplicationUser ( _bstr_t AppName, _bstr_t Username ) {
    HRESULT _hr = raw_DisconnectApplicationUser(AppName, Username);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeApplication::SendApplicationDatagram ( _bstr_t AppName, _bstr_t StreamHandle, _bstr_t Text ) {
    HRESULT _hr = raw_SendApplicationDatagram(AppName, StreamHandle, Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IApplicationStreamCollectionPtr ISkypeApplication::GetApplicationSendingStreams ( _bstr_t AppName ) {
    struct IApplicationStreamCollection * _result = 0;
    HRESULT _hr = get_ApplicationSendingStreams(AppName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationStreamCollectionPtr(_result, false);
}

inline IApplicationStreamCollectionPtr ISkypeApplication::GetApplicationReceivedStreams ( _bstr_t AppName ) {
    struct IApplicationStreamCollection * _result = 0;
    HRESULT _hr = get_ApplicationReceivedStreams(AppName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationStreamCollectionPtr(_result, false);
}

//
// interface ISkypeCall wrapper method implementations
//

inline DATE ISkypeCall::GetCallTimestamp ( _bstr_t CallId ) {
    DATE _result = 0;
    HRESULT _hr = get_CallTimestamp(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeCall::GetCallPartnerHandle ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallPartnerHandle(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeCall::GetCallPartnerDisplayName ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallPartnerDisplayName(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeCall::GetCallConferenceId ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallConferenceId(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TCallType ISkypeCall::GetCallType ( _bstr_t CallId ) {
    enum TCallType _result;
    HRESULT _hr = get_CallType(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallStatus ISkypeCall::GetCallStatus ( _bstr_t CallId ) {
    enum TCallStatus _result;
    HRESULT _hr = get_CallStatus(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkypeCall::PutCallStatus ( _bstr_t CallId, enum TCallStatus pVal ) {
    HRESULT _hr = put_CallStatus(CallId, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TCallFailureReason ISkypeCall::GetCallFailureReason ( _bstr_t CallId ) {
    enum TCallFailureReason _result;
    HRESULT _hr = get_CallFailureReason(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeCall::GetCallSubject ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallSubject(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeCall::GetCallPstnNumber ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallPstnNumber(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISkypeCall::GetCallDuration ( _bstr_t CallId ) {
    long _result = 0;
    HRESULT _hr = get_CallDuration(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeCall::GetCallPstnStatus ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallPstnStatus(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeCall::PutCallSeenStatus ( _bstr_t CallId, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CallSeenStatus(CallId, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISkypeCall::CallHold ( _bstr_t CallId ) {
    HRESULT _hr = raw_CallHold(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeCall::CallResume ( _bstr_t CallId ) {
    HRESULT _hr = raw_CallResume(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeCall::CallFinish ( _bstr_t CallId ) {
    HRESULT _hr = raw_CallFinish(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeCall::CallAnswer ( _bstr_t CallId ) {
    HRESULT _hr = raw_CallAnswer(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void ISkypeCall::PutCallDTMF ( _bstr_t CallId, _bstr_t _arg2 ) {
    HRESULT _hr = put_CallDTMF(CallId, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IParticipantCollectionPtr ISkypeCall::GetCallParticipants ( _bstr_t CallId ) {
    struct IParticipantCollection * _result = 0;
    HRESULT _hr = get_CallParticipants(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParticipantCollectionPtr(_result, false);
}

inline HRESULT ISkypeCall::CallJoin ( _bstr_t CallId1, _bstr_t CallId2 ) {
    HRESULT _hr = raw_CallJoin(CallId1, CallId2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISkypeCall::GetCallVmDuration ( _bstr_t CallId ) {
    long _result = 0;
    HRESULT _hr = get_CallVmDuration(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISkypeCall::GetCallVmAllowedDuration ( _bstr_t CallId ) {
    long _result = 0;
    HRESULT _hr = get_CallVmAllowedDuration(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallVideoStatus ISkypeCall::GetCallVideoStatus ( _bstr_t CallId ) {
    enum TCallVideoStatus _result;
    HRESULT _hr = get_CallVideoStatus(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallVideoSendStatus ISkypeCall::GetCallVideoSendStatus ( _bstr_t CallId ) {
    enum TCallVideoSendStatus _result;
    HRESULT _hr = get_CallVideoSendStatus(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallVideoSendStatus ISkypeCall::GetCallVideoReceiveStatus ( _bstr_t CallId ) {
    enum TCallVideoSendStatus _result;
    HRESULT _hr = get_CallVideoReceiveStatus(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISkypeCall::StartCallVideoSend ( _bstr_t CallId ) {
    HRESULT _hr = raw_StartCallVideoSend(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeCall::StopCallVideoSend ( _bstr_t CallId ) {
    HRESULT _hr = raw_StopCallVideoSend(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeCall::StartCallVideoReceive ( _bstr_t CallId ) {
    HRESULT _hr = raw_StartCallVideoReceive(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeCall::StopCallVideoReceive ( _bstr_t CallId ) {
    HRESULT _hr = raw_StopCallVideoReceive(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeCall::RedirectCallToVoicemail ( _bstr_t CallId ) {
    HRESULT _hr = raw_RedirectCallToVoicemail(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeCall::ForwardCall ( _bstr_t CallId ) {
    HRESULT _hr = raw_ForwardCall(CallId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISkypeCall::GetCallRate ( _bstr_t CallId ) {
    long _result = 0;
    HRESULT _hr = get_CallRate(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeCall::GetCallRateCurrency ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallRateCurrency(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISkypeCall::GetCallRatePrecision ( _bstr_t CallId ) {
    long _result = 0;
    HRESULT _hr = get_CallRatePrecision(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeCall::GetCallInputDevice ( _bstr_t CallId, enum TCallIoDeviceType DeviceType ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallInputDevice(CallId, DeviceType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeCall::PutCallInputDevice ( _bstr_t CallId, enum TCallIoDeviceType DeviceType, _bstr_t pVal ) {
    HRESULT _hr = put_CallInputDevice(CallId, DeviceType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkypeCall::GetCallOutputDevice ( _bstr_t CallId, enum TCallIoDeviceType DeviceType ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallOutputDevice(CallId, DeviceType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeCall::PutCallOutputDevice ( _bstr_t CallId, enum TCallIoDeviceType DeviceType, _bstr_t pVal ) {
    HRESULT _hr = put_CallOutputDevice(CallId, DeviceType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkypeCall::GetCallCaptureMicDevice ( _bstr_t CallId, enum TCallIoDeviceType DeviceType ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallCaptureMicDevice(CallId, DeviceType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeCall::PutCallCaptureMicDevice ( _bstr_t CallId, enum TCallIoDeviceType DeviceType, _bstr_t pVal ) {
    HRESULT _hr = put_CallCaptureMicDevice(CallId, DeviceType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISkypeCall::GetCallInputStatus ( _bstr_t CallId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CallInputStatus(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeCall::GetCallForwardedBy ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallForwardedBy(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISkypeCall::GetCallSeenStatus ( _bstr_t CallId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CallSeenStatus(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISkypeCall::GetCallCanTransfer ( _bstr_t CallId, _bstr_t Target ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CallCanTransfer(CallId, Target, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TCallStatus ISkypeCall::GetCallTransferStatus ( _bstr_t CallId ) {
    enum TCallStatus _result;
    HRESULT _hr = get_CallTransferStatus(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISkypeCall::GetCallTransferActive ( _bstr_t CallId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CallTransferActive(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeCall::GetCallTransferredBy ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallTransferredBy(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeCall::GetCallTransferredTo ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallTransferredTo(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISkypeCall::TransferCall ( _bstr_t CallId, _bstr_t Target ) {
    HRESULT _hr = raw_TransferCall(CallId, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISkypeCall::GetCallTargetIdentity ( _bstr_t CallId ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallTargetIdentity(CallId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISkypeChatMessage wrapper method implementations
//

inline DATE ISkypeChatMessage::GetChatMessageTimestamp ( _bstr_t MessageId ) {
    DATE _result = 0;
    HRESULT _hr = get_ChatMessageTimestamp(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeChatMessage::GetChatMessageFromHandle ( _bstr_t MessageId ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatMessageFromHandle(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeChatMessage::GetChatMessageFromDisplayName ( _bstr_t MessageId ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatMessageFromDisplayName(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TChatMessageType ISkypeChatMessage::GetChatMessageType ( _bstr_t MessageId ) {
    enum TChatMessageType _result;
    HRESULT _hr = get_ChatMessageType(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TChatMessageStatus ISkypeChatMessage::GetChatMessageStatus ( _bstr_t MessageId ) {
    enum TChatMessageStatus _result;
    HRESULT _hr = get_ChatMessageStatus(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TChatLeaveReason ISkypeChatMessage::GetChatMessageLeaveReason ( _bstr_t MessageId ) {
    enum TChatLeaveReason _result;
    HRESULT _hr = get_ChatMessageLeaveReason(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeChatMessage::GetChatMessageBody ( _bstr_t MessageId ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatMessageBody(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeChatMessage::GetChatMessageChatname ( _bstr_t MessageId ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatMessageChatname(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUserCollectionPtr ISkypeChatMessage::GetChatMessageUsers ( _bstr_t MessageId ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ChatMessageUsers(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline void ISkypeChatMessage::PutChatMessageSeen ( _bstr_t _arg1 ) {
    HRESULT _hr = put_ChatMessageSeen(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUserPtr ISkypeChatMessage::GetChatMessageSender ( _bstr_t MessageId ) {
    struct IUser * _result = 0;
    HRESULT _hr = get_ChatMessageSender(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserPtr(_result, false);
}

inline VARIANT_BOOL ISkypeChatMessage::GetChatMessageIsEditable ( _bstr_t MessageId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChatMessageIsEditable(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeChatMessage::GetChatMessageEditedBy ( _bstr_t MessageId ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatMessageEditedBy(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE ISkypeChatMessage::GetChatMessageEditedTimestamp ( _bstr_t MessageId ) {
    DATE _result = 0;
    HRESULT _hr = get_ChatMessageEditedTimestamp(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkypeChatMessage::PutChatMessageBody ( _bstr_t MessageId, _bstr_t pVal ) {
    HRESULT _hr = put_ChatMessageBody(MessageId, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TChatMemberRole ISkypeChatMessage::GetChatMessageRole ( _bstr_t MessageId ) {
    enum TChatMemberRole _result;
    HRESULT _hr = get_ChatMessageRole(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISkypeChatMessage::GetChatMessageOptons ( _bstr_t MessageId ) {
    long _result = 0;
    HRESULT _hr = get_ChatMessageOptons(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeChatMessage::GetChatMessageGuid ( _bstr_t MessageId ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatMessageGuid(MessageId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISkypeConference wrapper method implementations
//

inline ICallCollectionPtr ISkypeConference::GetConferenceCalls ( _bstr_t ConfId ) {
    struct ICallCollection * _result = 0;
    HRESULT _hr = get_ConferenceCalls(ConfId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallCollectionPtr(_result, false);
}

inline ICallCollectionPtr ISkypeConference::GetConferenceActiveCalls ( _bstr_t ConfId ) {
    struct ICallCollection * _result = 0;
    HRESULT _hr = get_ConferenceActiveCalls(ConfId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallCollectionPtr(_result, false);
}

//
// interface ISkypeFileTransfer wrapper method implementations
//

inline enum TFileTransferType ISkypeFileTransfer::GetFileTransferType ( _bstr_t TransferId ) {
    enum TFileTransferType _result;
    HRESULT _hr = get_FileTransferType(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TFileTransferStatus ISkypeFileTransfer::GetFileTransferStatus ( _bstr_t TransferId ) {
    enum TFileTransferStatus _result;
    HRESULT _hr = get_FileTransferStatus(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TFileTransferFailureReason ISkypeFileTransfer::GetFileTransferFailureReason ( _bstr_t TransferId ) {
    enum TFileTransferFailureReason _result;
    HRESULT _hr = get_FileTransferFailureReason(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeFileTransfer::GetFileTransferPartnerHandle ( _bstr_t TransferId ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileTransferPartnerHandle(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeFileTransfer::GetFileTransferPartnerDisplayName ( _bstr_t TransferId ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileTransferPartnerDisplayName(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE ISkypeFileTransfer::GetFileTransferStartTime ( _bstr_t TransferId ) {
    DATE _result = 0;
    HRESULT _hr = get_FileTransferStartTime(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE ISkypeFileTransfer::GetFileTransferFinishTime ( _bstr_t TransferId ) {
    DATE _result = 0;
    HRESULT _hr = get_FileTransferFinishTime(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeFileTransfer::GetFileTransferFilePath ( _bstr_t TransferId ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileTransferFilePath(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeFileTransfer::GetFileTransferFileName ( _bstr_t TransferId ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileTransferFileName(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeFileTransfer::GetFileTransferBytesPerSecond ( _bstr_t TransferId ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileTransferBytesPerSecond(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeFileTransfer::GetFileTransferBytesTransferred ( _bstr_t TransferId ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileTransferBytesTransferred(TransferId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISkypeUser wrapper method implementations
//

inline _bstr_t ISkypeUser::GetUserFullName ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserFullName(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE ISkypeUser::GetUserBirthday ( _bstr_t Username ) {
    DATE _result = 0;
    HRESULT _hr = get_UserBirthday(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TUserSex ISkypeUser::GetUserSex ( _bstr_t Username ) {
    enum TUserSex _result;
    HRESULT _hr = get_UserSex(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeUser::GetUserCountry ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCountry(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserProvince ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserProvince(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserCity ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCity(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserPhoneHome ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserPhoneHome(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserPhoneOffice ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserPhoneOffice(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserPhoneMobile ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserPhoneMobile(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserHomepage ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserHomepage(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserAbout ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserAbout(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISkypeUser::GetUserHasCallEquipment ( _bstr_t Username ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserHasCallEquipment(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TBuddyStatus ISkypeUser::GetUserBuddyStatus ( _bstr_t Username ) {
    enum TBuddyStatus _result;
    HRESULT _hr = get_UserBuddyStatus(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkypeUser::PutUserBuddyStatus ( _bstr_t Username, enum TBuddyStatus pVal ) {
    HRESULT _hr = put_UserBuddyStatus(Username, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISkypeUser::GetUserIsAuthorized ( _bstr_t Username ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserIsAuthorized(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkypeUser::PutUserIsAuthorized ( _bstr_t Username, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UserIsAuthorized(Username, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISkypeUser::GetUserIsBlocked ( _bstr_t Username ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserIsBlocked(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkypeUser::PutUserIsBlocked ( _bstr_t Username, VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UserIsBlocked(Username, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkypeUser::GetUserDisplayName ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserDisplayName(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TOnlineStatus ISkypeUser::GetUserOnlineStatus ( _bstr_t Username ) {
    enum TOnlineStatus _result;
    HRESULT _hr = get_UserOnlineStatus(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE ISkypeUser::GetUserLastOnline ( _bstr_t Username ) {
    DATE _result = 0;
    HRESULT _hr = get_UserLastOnline(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeUser::GetUserCountryCode ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCountryCode(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserReceivedAuthRequest ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserReceivedAuthRequest(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserSpeedDial ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserSpeedDial(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeUser::PutUserSpeedDial ( _bstr_t Username, _bstr_t pVal ) {
    HRESULT _hr = put_UserSpeedDial(Username, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISkypeUser::GetUserCanLeaveVoicemail ( _bstr_t Username ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserCanLeaveVoicemail(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeUser::GetUserMoodText ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserMoodText(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserAliases ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserAliases(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISkypeUser::GetUserTimezone ( _bstr_t Username ) {
    long _result = 0;
    HRESULT _hr = get_UserTimezone(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISkypeUser::GetIsCallForwardActive ( _bstr_t Username ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCallForwardActive(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeUser::GetUserLanguage ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserLanguage(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeUser::GetUserLanguageCode ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserLanguageCode(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISkypeUser::GetUserIsVideoCapable ( _bstr_t Username ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserIsVideoCapable(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISkypeUser::GetUserNumberOfAuthBuddies ( _bstr_t Username ) {
    long _result = 0;
    HRESULT _hr = get_UserNumberOfAuthBuddies(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkypeUser::PutUserDisplayName ( _bstr_t Username, _bstr_t pVal ) {
    HRESULT _hr = put_UserDisplayName(Username, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkypeUser::GetUserRichMoodText ( _bstr_t Username ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserRichMoodText(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISkypeUser::GetUserIsVoicemailCapable ( _bstr_t Username ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UserIsVoicemailCapable(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISkypeVoicemail wrapper method implementations
//

inline enum TVoicemailType ISkypeVoicemail::GetVoicemailType ( _bstr_t VoicemailId ) {
    enum TVoicemailType _result;
    HRESULT _hr = get_VoicemailType(VoicemailId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeVoicemail::GetVoicemailPartnerHandle ( _bstr_t VoicemailId ) {
    BSTR _result = 0;
    HRESULT _hr = get_VoicemailPartnerHandle(VoicemailId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISkypeVoicemail::GetVoicemailPartnerDisplayName ( _bstr_t VoicemailId ) {
    BSTR _result = 0;
    HRESULT _hr = get_VoicemailPartnerDisplayName(VoicemailId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TVoicemailStatus ISkypeVoicemail::GetVoicemailStatus ( _bstr_t VoicemailId ) {
    enum TVoicemailStatus _result;
    HRESULT _hr = get_VoicemailStatus(VoicemailId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TVoicemailFailureReason ISkypeVoicemail::GetVoicemailFailureReason ( _bstr_t VoicemailId ) {
    enum TVoicemailFailureReason _result;
    HRESULT _hr = get_VoicemailFailureReason(VoicemailId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE ISkypeVoicemail::GetVoicemailTimestamp ( _bstr_t VoicemailId ) {
    DATE _result = 0;
    HRESULT _hr = get_VoicemailTimestamp(VoicemailId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISkypeVoicemail::GetVoicemailDuration ( _bstr_t VoicemailId ) {
    long _result = 0;
    HRESULT _hr = get_VoicemailDuration(VoicemailId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISkypeVoicemail::GetVoicemailAllowedDuration ( _bstr_t VoicemailId ) {
    long _result = 0;
    HRESULT _hr = get_VoicemailAllowedDuration(VoicemailId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISkypeVoicemail::OpenVoicemail ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_OpenVoicemail(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeVoicemail::StartVoicemailPlayback ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_StartVoicemailPlayback(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeVoicemail::StopVoicemailPlayback ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_StopVoicemailPlayback(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeVoicemail::UploadVoicemail ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_UploadVoicemail(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeVoicemail::DownloadVoicemail ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_DownloadVoicemail(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeVoicemail::StartVoicemailRecording ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_StartVoicemailRecording(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeVoicemail::StopVoicemailRecording ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_StopVoicemailRecording(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeVoicemail::DeleteVoicemail ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_DeleteVoicemail(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeVoicemail::StartVoicemailPlaybackInCall ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_StartVoicemailPlaybackInCall(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeVoicemail::SetVoicemailUnplayed ( _bstr_t VoicemailId ) {
    HRESULT _hr = raw_SetVoicemailUnplayed(VoicemailId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _ISkypeEvents wrapper method implementations
//

inline HRESULT _ISkypeEvents::Command ( struct ICommand * pCommand ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", pCommand);
    return _result;
}

inline HRESULT _ISkypeEvents::Reply ( struct ICommand * pCommand ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", pCommand);
    return _result;
}

inline HRESULT _ISkypeEvents::Error ( struct ICommand * pCommand, long Number, _bstr_t Description ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003\x0008", pCommand, Number, (BSTR)Description);
    return _result;
}

inline HRESULT _ISkypeEvents::AttachmentStatus ( enum TAttachmentStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", Status);
    return _result;
}

inline HRESULT _ISkypeEvents::ConnectionStatus ( enum TConnectionStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", Status);
    return _result;
}

inline HRESULT _ISkypeEvents::UserStatus ( enum TUserStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", Status);
    return _result;
}

inline HRESULT _ISkypeEvents::OnlineStatus ( struct IUser * pUser, enum TOnlineStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pUser, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::CallStatus ( struct ICall * pCall, enum TCallStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pCall, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::CallHistory ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

inline HRESULT _ISkypeEvents::Mute ( VARIANT_BOOL Mute ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x000b", Mute);
    return _result;
}

inline HRESULT _ISkypeEvents::MessageStatus ( struct IChatMessage * pMessage, enum TChatMessageStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pMessage, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::MessageHistory ( _bstr_t Username ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)Username);
    return _result;
}

inline HRESULT _ISkypeEvents::AutoAway ( VARIANT_BOOL Automatic ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x000b", Automatic);
    return _result;
}

inline HRESULT _ISkypeEvents::CallDtmfReceived ( struct ICall * pCall, _bstr_t code ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0008", pCall, (BSTR)code);
    return _result;
}

inline HRESULT _ISkypeEvents::VoicemailStatus ( struct IVoicemail * pMail, enum TVoicemailStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pMail, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::ApplicationConnecting ( struct IApplication * pApp, struct IUserCollection * pUsers ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", pApp, pUsers);
    return _result;
}

inline HRESULT _ISkypeEvents::ApplicationStreams ( struct IApplication * pApp, struct IApplicationStreamCollection * pStreams ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", pApp, pStreams);
    return _result;
}

inline HRESULT _ISkypeEvents::ApplicationDatagram ( struct IApplication * pApp, struct IApplicationStream * pStream, _bstr_t Text ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009\x0008", pApp, pStream, (BSTR)Text);
    return _result;
}

inline HRESULT _ISkypeEvents::ApplicationSending ( struct IApplication * pApp, struct IApplicationStreamCollection * pStreams ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x13, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", pApp, pStreams);
    return _result;
}

inline HRESULT _ISkypeEvents::ApplicationReceiving ( struct IApplication * pApp, struct IApplicationStreamCollection * pStreams ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", pApp, pStreams);
    return _result;
}

inline HRESULT _ISkypeEvents::ContactsFocused ( _bstr_t Username ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)Username);
    return _result;
}

inline HRESULT _ISkypeEvents::GroupVisible ( struct IGroup * pGroup, VARIANT_BOOL Visible ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000b", pGroup, Visible);
    return _result;
}

inline HRESULT _ISkypeEvents::GroupExpanded ( struct IGroup * pGroup, VARIANT_BOOL Expanded ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000b", pGroup, Expanded);
    return _result;
}

inline HRESULT _ISkypeEvents::GroupUsers ( struct IGroup * pGroup, struct IUserCollection * pUsers ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x18, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", pGroup, pUsers);
    return _result;
}

inline HRESULT _ISkypeEvents::GroupDeleted ( long GroupId ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003", GroupId);
    return _result;
}

inline HRESULT _ISkypeEvents::UserMood ( struct IUser * pUser, _bstr_t MoodText ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1a, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0008", pUser, (BSTR)MoodText);
    return _result;
}

inline HRESULT _ISkypeEvents::SmsMessageStatusChanged ( struct ISmsMessage * pMessage, enum TSmsMessageStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1b, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pMessage, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::SmsTargetStatusChanged ( struct ISmsTarget * pTarget, enum TSmsTargetStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1c, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pTarget, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::CallInputStatusChanged ( struct ICall * pCall, VARIANT_BOOL Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1d, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000b", pCall, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::AsyncSearchUsersFinished ( long Cookie, struct IUserCollection * pUsers ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1e, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0003\x0009", Cookie, pUsers);
    return _result;
}

inline HRESULT _ISkypeEvents::CallSeenStatusChanged ( struct ICall * pCall, VARIANT_BOOL Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1f, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x000b", pCall, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::PluginEventClicked ( struct IPluginEvent * pEvent ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x20, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", pEvent);
    return _result;
}

inline HRESULT _ISkypeEvents::PluginMenuItemClicked ( struct IPluginMenuItem * pMenuItem, struct IUserCollection * pUsers, enum TPluginContext PluginContext, _bstr_t ContextId ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x21, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009\x0003\x0008", pMenuItem, pUsers, PluginContext, (BSTR)ContextId);
    return _result;
}

inline HRESULT _ISkypeEvents::WallpaperChanged ( _bstr_t Path ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x22, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)Path);
    return _result;
}

inline HRESULT _ISkypeEvents::FileTransferStatusChanged ( struct IFileTransfer * pTransfer, enum TFileTransferStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x23, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pTransfer, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::CallTransferStatusChanged ( struct ICall * pCall, enum TCallStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x24, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pCall, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::ChatMembersChanged ( struct IChat * pChat, struct IUserCollection * pMembers ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x25, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", pChat, pMembers);
    return _result;
}

inline HRESULT _ISkypeEvents::ChatMemberRoleChanged ( struct IChatMember * pMember, enum TChatMemberRole Role ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x26, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pMember, Role);
    return _result;
}

inline HRESULT _ISkypeEvents::CallVideoStatusChanged ( struct ICall * pCall, enum TCallVideoStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x27, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pCall, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::CallVideoSendStatusChanged ( struct ICall * pCall, enum TCallVideoSendStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x28, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pCall, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::CallVideoReceiveStatusChanged ( struct ICall * pCall, enum TCallVideoSendStatus Status ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x29, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0003", pCall, Status);
    return _result;
}

inline HRESULT _ISkypeEvents::SilentModeStatusChanged ( VARIANT_BOOL Silent ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x2a, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x000b", Silent);
    return _result;
}

inline HRESULT _ISkypeEvents::UILanguageChanged ( _bstr_t code ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x2b, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)code);
    return _result;
}

inline HRESULT _ISkypeEvents::UserAuthorizationRequestReceived ( struct IUser * pUser ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x2c, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009", pUser);
    return _result;
}

//
// dispinterface _ICallChannelManagerEvents wrapper method implementations
//

inline HRESULT _ICallChannelManagerEvents::Channels ( struct ICallChannelManager * pManager, struct ICallChannelCollection * pChannels ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009", pManager, pChannels);
    return _result;
}

inline HRESULT _ICallChannelManagerEvents::Message ( struct ICallChannelManager * pManager, struct ICallChannel * pChannel, struct ICallChannelMessage * pMessage ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0009\x0009\x0009", pManager, pChannel, pMessage);
    return _result;
}

inline HRESULT _ICallChannelManagerEvents::Created ( ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, NULL);
    return _result;
}

//
// interface ISkypePlugin wrapper method implementations
//

inline IPluginEventPtr ISkypePlugin::CreatePluginEvent ( _bstr_t EventId, _bstr_t Caption, _bstr_t Hint ) {
    struct IPluginEvent * _result = 0;
    HRESULT _hr = raw_CreatePluginEvent(EventId, Caption, Hint, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPluginEventPtr(_result, false);
}

inline HRESULT ISkypePlugin::DeletePluginEvent ( _bstr_t EventId ) {
    HRESULT _hr = raw_DeletePluginEvent(EventId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IPluginMenuItemPtr ISkypePlugin::CreatePluginMenuItem ( _bstr_t MenuItemId, enum TPluginContext PluginContext, _bstr_t CaptionText, _bstr_t HintText, _bstr_t IconPath, VARIANT_BOOL Enabled, enum TPluginContactType ContactType, VARIANT_BOOL MultipleContacts ) {
    struct IPluginMenuItem * _result = 0;
    HRESULT _hr = raw_CreatePluginMenuItem(MenuItemId, PluginContext, CaptionText, HintText, IconPath, Enabled, ContactType, MultipleContacts, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPluginMenuItemPtr(_result, false);
}

inline HRESULT ISkypePlugin::DeletePluginMenuItem ( _bstr_t MenuItemId ) {
    HRESULT _hr = raw_DeletePluginMenuItem(MenuItemId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void ISkypePlugin::PutPluginMenuItemCaption ( _bstr_t MenuItemId, _bstr_t _arg2 ) {
    HRESULT _hr = put_PluginMenuItemCaption(MenuItemId, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void ISkypePlugin::PutPluginMenuItemHint ( _bstr_t MenuItemId, _bstr_t _arg2 ) {
    HRESULT _hr = put_PluginMenuItemHint(MenuItemId, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISkypePlugin::EnablePluginMenuItem ( _bstr_t MenuItemId, VARIANT_BOOL Enabled ) {
    HRESULT _hr = raw_EnablePluginMenuItem(MenuItemId, Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICallChannel wrapper method implementations
//

inline enum TCallChannelType ICallChannel::GetType ( ) {
    enum TCallChannelType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICallChannel::PutType ( enum TCallChannelType pVal ) {
    HRESULT _hr = put_Type(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ICallChannel::SendTextMessage ( _bstr_t Text ) {
    HRESULT _hr = raw_SendTextMessage(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IApplicationStreamPtr ICallChannel::GetStream ( ) {
    struct IApplicationStream * _result = 0;
    HRESULT _hr = get_Stream(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationStreamPtr(_result, false);
}

inline ICallChannelManagerPtr ICallChannel::GetManager ( ) {
    struct ICallChannelManager * _result = 0;
    HRESULT _hr = get_Manager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallChannelManagerPtr(_result, false);
}

inline ICallPtr ICallChannel::GetCall ( ) {
    struct ICall * _result = 0;
    HRESULT _hr = get_Call(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallPtr(_result, false);
}

//
// interface ICallChannelCollection wrapper method implementations
//

inline long ICallChannelCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICallChannelCollection::Add ( struct ICallChannel * pChannel ) {
    HRESULT _hr = raw_Add(pChannel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICallChannelCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICallChannelCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ICallChannelPtr ICallChannelCollection::GetItem ( long Index ) {
    struct ICallChannel * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallChannelPtr(_result, false);
}

inline IUnknownPtr ICallChannelCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICallChannelManager wrapper method implementations
//

inline HRESULT ICallChannelManager::Connect ( struct ISkype * pSkype ) {
    HRESULT _hr = raw_Connect(pSkype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICallChannelManager::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ICallChannelCollectionPtr ICallChannelManager::GetChannels ( ) {
    struct ICallChannelCollection * _result = 0;
    HRESULT _hr = get_Channels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallChannelCollectionPtr(_result, false);
}

inline enum TCallChannelType ICallChannelManager::GetChannelType ( ) {
    enum TCallChannelType _result;
    HRESULT _hr = get_ChannelType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICallChannelManager::PutChannelType ( enum TCallChannelType pVal ) {
    HRESULT _hr = put_ChannelType(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ICallChannelManager::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICallChannelManager::PutName ( _bstr_t pVal ) {
    HRESULT _hr = put_Name(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ICallChannelManager::CreateApplication ( _bstr_t ApplicationName ) {
    HRESULT _hr = raw_CreateApplication(ApplicationName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL ICallChannelManager::GetCreated ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Created(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISkype wrapper method implementations
//

inline long ISkype::GetTimeout ( ) {
    long _result = 0;
    HRESULT _hr = get_Timeout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkype::PutTimeout ( long pVal ) {
    HRESULT _hr = put_Timeout(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkype::GetProperty ( _bstr_t ObjectType, _bstr_t ObjectId, _bstr_t PropName ) {
    BSTR _result = 0;
    HRESULT _hr = get_Property(ObjectType, ObjectId, PropName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkype::PutProperty ( _bstr_t ObjectType, _bstr_t ObjectId, _bstr_t PropName, _bstr_t pVal ) {
    HRESULT _hr = put_Property(ObjectType, ObjectId, PropName, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkype::GetVariable ( _bstr_t Name ) {
    BSTR _result = 0;
    HRESULT _hr = get_Variable(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkype::PutVariable ( _bstr_t Name, _bstr_t pVal ) {
    HRESULT _hr = put_Variable(Name, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkype::GetCurrentUserHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CurrentUserHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TUserStatus ISkype::GetCurrentUserStatus ( ) {
    enum TUserStatus _result;
    HRESULT _hr = get_CurrentUserStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkype::PutCurrentUserStatus ( enum TUserStatus pVal ) {
    HRESULT _hr = put_CurrentUserStatus(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TConnectionStatus ISkype::GetConnectionStatus ( ) {
    enum TConnectionStatus _result;
    HRESULT _hr = get_ConnectionStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISkype::GetMute ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Mute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkype::PutMute ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Mute(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkype::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISkype::GetPrivilege ( _bstr_t Name ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Privilege(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUserPtr ISkype::GetCurrentUser ( ) {
    struct IUser * _result = 0;
    HRESULT _hr = get_CurrentUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserPtr(_result, false);
}

inline IConversionPtr ISkype::GetConvert ( ) {
    struct IConversion * _result = 0;
    HRESULT _hr = get_Convert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConversionPtr(_result, false);
}

inline IUserCollectionPtr ISkype::GetFriends ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_Friends(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline IUserCollectionPtr ISkype::SearchForUsers ( _bstr_t Target ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = raw_SearchForUsers(Target, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline ICallCollectionPtr ISkype::GetCalls ( _bstr_t Target ) {
    struct ICallCollection * _result = 0;
    HRESULT _hr = get_Calls(Target, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallCollectionPtr(_result, false);
}

inline ICallCollectionPtr ISkype::GetActiveCalls ( ) {
    struct ICallCollection * _result = 0;
    HRESULT _hr = get_ActiveCalls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallCollectionPtr(_result, false);
}

inline ICallCollectionPtr ISkype::GetMissedCalls ( ) {
    struct ICallCollection * _result = 0;
    HRESULT _hr = get_MissedCalls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallCollectionPtr(_result, false);
}

inline IChatMessageCollectionPtr ISkype::GetMessages ( _bstr_t Target ) {
    struct IChatMessageCollection * _result = 0;
    HRESULT _hr = get_Messages(Target, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessageCollectionPtr(_result, false);
}

inline IChatMessageCollectionPtr ISkype::GetMissedMessages ( ) {
    struct IChatMessageCollection * _result = 0;
    HRESULT _hr = get_MissedMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessageCollectionPtr(_result, false);
}

inline enum TAttachmentStatus ISkype::GetAttachmentStatus ( ) {
    enum TAttachmentStatus _result;
    HRESULT _hr = get_AttachmentStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISkype::GetProtocol ( ) {
    long _result = 0;
    HRESULT _hr = get_Protocol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkype::PutProtocol ( long pVal ) {
    HRESULT _hr = put_Protocol(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISkype::Attach ( long Protocol, VARIANT_BOOL Wait ) {
    HRESULT _hr = raw_Attach(Protocol, Wait);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ICallPtr ISkype::PlaceCall ( _bstr_t Target, _bstr_t Target2, _bstr_t Target3, _bstr_t Target4 ) {
    struct ICall * _result = 0;
    HRESULT _hr = raw_PlaceCall(Target, Target2, Target3, Target4, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallPtr(_result, false);
}

inline IChatMessagePtr ISkype::SendMessage ( _bstr_t Username, _bstr_t Text ) {
    struct IChatMessage * _result = 0;
    HRESULT _hr = raw_SendMessage(Username, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessagePtr(_result, false);
}

inline IUserPtr ISkype::GetUser ( _bstr_t Username ) {
    struct IUser * _result = 0;
    HRESULT _hr = get_User(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserPtr(_result, false);
}

inline IChatMessagePtr ISkype::GetMessage ( long Id ) {
    struct IChatMessage * _result = 0;
    HRESULT _hr = get_Message(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessagePtr(_result, false);
}

inline ICallPtr ISkype::GetCall ( long Id ) {
    struct ICall * _result = 0;
    HRESULT _hr = get_Call(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICallPtr(_result, false);
}

inline HRESULT ISkype::SendCommand ( struct ICommand * pCommand ) {
    HRESULT _hr = raw_SendCommand(pCommand);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IChatCollectionPtr ISkype::GetChats ( ) {
    struct IChatCollection * _result = 0;
    HRESULT _hr = get_Chats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatCollectionPtr(_result, false);
}

inline IChatPtr ISkype::GetChat ( _bstr_t Name ) {
    struct IChat * _result = 0;
    HRESULT _hr = get_Chat(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatPtr(_result, false);
}

inline HRESULT ISkype::ChangeUserStatus ( enum TUserStatus newVal ) {
    HRESULT _hr = raw_ChangeUserStatus(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IConferencePtr ISkype::GetConference ( long Id ) {
    struct IConference * _result = 0;
    HRESULT _hr = get_Conference(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConferencePtr(_result, false);
}

inline IConferenceCollectionPtr ISkype::GetConferences ( ) {
    struct IConferenceCollection * _result = 0;
    HRESULT _hr = get_Conferences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IConferenceCollectionPtr(_result, false);
}

inline _bstr_t ISkype::GetProfile ( _bstr_t Property ) {
    BSTR _result = 0;
    HRESULT _hr = get_Profile(Property, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkype::PutProfile ( _bstr_t Property, _bstr_t pVal ) {
    HRESULT _hr = put_Profile(Property, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IChatCollectionPtr ISkype::GetActiveChats ( ) {
    struct IChatCollection * _result = 0;
    HRESULT _hr = get_ActiveChats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatCollectionPtr(_result, false);
}

inline IChatCollectionPtr ISkype::GetMissedChats ( ) {
    struct IChatCollection * _result = 0;
    HRESULT _hr = get_MissedChats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatCollectionPtr(_result, false);
}

inline IChatCollectionPtr ISkype::GetRecentChats ( ) {
    struct IChatCollection * _result = 0;
    HRESULT _hr = get_RecentChats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatCollectionPtr(_result, false);
}

inline IChatCollectionPtr ISkype::GetBookmarkedChats ( ) {
    struct IChatCollection * _result = 0;
    HRESULT _hr = get_BookmarkedChats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatCollectionPtr(_result, false);
}

inline IChatPtr ISkype::CreateChatWith ( _bstr_t Username ) {
    struct IChat * _result = 0;
    HRESULT _hr = raw_CreateChatWith(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatPtr(_result, false);
}

inline IChatPtr ISkype::CreateChatMultiple ( struct IUserCollection * pMembers ) {
    struct IChat * _result = 0;
    HRESULT _hr = raw_CreateChatMultiple(pMembers, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatPtr(_result, false);
}

inline IVoicemailCollectionPtr ISkype::GetVoicemails ( ) {
    struct IVoicemailCollection * _result = 0;
    HRESULT _hr = get_Voicemails(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVoicemailCollectionPtr(_result, false);
}

inline IVoicemailPtr ISkype::SendVoicemail ( _bstr_t Username ) {
    struct IVoicemail * _result = 0;
    HRESULT _hr = raw_SendVoicemail(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVoicemailPtr(_result, false);
}

inline IUserCollectionPtr ISkype::GetUsersWaitingAuthorization ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_UsersWaitingAuthorization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline HRESULT ISkype::ClearChatHistory ( ) {
    HRESULT _hr = raw_ClearChatHistory();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkype::ClearVoicemailHistory ( ) {
    HRESULT _hr = raw_ClearVoicemailHistory();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkype::ClearCallHistory ( _bstr_t Username, enum TCallHistory Type ) {
    HRESULT _hr = raw_ClearCallHistory(Username, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL ISkype::GetCommandId ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CommandId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkype::PutCommandId ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_CommandId(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IApplicationPtr ISkype::GetApplication ( _bstr_t Name ) {
    struct IApplication * _result = 0;
    HRESULT _hr = get_Application(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationPtr(_result, false);
}

inline IVoicemailPtr ISkype::GetGreeting ( _bstr_t Username ) {
    struct IVoicemail * _result = 0;
    HRESULT _hr = get_Greeting(Username, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVoicemailPtr(_result, false);
}

inline VARIANT_BOOL ISkype::GetCache ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Cache(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkype::PutCache ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Cache(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISkype::ResetCache ( ) {
    HRESULT _hr = raw_ResetCache();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IProfilePtr ISkype::GetCurrentUserProfile ( ) {
    struct IProfile * _result = 0;
    HRESULT _hr = get_CurrentUserProfile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IProfilePtr(_result, false);
}

inline IGroupCollectionPtr ISkype::GetGroups ( ) {
    struct IGroupCollection * _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupCollectionPtr(_result, false);
}

inline IGroupCollectionPtr ISkype::GetCustomGroups ( ) {
    struct IGroupCollection * _result = 0;
    HRESULT _hr = get_CustomGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupCollectionPtr(_result, false);
}

inline IGroupCollectionPtr ISkype::GetHardwiredGroups ( ) {
    struct IGroupCollection * _result = 0;
    HRESULT _hr = get_HardwiredGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupCollectionPtr(_result, false);
}

inline IGroupPtr ISkype::CreateGroup ( _bstr_t GroupName ) {
    struct IGroup * _result = 0;
    HRESULT _hr = raw_CreateGroup(GroupName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupPtr(_result, false);
}

inline HRESULT ISkype::DeleteGroup ( long GroupId ) {
    HRESULT _hr = raw_DeleteGroup(GroupId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISettingsPtr ISkype::GetSettings ( ) {
    struct ISettings * _result = 0;
    HRESULT _hr = get_Settings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISettingsPtr(_result, false);
}

inline IClientPtr ISkype::GetClient ( ) {
    struct IClient * _result = 0;
    HRESULT _hr = get_Client(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IClientPtr(_result, false);
}

inline void ISkype::PutFriendlyName ( _bstr_t _arg1 ) {
    HRESULT _hr = put_FriendlyName(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ICommandPtr ISkype::GetCommand ( long Id, _bstr_t Command, _bstr_t Reply, VARIANT_BOOL Block, long Timeout ) {
    struct ICommand * _result = 0;
    HRESULT _hr = get_Command(Id, Command, Reply, Block, Timeout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICommandPtr(_result, false);
}

inline IVoicemailPtr ISkype::GetVoicemail ( long Id ) {
    struct IVoicemail * _result = 0;
    HRESULT _hr = get_Voicemail(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVoicemailPtr(_result, false);
}

inline IVoicemailCollectionPtr ISkype::GetMissedVoicemails ( ) {
    struct IVoicemailCollection * _result = 0;
    HRESULT _hr = get_MissedVoicemails(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IVoicemailCollectionPtr(_result, false);
}

inline HRESULT ISkype::EnableApiSecurityContext ( enum TApiSecurityContext Context ) {
    HRESULT _hr = raw_EnableApiSecurityContext(Context);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL ISkype::GetApiSecurityContextEnabled ( enum TApiSecurityContext Context ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApiSecurityContextEnabled(Context, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline ISmsMessagePtr ISkype::CreateSms ( enum TSmsMessageType MessageType, _bstr_t TargetNumbers ) {
    struct ISmsMessage * _result = 0;
    HRESULT _hr = raw_CreateSms(MessageType, TargetNumbers, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsMessagePtr(_result, false);
}

inline ISmsMessageCollectionPtr ISkype::GetSmss ( ) {
    struct ISmsMessageCollection * _result = 0;
    HRESULT _hr = get_Smss(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsMessageCollectionPtr(_result, false);
}

inline ISmsMessageCollectionPtr ISkype::GetMissedSmss ( ) {
    struct ISmsMessageCollection * _result = 0;
    HRESULT _hr = get_MissedSmss(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsMessageCollectionPtr(_result, false);
}

inline ISmsMessagePtr ISkype::SendSms ( _bstr_t TargetNumbers, _bstr_t MessageText, _bstr_t ReplyToNumber ) {
    struct ISmsMessage * _result = 0;
    HRESULT _hr = raw_SendSms(TargetNumbers, MessageText, ReplyToNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsMessagePtr(_result, false);
}

inline long ISkype::AsyncSearchUsers ( _bstr_t Target ) {
    long _result = 0;
    HRESULT _hr = raw_AsyncSearchUsers(Target, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkype::GetApiWrapperVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApiWrapperVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL ISkype::GetSilentMode ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SilentMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkype::PutSilentMode ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_SilentMode(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IFileTransferCollectionPtr ISkype::GetFileTransfers ( ) {
    struct IFileTransferCollection * _result = 0;
    HRESULT _hr = get_FileTransfers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFileTransferCollectionPtr(_result, false);
}

inline IFileTransferCollectionPtr ISkype::GetActiveFileTransfers ( ) {
    struct IFileTransferCollection * _result = 0;
    HRESULT _hr = get_ActiveFileTransfers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFileTransferCollectionPtr(_result, false);
}

inline IUserCollectionPtr ISkype::GetFocusedContacts ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_FocusedContacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline IChatPtr ISkype::FindChatUsingBlob ( _bstr_t Blob ) {
    struct IChat * _result = 0;
    HRESULT _hr = raw_FindChatUsingBlob(Blob, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatPtr(_result, false);
}

inline IChatPtr ISkype::CreateChatUsingBlob ( _bstr_t Blob ) {
    struct IChat * _result = 0;
    HRESULT _hr = raw_CreateChatUsingBlob(Blob, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatPtr(_result, false);
}

inline _bstr_t ISkype::GetPredictiveDialerCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PredictiveDialerCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IChatMessageCollection wrapper method implementations
//

inline long IChatMessageCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IChatMessageCollection::Add ( struct IChatMessage * pItem ) {
    HRESULT _hr = raw_Add(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChatMessageCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChatMessageCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IChatMessagePtr IChatMessageCollection::GetItem ( long Index ) {
    struct IChatMessage * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessagePtr(_result, false);
}

inline IUnknownPtr IChatMessageCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IChatMessage wrapper method implementations
//

inline long IChatMessage::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE IChatMessage::GetTimestamp ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Timestamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IChatMessage::GetFromHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FromHandle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IChatMessage::GetFromDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FromDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TChatMessageType IChatMessage::GetType ( ) {
    enum TChatMessageType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TChatMessageStatus IChatMessage::GetStatus ( ) {
    enum TChatMessageStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TChatLeaveReason IChatMessage::GetLeaveReason ( ) {
    enum TChatLeaveReason _result;
    HRESULT _hr = get_LeaveReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IChatMessage::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IChatMessage::GetChatName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IUserCollectionPtr IChatMessage::GetUsers ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_Users(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline void IChatMessage::PutSeen ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_Seen(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IChatPtr IChatMessage::GetChat ( ) {
    struct IChat * _result = 0;
    HRESULT _hr = get_Chat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatPtr(_result, false);
}

inline IUserPtr IChatMessage::GetSender ( ) {
    struct IUser * _result = 0;
    HRESULT _hr = get_Sender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserPtr(_result, false);
}

inline _bstr_t IChatMessage::GetEditedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EditedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IChatMessage::GetEditedTimestamp ( ) {
    DATE _result = 0;
    HRESULT _hr = get_EditedTimestamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChatMessage::PutBody ( _bstr_t pVal ) {
    HRESULT _hr = put_Body(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TChatMemberRole IChatMessage::GetRole ( ) {
    enum TChatMemberRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IChatMessage::GetOptions ( ) {
    long _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IChatMessage::GetIsEditable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsEditable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IChatMessage::GetGuid ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Guid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IChat wrapper method implementations
//

inline _bstr_t IChat::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IChatMessageCollectionPtr IChat::GetMessages ( ) {
    struct IChatMessageCollection * _result = 0;
    HRESULT _hr = get_Messages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessageCollectionPtr(_result, false);
}

inline DATE IChat::GetTimestamp ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Timestamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUserPtr IChat::GetAdder ( ) {
    struct IUser * _result = 0;
    HRESULT _hr = get_Adder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserPtr(_result, false);
}

inline enum TChatStatus IChat::GetStatus ( ) {
    enum TChatStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUserCollectionPtr IChat::GetPosters ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_Posters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline IUserCollectionPtr IChat::GetMembers ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline _bstr_t IChat::GetTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Topic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IChat::PutTopic ( _bstr_t pVal ) {
    HRESULT _hr = put_Topic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUserCollectionPtr IChat::GetActiveMembers ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ActiveMembers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline _bstr_t IChat::GetFriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FriendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IChat::OpenWindow ( ) {
    HRESULT _hr = raw_OpenWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IChatMessagePtr IChat::SendMessage ( _bstr_t MessageText ) {
    struct IChatMessage * _result = 0;
    HRESULT _hr = raw_SendMessage(MessageText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessagePtr(_result, false);
}

inline HRESULT IChat::Leave ( ) {
    HRESULT _hr = raw_Leave();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChat::AddMembers ( struct IUserCollection * pMembers ) {
    HRESULT _hr = raw_AddMembers(pMembers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IChatMessageCollectionPtr IChat::GetRecentMessages ( ) {
    struct IChatMessageCollection * _result = 0;
    HRESULT _hr = get_RecentMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessageCollectionPtr(_result, false);
}

inline VARIANT_BOOL IChat::GetBookmarked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Bookmarked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IChat::Bookmark ( ) {
    HRESULT _hr = raw_Bookmark();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChat::Unbookmark ( ) {
    HRESULT _hr = raw_Unbookmark();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IChat::GetTopicXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TopicXML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IChat::PutTopicXML ( _bstr_t pVal ) {
    HRESULT _hr = put_TopicXML(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IChatMemberCollectionPtr IChat::GetMemberObjects ( ) {
    struct IChatMemberCollection * _result = 0;
    HRESULT _hr = get_MemberObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMemberCollectionPtr(_result, false);
}

inline _bstr_t IChat::GetBlob ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Blob(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IChat::GetOptions ( ) {
    long _result = 0;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChat::PutOptions ( long pVal ) {
    HRESULT _hr = put_Options(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IChat::GetPasswordHint ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PasswordHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IChat::SetPassword ( _bstr_t Password, _bstr_t Hint ) {
    HRESULT _hr = raw_SetPassword(Password, Hint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IChat::GetGuideLines ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GuideLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IChat::PutGuideLines ( _bstr_t pVal ) {
    HRESULT _hr = put_GuideLines(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IChat::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IChat::PutDescription ( _bstr_t pVal ) {
    HRESULT _hr = put_Description(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IChat::GetDialogPartner ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DialogPartner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE IChat::GetActivityTimestamp ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ActivityTimestamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TChatMemberRole IChat::GetMyRole ( ) {
    enum TChatMemberRole _result;
    HRESULT _hr = get_MyRole(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUserCollectionPtr IChat::GetApplicants ( ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_Applicants(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline HRESULT IChat::Join ( ) {
    HRESULT _hr = raw_Join();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChat::Kick ( _bstr_t Handle ) {
    HRESULT _hr = raw_Kick(Handle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChat::KickBan ( _bstr_t Handle ) {
    HRESULT _hr = raw_KickBan(Handle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChat::Disband ( ) {
    HRESULT _hr = raw_Disband();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChat::EnterPassword ( _bstr_t Password ) {
    HRESULT _hr = raw_EnterPassword(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChat::ClearRecentMessages ( ) {
    HRESULT _hr = raw_ClearRecentMessages();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChat::AcceptAdd ( ) {
    HRESULT _hr = raw_AcceptAdd();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void IChat::PutAlertString ( _bstr_t _arg1 ) {
    HRESULT _hr = put_AlertString(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TChatType IChat::GetType ( ) {
    enum TChatType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TChatMyStatus IChat::GetMyStatus ( ) {
    enum TChatMyStatus _result;
    HRESULT _hr = get_MyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IChatMember wrapper method implementations
//

inline _bstr_t IChatMember::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IChatMember::GetHandle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Handle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TChatMemberRole IChatMember::GetRole ( ) {
    enum TChatMemberRole _result;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IChatMember::PutRole ( enum TChatMemberRole pVal ) {
    HRESULT _hr = put_Role(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IChatMember::GetCanSetRoleTo ( enum TChatMemberRole Role ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanSetRoleTo(Role, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IChatMember::GetIsActive ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsActive(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IChatPtr IChatMember::GetChat ( ) {
    struct IChat * _result = 0;
    HRESULT _hr = get_Chat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatPtr(_result, false);
}

//
// interface IChatMemberCollection wrapper method implementations
//

inline long IChatMemberCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IChatMemberPtr IChatMemberCollection::GetItem ( long Index ) {
    struct IChatMember * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMemberPtr(_result, false);
}

inline IUnknownPtr IChatMemberCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IChatCollection wrapper method implementations
//

inline long IChatCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IChatCollection::Add ( struct IChat * pItem ) {
    HRESULT _hr = raw_Add(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChatCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IChatCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IChatPtr IChatCollection::GetItem ( long Index ) {
    struct IChat * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatPtr(_result, false);
}

inline IUnknownPtr IChatCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISkypeChat wrapper method implementations
//

inline DATE ISkypeChat::GetChatTimestamp ( _bstr_t ChatName ) {
    DATE _result = 0;
    HRESULT _hr = get_ChatTimestamp(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUserPtr ISkypeChat::GetChatAdder ( _bstr_t ChatName ) {
    struct IUser * _result = 0;
    HRESULT _hr = get_ChatAdder(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserPtr(_result, false);
}

inline enum TChatStatus ISkypeChat::GetChatStatus ( _bstr_t ChatName ) {
    enum TChatStatus _result;
    HRESULT _hr = get_ChatStatus(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUserCollectionPtr ISkypeChat::GetChatPosters ( _bstr_t ChatName ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ChatPosters(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline IUserCollectionPtr ISkypeChat::GetChatMembers ( _bstr_t ChatName ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ChatMembers(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline _bstr_t ISkypeChat::GetChatTopic ( _bstr_t ChatName ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatTopic(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeChat::PutChatTopic ( _bstr_t ChatName, _bstr_t pVal ) {
    HRESULT _hr = put_ChatTopic(ChatName, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IUserCollectionPtr ISkypeChat::GetChatActiveMembers ( _bstr_t ChatName ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ChatActiveMembers(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline _bstr_t ISkypeChat::GetChatFriendlyName ( _bstr_t ChatName ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatFriendlyName(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IChatMessageCollectionPtr ISkypeChat::GetChatMessages ( _bstr_t ChatName ) {
    struct IChatMessageCollection * _result = 0;
    HRESULT _hr = get_ChatMessages(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessageCollectionPtr(_result, false);
}

inline HRESULT ISkypeChat::OpenChatWindow ( _bstr_t ChatName ) {
    HRESULT _hr = raw_OpenChatWindow(ChatName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IChatMessagePtr ISkypeChat::SendChatMessage ( _bstr_t ChatName, _bstr_t MessageText ) {
    struct IChatMessage * _result = 0;
    HRESULT _hr = raw_SendChatMessage(ChatName, MessageText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessagePtr(_result, false);
}

inline HRESULT ISkypeChat::LeaveChat ( _bstr_t ChatName ) {
    HRESULT _hr = raw_LeaveChat(ChatName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeChat::AddChatMembers ( _bstr_t ChatName, struct IUserCollection * pMembers ) {
    HRESULT _hr = raw_AddChatMembers(ChatName, pMembers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IChatMessageCollectionPtr ISkypeChat::GetChatRecentMessages ( _bstr_t ChatName ) {
    struct IChatMessageCollection * _result = 0;
    HRESULT _hr = get_ChatRecentMessages(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMessageCollectionPtr(_result, false);
}

inline VARIANT_BOOL ISkypeChat::GetChatBookmarked ( _bstr_t ChatName ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ChatBookmarked(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISkypeChat::BookmarkChat ( _bstr_t ChatName ) {
    HRESULT _hr = raw_BookmarkChat(ChatName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeChat::UnbookmarkChat ( _bstr_t ChatName ) {
    HRESULT _hr = raw_UnbookmarkChat(ChatName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISkypeChat::GetChatTopicXML ( _bstr_t ChatName ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatTopicXML(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeChat::PutChatTopicXML ( _bstr_t ChatName, _bstr_t pVal ) {
    HRESULT _hr = put_ChatTopicXML(ChatName, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IChatMemberCollectionPtr ISkypeChat::GetChatMemberObjects ( _bstr_t ChatName ) {
    struct IChatMemberCollection * _result = 0;
    HRESULT _hr = get_ChatMemberObjects(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatMemberCollectionPtr(_result, false);
}

inline _bstr_t ISkypeChat::GetChatBlob ( _bstr_t ChatName ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatBlob(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISkypeChat::GetChatOptions ( _bstr_t ChatName ) {
    long _result = 0;
    HRESULT _hr = get_ChatOptions(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkypeChat::PutChatOptions ( _bstr_t ChatName, long pVal ) {
    HRESULT _hr = put_ChatOptions(ChatName, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkypeChat::GetChatPasswordHint ( _bstr_t ChatName ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatPasswordHint(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISkypeChat::SetChatPassword ( _bstr_t ChatName, _bstr_t Password, _bstr_t Hint ) {
    HRESULT _hr = raw_SetChatPassword(ChatName, Password, Hint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISkypeChat::GetChatGuideLines ( _bstr_t ChatName ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatGuideLines(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeChat::PutChatGuideLines ( _bstr_t ChatName, _bstr_t pVal ) {
    HRESULT _hr = put_ChatGuideLines(ChatName, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkypeChat::GetChatDescription ( _bstr_t ChatName ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatDescription(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeChat::PutChatDescription ( _bstr_t ChatName, _bstr_t pVal ) {
    HRESULT _hr = put_ChatDescription(ChatName, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISkypeChat::GetChatDialogPartner ( _bstr_t ChatName ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatDialogPartner(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline DATE ISkypeChat::GetChatActivityTimestamp ( _bstr_t ChatName ) {
    DATE _result = 0;
    HRESULT _hr = get_ChatActivityTimestamp(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TChatMemberRole ISkypeChat::GetChatMyRole ( _bstr_t ChatName ) {
    enum TChatMemberRole _result;
    HRESULT _hr = get_ChatMyRole(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUserCollectionPtr ISkypeChat::GetChatApplicants ( _bstr_t ChatName ) {
    struct IUserCollection * _result = 0;
    HRESULT _hr = get_ChatApplicants(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUserCollectionPtr(_result, false);
}

inline HRESULT ISkypeChat::JoinChat ( _bstr_t ChatName ) {
    HRESULT _hr = raw_JoinChat(ChatName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeChat::KickChatMember ( _bstr_t ChatName, _bstr_t Handle ) {
    HRESULT _hr = raw_KickChatMember(ChatName, Handle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeChat::KickBanChatMember ( _bstr_t ChatName, _bstr_t Handle ) {
    HRESULT _hr = raw_KickBanChatMember(ChatName, Handle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeChat::DisbandChat ( _bstr_t ChatName ) {
    HRESULT _hr = raw_DisbandChat(ChatName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeChat::EnterChatPassword ( _bstr_t ChatName, _bstr_t Password ) {
    HRESULT _hr = raw_EnterChatPassword(ChatName, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeChat::ClearChatRecentMessages ( _bstr_t ChatName ) {
    HRESULT _hr = raw_ClearChatRecentMessages(ChatName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeChat::AcceptSharedGroupAdd ( _bstr_t ChatName ) {
    HRESULT _hr = raw_AcceptSharedGroupAdd(ChatName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void ISkypeChat::PutChatAlertString ( _bstr_t ChatName, _bstr_t _arg2 ) {
    HRESULT _hr = put_ChatAlertString(ChatName, _arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum TChatType ISkypeChat::GetChatType ( _bstr_t ChatName ) {
    enum TChatType _result;
    HRESULT _hr = get_ChatType(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TChatMyStatus ISkypeChat::GetChatMyStatus ( _bstr_t ChatName ) {
    enum TChatMyStatus _result;
    HRESULT _hr = get_ChatMyStatus(ChatName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ISkypeChatMember wrapper method implementations
//

inline _bstr_t ISkypeChatMember::GetChatMemberHandle ( _bstr_t MemberId ) {
    BSTR _result = 0;
    HRESULT _hr = get_ChatMemberHandle(MemberId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum TChatMemberRole ISkypeChatMember::GetChatMemberRole ( _bstr_t MemberId ) {
    enum TChatMemberRole _result;
    HRESULT _hr = get_ChatMemberRole(MemberId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkypeChatMember::PutChatMemberRole ( _bstr_t MemberId, enum TChatMemberRole pVal ) {
    HRESULT _hr = put_ChatMemberRole(MemberId, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISkypeChatMember::GetCanSetChatMemberRoleTo ( _bstr_t MemberId, enum TChatMemberRole Role ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanSetChatMemberRoleTo(MemberId, Role, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISkypeChatMember::GetIsChatMemberActive ( _bstr_t MemberId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsChatMemberActive(MemberId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IChatPtr ISkypeChatMember::GetChatMemberChat ( _bstr_t MemberId ) {
    struct IChat * _result = 0;
    HRESULT _hr = get_ChatMemberChat(MemberId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IChatPtr(_result, false);
}

//
// interface ISmsMessage wrapper method implementations
//

inline long ISmsMessage::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TSmsMessageType ISmsMessage::GetType ( ) {
    enum TSmsMessageType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TSmsMessageStatus ISmsMessage::GetStatus ( ) {
    enum TSmsMessageStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TSmsFailureReason ISmsMessage::GetFailureReason ( ) {
    enum TSmsFailureReason _result;
    HRESULT _hr = get_FailureReason(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISmsMessage::GetIsFailedUnseen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFailedUnseen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmsMessage::PutSeen ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_Seen(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmsMessage::GetPrice ( ) {
    long _result = 0;
    HRESULT _hr = get_Price(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmsMessage::GetPricePrecision ( ) {
    long _result = 0;
    HRESULT _hr = get_PricePrecision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISmsMessage::GetPriceCurrency ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PriceCurrency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmsMessage::GetReplyToNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReplyToNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmsMessage::PutReplyToNumber ( _bstr_t pVal ) {
    HRESULT _hr = put_ReplyToNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISmsTargetCollectionPtr ISmsMessage::GetTargets ( ) {
    struct ISmsTargetCollection * _result = 0;
    HRESULT _hr = get_Targets(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsTargetCollectionPtr(_result, false);
}

inline _bstr_t ISmsMessage::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmsMessage::PutBody ( _bstr_t pVal ) {
    HRESULT _hr = put_Body(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISmsChunkCollectionPtr ISmsMessage::GetChunks ( ) {
    struct ISmsChunkCollection * _result = 0;
    HRESULT _hr = get_Chunks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsChunkCollectionPtr(_result, false);
}

inline DATE ISmsMessage::GetTimestamp ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Timestamp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISmsMessage::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmsMessage::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISmsMessage::GetTargetNumbers ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TargetNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmsMessage::PutTargetNumbers ( _bstr_t pVal ) {
    HRESULT _hr = put_TargetNumbers(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISmsTarget wrapper method implementations
//

inline enum TSmsTargetStatus ISmsTarget::GetStatus ( ) {
    enum TSmsTargetStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISmsTarget::GetNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ISmsMessagePtr ISmsTarget::GetMessage ( ) {
    struct ISmsMessage * _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsMessagePtr(_result, false);
}

//
// interface ISmsTargetCollection wrapper method implementations
//

inline long ISmsTargetCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISmsTargetCollection::Add ( struct ISmsTarget * pItem ) {
    HRESULT _hr = raw_Add(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmsTargetCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmsTargetCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISmsTargetPtr ISmsTargetCollection::GetItem ( long Index ) {
    struct ISmsTarget * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsTargetPtr(_result, false);
}

inline IUnknownPtr ISmsTargetCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISmsChunk wrapper method implementations
//

inline long ISmsChunk::GetId ( ) {
    long _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long ISmsChunk::GetCharactersLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_CharactersLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISmsChunk::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline ISmsMessagePtr ISmsChunk::GetMessage ( ) {
    struct ISmsMessage * _result = 0;
    HRESULT _hr = get_Message(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsMessagePtr(_result, false);
}

//
// interface ISmsChunkCollection wrapper method implementations
//

inline long ISmsChunkCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISmsChunkCollection::Add ( struct ISmsChunk * pItem ) {
    HRESULT _hr = raw_Add(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmsChunkCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmsChunkCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISmsChunkPtr ISmsChunkCollection::GetItem ( long Index ) {
    struct ISmsChunk * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsChunkPtr(_result, false);
}

inline IUnknownPtr ISmsChunkCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISmsMessageCollection wrapper method implementations
//

inline long ISmsMessageCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISmsMessageCollection::Add ( struct ISmsMessage * pItem ) {
    HRESULT _hr = raw_Add(pItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmsMessageCollection::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmsMessageCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline ISmsMessagePtr ISmsMessageCollection::GetItem ( long Index ) {
    struct ISmsMessage * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsMessagePtr(_result, false);
}

inline IUnknownPtr ISmsMessageCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ISkypeSms wrapper method implementations
//

inline enum TSmsMessageType ISkypeSms::GetSmsMessageType ( _bstr_t SmsId ) {
    enum TSmsMessageType _result;
    HRESULT _hr = get_SmsMessageType(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TSmsMessageStatus ISkypeSms::GetSmsMessageStatus ( _bstr_t SmsId ) {
    enum TSmsMessageStatus _result;
    HRESULT _hr = get_SmsMessageStatus(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum TSmsFailureReason ISkypeSms::GetSmsFailureReason ( _bstr_t SmsId ) {
    enum TSmsFailureReason _result;
    HRESULT _hr = get_SmsFailureReason(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL ISkypeSms::GetSmsIsFailedUnseen ( _bstr_t SmsId ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SmsIsFailedUnseen(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISkypeSms::PutSmsSeen ( _bstr_t _arg1 ) {
    HRESULT _hr = put_SmsSeen(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISkypeSms::GetSmsPrice ( _bstr_t SmsId ) {
    long _result = 0;
    HRESULT _hr = get_SmsPrice(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeSms::GetSmsPriceCurrency ( _bstr_t SmsId ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmsPriceCurrency(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISkypeSms::GetSmsPricePrecision ( _bstr_t SmsId ) {
    long _result = 0;
    HRESULT _hr = get_SmsPricePrecision(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeSms::GetSmsReplyToNumber ( _bstr_t SmsId ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmsReplyToNumber(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeSms::PutSmsReplyToNumber ( _bstr_t SmsId, _bstr_t pVal ) {
    HRESULT _hr = put_SmsReplyToNumber(SmsId, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISmsTargetCollectionPtr ISkypeSms::GetSmsTargets ( _bstr_t SmsId ) {
    struct ISmsTargetCollection * _result = 0;
    HRESULT _hr = get_SmsTargets(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsTargetCollectionPtr(_result, false);
}

inline _bstr_t ISkypeSms::GetSmsBody ( _bstr_t SmsId ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmsBody(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeSms::PutSmsBody ( _bstr_t SmsId, _bstr_t pVal ) {
    HRESULT _hr = put_SmsBody(SmsId, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline ISmsChunkCollectionPtr ISkypeSms::GetSmsChunks ( _bstr_t SmsId ) {
    struct ISmsChunkCollection * _result = 0;
    HRESULT _hr = get_SmsChunks(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISmsChunkCollectionPtr(_result, false);
}

inline HRESULT ISkypeSms::SendSmsMessage ( _bstr_t SmsId ) {
    HRESULT _hr = raw_SendSmsMessage(SmsId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISkypeSms::DeleteSmsMessage ( _bstr_t SmsId ) {
    HRESULT _hr = raw_DeleteSmsMessage(SmsId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum TSmsTargetStatus ISkypeSms::GetSmsTargetStatus ( _bstr_t SmsId, _bstr_t Number ) {
    enum TSmsTargetStatus _result;
    HRESULT _hr = get_SmsTargetStatus(SmsId, Number, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeSms::GetSmsChunkText ( _bstr_t SmsId, _bstr_t ChunkId ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmsChunkText(SmsId, ChunkId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISkypeSms::GetSmsChunkCharactersLeft ( _bstr_t SmsId, _bstr_t ChunkId ) {
    long _result = 0;
    HRESULT _hr = get_SmsChunkCharactersLeft(SmsId, ChunkId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline DATE ISkypeSms::GetSmsTimestamp ( _bstr_t SmsId ) {
    DATE _result = 0;
    HRESULT _hr = get_SmsTimestamp(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISkypeSms::GetSmsTargetNumbers ( _bstr_t SmsId ) {
    BSTR _result = 0;
    HRESULT _hr = get_SmsTargetNumbers(SmsId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISkypeSms::PutSmsTargetNumbers ( _bstr_t SmsId, _bstr_t pVal ) {
    HRESULT _hr = put_SmsTargetNumbers(SmsId, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
