
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000094e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000094e  000009e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800062  00800062  000009e4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000009e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022b  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e01  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f6  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a1d  00000000  00000000  00001f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00002988  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004df  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000537  00000000  00000000  00002f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  0000343e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	48 c0       	rjmp	.+144    	; 0x92 <__ctors_end>
   2:	30 c3       	rjmp	.+1632   	; 0x664 <__vector_1>
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
   6:	60 c0       	rjmp	.+192    	; 0xc8 <__bad_interrupt>
   8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
   a:	5e c0       	rjmp	.+188    	; 0xc8 <__bad_interrupt>
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
   e:	5c c0       	rjmp	.+184    	; 0xc8 <__bad_interrupt>
  10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
  12:	5a c0       	rjmp	.+180    	; 0xc8 <__bad_interrupt>
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
  16:	58 c0       	rjmp	.+176    	; 0xc8 <__bad_interrupt>
  18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
  1a:	56 c0       	rjmp	.+172    	; 0xc8 <__bad_interrupt>
  1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>

0000001e <usbDescriptorHidReport>:
  1e:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 95 04     .........&..u...
  2e:	09 00 b2 02 01 c0                                   ......

00000034 <usbDescriptorString0>:
  34:	04 03 09 04                                         ....

00000038 <usbDescriptorStringVendor>:
  38:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  48:	74 00                                               t.

0000004a <usbDescriptorStringDevice>:
  4a:	14 03 4c 00 45 00 44 00 43 00 74 00 6c 00 48 00     ..L.E.D.C.t.l.H.
  5a:	49 00 44 00                                         I.D.

0000005e <usbDescriptorDevice>:
  5e:	12 01 10 01 00 00 00 08 c0 16 df 05 00 01 01 02     ................
  6e:	00 01                                               ..

00000070 <usbDescriptorConfiguration>:
  70:	09 02 22 00 01 01 00 80 fa 09 04 00 00 01 03 00     ..".............
  80:	00 00 09 21 01 01 00 01 22 16 00 07 05 81 03 08     ...!....".......
  90:	00 64                                               .d

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf e5       	ldi	r28, 0x5F	; 95
  98:	d2 e0       	ldi	r29, 0x02	; 2
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	a0 e6       	ldi	r26, 0x60	; 96
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	ee e4       	ldi	r30, 0x4E	; 78
  a6:	f9 e0       	ldi	r31, 0x09	; 9
  a8:	02 c0       	rjmp	.+4      	; 0xae <.do_copy_data_start>

000000aa <.do_copy_data_loop>:
  aa:	05 90       	lpm	r0, Z+
  ac:	0d 92       	st	X+, r0

000000ae <.do_copy_data_start>:
  ae:	a2 36       	cpi	r26, 0x62	; 98
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <.do_copy_data_loop>

000000b4 <__do_clear_bss>:
  b4:	10 e0       	ldi	r17, 0x00	; 0
  b6:	a2 e6       	ldi	r26, 0x62	; 98
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a2 3a       	cpi	r26, 0xA2	; 162
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	a8 d0       	rcall	.+336    	; 0x216 <main>
  c6:	41 c4       	rjmp	.+2178   	; 0x94a <_exit>

000000c8 <__bad_interrupt>:
  c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <usbFunctionRead>:
unsigned int   i;//таймер сброса ножак 1,3,4,5 
/* usbFunctionRead() вызывается когда хост запрашивает порцию данных от устройства
 * Для дополнительной информации см. документацию в usbdrv.h
 */
uchar   usbFunctionRead(uchar *data, uchar len)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	ec 01       	movw	r28, r24
    if(len > bytesRemaining)
  d0:	50 91 67 00 	lds	r21, 0x0067
  d4:	56 17       	cp	r21, r22
  d6:	08 f4       	brcc	.+2      	; 0xda <usbFunctionRead+0x10>
  d8:	65 2f       	mov	r22, r21
        len = bytesRemaining;

    uchar *buffer = (uchar*)&pdata;  //Указатель на структуру

    if(!currentAddress)        // Ни один кусок данных еще не прочитан.
  da:	40 91 66 00 	lds	r20, 0x0066
  de:	44 23       	and	r20, r20
  e0:	e9 f4       	brne	.+58     	; 0x11c <usbFunctionRead+0x52>
    {                          // Заполним структуру для передачи
        if ( PINB & _BV(1) )   //Запись сосояние 1 ножки в структуру
  e2:	b1 9b       	sbis	0x16, 1	; 22
  e4:	04 c0       	rjmp	.+8      	; 0xee <usbFunctionRead+0x24>
            pdata.b1 = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 62 00 	sts	0x0062, r24
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <usbFunctionRead+0x28>
        else
            pdata.b1 = 0;
  ee:	10 92 62 00 	sts	0x0062, r1


        if ( PINB & _BV(3) )   //Запись сосояние ножки 3 в структуру
  f2:	b3 9b       	sbis	0x16, 3	; 22
  f4:	04 c0       	rjmp	.+8      	; 0xfe <usbFunctionRead+0x34>
            pdata.b2 = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 63 00 	sts	0x0063, r24
  fc:	02 c0       	rjmp	.+4      	; 0x102 <usbFunctionRead+0x38>
        else
            pdata.b2 = 0;
  fe:	10 92 63 00 	sts	0x0063, r1


        if ( PINB & _BV(4) )    //Запись сосояние ножки 4 в структуру
 102:	b4 9b       	sbis	0x16, 4	; 22
 104:	04 c0       	rjmp	.+8      	; 0x10e <usbFunctionRead+0x44>
            pdata.b3 = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 64 00 	sts	0x0064, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <usbFunctionRead+0x48>
        else
            pdata.b3 = 0;
 10e:	10 92 64 00 	sts	0x0064, r1

        if ( PINB & _BV(5) )    //Запись сосояние ножки 5 в структуру(По умалчанию ножка 5 придназначена для сброса прошывки(RESET) для перехода ножки в режым записи\чтения в fuse нада установить  . После прошывки ф'юзав изменить прошывку можно тока высоковольтным програматором 
 112:	b5 9b       	sbis	0x16, 5	; 22
 114:	0a c0       	rjmp	.+20     	; 0x12a <usbFunctionRead+0x60>
            pdata.b4 = 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 65 00 	sts	0x0065, r24
 11c:	a4 2f       	mov	r26, r20
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	ae 59       	subi	r26, 0x9E	; 158
 122:	bf 4f       	sbci	r27, 0xFF	; 255
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	0a c0       	rjmp	.+20     	; 0x13e <usbFunctionRead+0x74>
        else
            pdata.b4 = 0;
 12a:	10 92 65 00 	sts	0x0065, r1
 12e:	f6 cf       	rjmp	.-20     	; 0x11c <usbFunctionRead+0x52>
    }

    uchar j;
    for(j=0; j<len; j++)
        data[j] = buffer[j+currentAddress];
 130:	fe 01       	movw	r30, r28
 132:	e2 0f       	add	r30, r18
 134:	f3 1f       	adc	r31, r19
 136:	8d 91       	ld	r24, X+
 138:	80 83       	st	Z, r24
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
        else
            pdata.b4 = 0;
    }

    uchar j;
    for(j=0; j<len; j++)
 13e:	26 17       	cp	r18, r22
 140:	b8 f3       	brcs	.-18     	; 0x130 <usbFunctionRead+0x66>
        data[j] = buffer[j+currentAddress];

    currentAddress += len;
 142:	46 0f       	add	r20, r22
 144:	40 93 66 00 	sts	0x0066, r20
    bytesRemaining -= len;
 148:	56 1b       	sub	r21, r22
 14a:	50 93 67 00 	sts	0x0067, r21
    return len;
}
 14e:	86 2f       	mov	r24, r22
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <usbFunctionWrite>:

/* usbFunctionWrite() вызывается когда хост отправляет порцию данных к устройству
 * Для дополнительной информации см. документацию в usbdrv.h
 */
uchar   usbFunctionWrite(uchar *data, uchar len)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
    if(bytesRemaining == 0)
 15c:	50 91 67 00 	lds	r21, 0x0067
 160:	55 23       	and	r21, r21
 162:	09 f4       	brne	.+2      	; 0x166 <usbFunctionWrite+0x10>
 164:	41 c0       	rjmp	.+130    	; 0x1e8 <usbFunctionWrite+0x92>
 166:	56 17       	cp	r21, r22
 168:	08 f4       	brcc	.+2      	; 0x16c <usbFunctionWrite+0x16>
 16a:	65 2f       	mov	r22, r21

    uchar *buffer = (uchar*)&pdata;
    
    uchar j;
    for(j=0; j<len; j++)
        buffer[j+currentAddress] = data[j];
 16c:	40 91 66 00 	lds	r20, 0x0066
 170:	a4 2f       	mov	r26, r20
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	ae 59       	subi	r26, 0x9E	; 158
 176:	bf 4f       	sbci	r27, 0xFF	; 255
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	07 c0       	rjmp	.+14     	; 0x18c <usbFunctionWrite+0x36>
        len = bytesRemaining;

    uchar *buffer = (uchar*)&pdata;
    
    uchar j;
    for(j=0; j<len; j++)
 17e:	fe 01       	movw	r30, r28
 180:	e2 0f       	add	r30, r18
 182:	f3 1f       	adc	r31, r19
 184:	80 81       	ld	r24, Z
 186:	8d 93       	st	X+, r24
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	3f 4f       	sbci	r19, 0xFF	; 255
 18c:	26 17       	cp	r18, r22
 18e:	b8 f3       	brcs	.-18     	; 0x17e <usbFunctionWrite+0x28>
        buffer[j+currentAddress] = data[j];

    currentAddress += len;
 190:	46 0f       	add	r20, r22
 192:	40 93 66 00 	sts	0x0066, r20
    bytesRemaining -= len;
 196:	56 1b       	sub	r21, r22
 198:	65 2f       	mov	r22, r21
 19a:	50 93 67 00 	sts	0x0067, r21

    if(bytesRemaining == 0)     // Все данные получены
 19e:	55 23       	and	r21, r21
 1a0:	e1 f4       	brne	.+56     	; 0x1da <usbFunctionWrite+0x84>
    {                           // Выставим значения на PORTB
        if ( pdata.b1 )         //Запись сосояние ножки 1 из структуры
 1a2:	80 91 62 00 	lds	r24, 0x0062
 1a6:	88 23       	and	r24, r24
 1a8:	11 f0       	breq	.+4      	; 0x1ae <usbFunctionWrite+0x58>
            PORTB |= _BV(1);
 1aa:	c1 9a       	sbi	0x18, 1	; 24
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <usbFunctionWrite+0x5a>
        else
            PORTB &= ~_BV(1);
 1ae:	c1 98       	cbi	0x18, 1	; 24


        if ( pdata.b2 )         //Запись сосояние ножки 3 из структуры
 1b0:	80 91 63 00 	lds	r24, 0x0063
 1b4:	88 23       	and	r24, r24
 1b6:	11 f0       	breq	.+4      	; 0x1bc <usbFunctionWrite+0x66>
            PORTB |= _BV(3);
 1b8:	c3 9a       	sbi	0x18, 3	; 24
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <usbFunctionWrite+0x68>
        else
            PORTB &= ~_BV(3);
 1bc:	c3 98       	cbi	0x18, 3	; 24


        if ( pdata.b3 )         //Запись сосояние ножки 4 из структуры
 1be:	80 91 64 00 	lds	r24, 0x0064
 1c2:	88 23       	and	r24, r24
 1c4:	11 f0       	breq	.+4      	; 0x1ca <usbFunctionWrite+0x74>
            PORTB |= _BV(4);
 1c6:	c4 9a       	sbi	0x18, 4	; 24
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <usbFunctionWrite+0x76>
        else
            PORTB &= ~_BV(4);
 1ca:	c4 98       	cbi	0x18, 4	; 24

        if ( pdata.b4 )         //Запись сосояние ножки 5 из структуры
 1cc:	80 91 65 00 	lds	r24, 0x0065
 1d0:	88 23       	and	r24, r24
 1d2:	11 f0       	breq	.+4      	; 0x1d8 <usbFunctionWrite+0x82>
            PORTB |= _BV(5);
 1d4:	c5 9a       	sbi	0x18, 5	; 24
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <usbFunctionWrite+0x84>
        else
            PORTB &= ~_BV(5);
 1d8:	c5 98       	cbi	0x18, 5	; 24
    }
    i=0;                        //обнулить таймер 
 1da:	10 92 6b 00 	sts	0x006B, r1
 1de:	10 92 6a 00 	sts	0x006A, r1
    return bytesRemaining == 0; /* 0 означает, что есть еще данные */  //если bytesRemaining!=0 то return 0, если bytesRemaining==0 то return 1
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	66 23       	and	r22, r22
 1e6:	09 f4       	brne	.+2      	; 0x1ea <usbFunctionWrite+0x94>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
 1f0:	fc 01       	movw	r30, r24

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID устройство */
 1f2:	80 81       	ld	r24, Z
 1f4:	80 76       	andi	r24, 0x60	; 96
 1f6:	80 32       	cpi	r24, 0x20	; 32
 1f8:	61 f4       	brne	.+24     	; 0x212 <usbFunctionSetup+0x22>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 1fa:	81 81       	ldd	r24, Z+1	; 0x01
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	11 f0       	breq	.+4      	; 0x204 <usbFunctionSetup+0x14>
            // у нас только одна разновидность репорта, можем игнорировать report-ID
            bytesRemaining = sizeof(struct dataexchange_t);
            currentAddress = 0;
            return USB_NO_MSG;  // используем usbFunctionRead() для отправки данных хосту ?
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
 200:	89 30       	cpi	r24, 0x09	; 9
 202:	39 f4       	brne	.+14     	; 0x212 <usbFunctionSetup+0x22>
            // у нас только одна разновидность репорта, можем игнорировать report-ID
            bytesRemaining = sizeof(struct dataexchange_t);
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	80 93 67 00 	sts	0x0067, r24
            currentAddress = 0;
 20a:	10 92 66 00 	sts	0x0066, r1
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	08 95       	ret
            return USB_NO_MSG;  // используем usbFunctionWrite() для получения данных от хоста ?
 212:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* остальные запросы мы просто игнорируем */
    }
    return 0;
}
 214:	08 95       	ret

00000216 <main>:


/* ------------------------------------------------------------------------- */

int main(void)
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
DDRB = 0b111010;     //Установка ножек 1,3,4,5 на запись, ножки 0,2 в чтение
 21a:	8a e3       	ldi	r24, 0x3A	; 58
 21c:	87 bb       	out	0x17, r24	; 23
   uchar   calibrationValue;

   calibrationValue = eeprom_read_byte(0); /* calibration value from last time */
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	7d d3       	rcall	.+1786   	; 0x91e <__eerd_byte_tn85>
   if(calibrationValue != 0xff)
 224:	8f 3f       	cpi	r24, 0xFF	; 255
 226:	09 f0       	breq	.+2      	; 0x22a <main+0x14>
   {
      OSCCAL = calibrationValue;
 228:	81 bf       	out	0x31, r24	; 49
   }
   wdt_enable(WDTO_1S);                   //включаем сторожевой таймер со сбросом через 1 секунду
 22a:	2e e0       	ldi	r18, 0x0E	; 14
 22c:	88 e1       	ldi	r24, 0x18	; 24
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	a8 95       	wdr
 236:	81 bd       	out	0x21, r24	; 33
 238:	0f be       	out	0x3f, r0	; 63
 23a:	21 bd       	out	0x21, r18	; 33
   /* Даже если Вы не используете сторожевой таймер (watchdog), выключите его здесь. На более новых 
    *  микроконтроллерах состояние watchdog (вкл\выкл, период) СОХРАНЯЕТСЯ ЧЕРЕЗ СБРОС!
    */
   usbInit();
 23c:	7d d0       	rcall	.+250    	; 0x338 <usbInit>
   usbDeviceDisconnect();    /* принудительно запускаем ре-энумерацию, делайте это, когда прерывания запрещены! */
 23e:	b8 9a       	sbi	0x17, 0	; 23
 240:	24 e1       	ldi	r18, 0x14	; 20
 242:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 244:	42 e2       	ldi	r20, 0x22	; 34
 246:	51 ea       	ldi	r21, 0xA1	; 161
 248:	04 c0       	rjmp	.+8      	; 0x252 <main+0x3c>
   i = 20;
   while(--i)
   {                         /* иммитируем USB дисконнект на время > 200 мс */
      wdt_reset();           
 24a:	a8 95       	wdr
 24c:	ca 01       	movw	r24, r20
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <main+0x38>
 252:	21 50       	subi	r18, 0x01	; 1
 254:	30 40       	sbci	r19, 0x00	; 0
    *  микроконтроллерах состояние watchdog (вкл\выкл, период) СОХРАНЯЕТСЯ ЧЕРЕЗ СБРОС!
    */
   usbInit();
   usbDeviceDisconnect();    /* принудительно запускаем ре-энумерацию, делайте это, когда прерывания запрещены! */
   i = 20;
   while(--i)
 256:	c9 f7       	brne	.-14     	; 0x24a <main+0x34>
 258:	10 92 6b 00 	sts	0x006B, r1
 25c:	10 92 6a 00 	sts	0x006A, r1
   {                         /* иммитируем USB дисконнект на время > 200 мс */
      wdt_reset();           
      _delay_ms(10);         //делает задержку на указаное количество милисекунд.
   }
   usbDeviceConnect();      //Подключить устройсво
 260:	b8 98       	cbi	0x17, 0	; 23
   sei();                   //включает все прерывания. Ее обязательно надо вызвать, чтобы они начали работать.
 262:	78 94       	sei
   i=0;
 264:	10 92 6b 00 	sts	0x006B, r1
 268:	10 92 6a 00 	sts	0x006A, r1
 26c:	c2 e2       	ldi	r28, 0x22	; 34
 26e:	d1 ea       	ldi	r29, 0xA1	; 161
   for(;;){                /* цикл событий main */
      wdt_reset();         //сброс сторожевого таймера
 270:	a8 95       	wdr
      usbPoll();           //вызываєт функыи usbFunctionWrite, usbFunctionRead /* необходимо вызывать не реже чем 50 ms — сообщает хосту, что наше устройство на шине USB ещё живое и ждет своего часа готово к работе */
 272:	90 d0       	rcall	.+288    	; 0x394 <usbPoll>
	  i++;
 274:	80 91 6a 00 	lds	r24, 0x006A
 278:	90 91 6b 00 	lds	r25, 0x006B
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	90 93 6b 00 	sts	0x006B, r25
 282:	80 93 6a 00 	sts	0x006A, r24
 286:	fe 01       	movw	r30, r28
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <__stack+0x29>
	  _delay_ms(10);       
	  if(i==200)           //сброс 1,3,4,5 ножки в 0 через 2сек
 28c:	88 3c       	cpi	r24, 0xC8	; 200
 28e:	91 05       	cpc	r25, r1
 290:	79 f7       	brne	.-34     	; 0x270 <__stack+0x11>
	    {
		   PORTB &= ~_BV(1);
 292:	c1 98       	cbi	0x18, 1	; 24
		   PORTB &= ~_BV(3);
 294:	c3 98       	cbi	0x18, 3	; 24
		   PORTB &= ~_BV(4);
 296:	c4 98       	cbi	0x18, 4	; 24
		   PORTB &= ~_BV(5);
 298:	c5 98       	cbi	0x18, 5	; 24
 29a:	ea cf       	rjmp	.-44     	; 0x270 <__stack+0x11>

0000029c <usbEventResetReady>:
ATTiny25, ATTiny45, ATTiny85), it may be useful to search for the optimum in
both regions.
*/

void    usbEventResetReady(void)
{
 29c:	df 92       	push	r13
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	00 e0       	ldi	r16, 0x00	; 0
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	d8 2e       	mov	r13, r24
 2b0:	ee 24       	eor	r14, r14
 2b2:	ff 24       	eor	r15, r15
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
 2b4:	1d 2d       	mov	r17, r13
 2b6:	10 0f       	add	r17, r16
 2b8:	11 bf       	out	0x31, r17	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
 2ba:	c1 d1       	rcall	.+898    	; 0x63e <usbMeasureFrameLength>
 2bc:	ec 01       	movw	r28, r24
        if(x < targetValue)             /* frequency still too low */
 2be:	89 e0       	ldi	r24, 0x09	; 9
 2c0:	c4 33       	cpi	r28, 0x34	; 52
 2c2:	d8 07       	cpc	r29, r24
 2c4:	0c f0       	brlt	.+2      	; 0x2c8 <usbEventResetReady+0x2c>
 2c6:	10 2f       	mov	r17, r16
            trialValue += step;
        step >>= 1;
 2c8:	d6 94       	lsr	r13
 2ca:	08 94       	sec
 2cc:	e1 1c       	adc	r14, r1
 2ce:	f1 1c       	adc	r15, r1
    }while(step > 0);
 2d0:	88 e0       	ldi	r24, 0x08	; 8
 2d2:	e8 16       	cp	r14, r24
 2d4:	f1 04       	cpc	r15, r1
 2d6:	11 f0       	breq	.+4      	; 0x2dc <usbEventResetReady+0x40>
 2d8:	01 2f       	mov	r16, r17
 2da:	ec cf       	rjmp	.-40     	; 0x2b4 <usbEventResetReady+0x18>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 2dc:	11 50       	subi	r17, 0x01	; 1
 2de:	11 bf       	out	0x31, r17	; 49
 2e0:	1f 5f       	subi	r17, 0xFF	; 255
 2e2:	e1 2e       	mov	r14, r17
 2e4:	ff 24       	eor	r15, r15
 2e6:	08 94       	sec
 2e8:	e1 1c       	adc	r14, r1
 2ea:	f1 1c       	adc	r15, r1
 2ec:	13 c0       	rjmp	.+38     	; 0x314 <usbEventResetReady+0x78>
        x = usbMeasureFrameLength() - targetValue;
 2ee:	a7 d1       	rcall	.+846    	; 0x63e <usbMeasureFrameLength>
 2f0:	9c 01       	movw	r18, r24
 2f2:	24 53       	subi	r18, 0x34	; 52
 2f4:	39 40       	sbci	r19, 0x09	; 9
 2f6:	37 ff       	sbrs	r19, 7
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <usbEventResetReady+0x64>
 2fa:	30 95       	com	r19
 2fc:	21 95       	neg	r18
 2fe:	3f 4f       	sbci	r19, 0xFF	; 255
        if(x < 0)
            x = -x;
        if(x < optimumDev){
 300:	2c 17       	cp	r18, r28
 302:	3d 07       	cpc	r19, r29
 304:	14 f0       	brlt	.+4      	; 0x30a <usbEventResetReady+0x6e>
 306:	9e 01       	movw	r18, r28
 308:	01 c0       	rjmp	.+2      	; 0x30c <usbEventResetReady+0x70>
            optimumDev = x;
            optimumValue = OSCCAL;
 30a:	11 b7       	in	r17, 0x31	; 49
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 30c:	81 b7       	in	r24, 0x31	; 49
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	81 bf       	out	0x31, r24	; 49
 312:	e9 01       	movw	r28, r18
 314:	81 b7       	in	r24, 0x31	; 49
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	e8 16       	cp	r14, r24
 31a:	f9 06       	cpc	r15, r25
 31c:	44 f7       	brge	.-48     	; 0x2ee <usbEventResetReady+0x52>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
 31e:	11 bf       	out	0x31, r17	; 49
*/

void    usbEventResetReady(void)
{
    calibrateOscillator();
    eeprom_write_byte(0, OSCCAL);   /* store the calibrated value in EEPROM */
 320:	61 b7       	in	r22, 0x31	; 49
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	03 d3       	rcall	.+1542   	; 0x92e <__eewr_byte_tn85>
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	df 90       	pop	r13
 336:	08 95       	ret

00000338 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 338:	85 b7       	in	r24, 0x35	; 53
 33a:	83 60       	ori	r24, 0x03	; 3
 33c:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 33e:	8b b7       	in	r24, 0x3b	; 59
 340:	80 64       	ori	r24, 0x40	; 64
 342:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* сброс переключения данных для конечной точки прерывания */
 344:	8b e4       	ldi	r24, 0x4B	; 75
 346:	80 93 78 00 	sts	0x0078, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    usbTxLen1 = USBPID_NAK;
 34a:	8a e5       	ldi	r24, 0x5A	; 90
 34c:	80 93 77 00 	sts	0x0077, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 350:	08 95       	ret

00000352 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len должна включать байт синхронизации (sync byte) */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 352:	1f 93       	push	r17
 354:	dc 01       	movw	r26, r24
 356:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* буфер пакета был пуст */
 358:	80 91 77 00 	lds	r24, 0x0077
 35c:	84 ff       	sbrs	r24, 4
 35e:	07 c0       	rjmp	.+14     	; 0x36e <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* переключение токена */
 360:	80 91 78 00 	lds	r24, 0x0078
 364:	98 e8       	ldi	r25, 0x88	; 136
 366:	89 27       	eor	r24, r25
 368:	80 93 78 00 	sts	0x0078, r24
 36c:	03 c0       	rjmp	.+6      	; 0x374 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* избегаем отправки неактуальных (перезаписанных) данных прерывания */
 36e:	8a e5       	ldi	r24, 0x5A	; 90
 370:	80 93 77 00 	sts	0x0077, r24
 374:	91 2f       	mov	r25, r17
 376:	e9 e7       	ldi	r30, 0x79	; 121
 378:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* если len == 0, мы все равно копируем 1 байт, но это не проблема */
        *p++ = *data++;
 37a:	8d 91       	ld	r24, X+
 37c:	81 93       	st	Z+, r24
    }while(--i > 0);            /* управление циклом в конце составляет на 2 байта короче, чем в начале */
 37e:	91 50       	subi	r25, 0x01	; 1
 380:	e1 f7       	brne	.-8      	; 0x37a <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 382:	89 e7       	ldi	r24, 0x79	; 121
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	61 2f       	mov	r22, r17
 388:	56 d1       	rcall	.+684    	; 0x636 <usbCrc16Append>
    txStatus->len = len + 4;    /* len должна включать байт синхронизации (sync byte) */
 38a:	1c 5f       	subi	r17, 0xFC	; 252
 38c:	10 93 77 00 	sts	0x0077, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 390:	1f 91       	pop	r17
 392:	08 95       	ret

00000394 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 39a:	60 91 88 00 	lds	r22, 0x0088
 39e:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 3a0:	67 fd       	sbrc	r22, 7
 3a2:	bd c0       	rjmp	.+378    	; 0x51e <usbPoll+0x18a>
 *  необходима проверка целостности данных в этом драйвере, проверяйте CRC в коде Вашего
 *  приложения и сообщайте об ошибках обратно хосту. Поскольку ACK отсылается по-любому,
 *  повторы при ошибках должны быть обработаны на уровне приложения.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 3a4:	80 91 85 00 	lds	r24, 0x0085
 3a8:	cc e0       	ldi	r28, 0x0C	; 12
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	c8 1b       	sub	r28, r24
 3ae:	d1 09       	sbc	r29, r1
 3b0:	c4 57       	subi	r28, 0x74	; 116
 3b2:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT для конечной точки != 0: номер конечной точки находится в usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 3b4:	80 91 84 00 	lds	r24, 0x0084
 3b8:	8d 32       	cpi	r24, 0x2D	; 45
 3ba:	09 f0       	breq	.+2      	; 0x3be <usbPoll+0x2a>
 3bc:	9e c0       	rjmp	.+316    	; 0x4fa <usbPoll+0x166>
        if(len != 8)    /* Размер setup должен быть всегда 8 байт. Иначе игнорируется. */
 3be:	68 30       	cpi	r22, 0x08	; 8
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <usbPoll+0x30>
 3c2:	ab c0       	rjmp	.+342    	; 0x51a <usbPoll+0x186>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* иницализируем переключение данных */
 3c4:	83 ec       	ldi	r24, 0xC3	; 195
 3c6:	80 93 6c 00 	sts	0x006C, r24
        usbTxLen = USBPID_NAK;              /* прерываем ожидающую передачу */
 3ca:	8a e5       	ldi	r24, 0x5A	; 90
 3cc:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
 3d0:	10 92 69 00 	sts	0x0069, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* стандартные запросы обрабатыватся драйвером */
 3d4:	88 81       	ld	r24, Y
 3d6:	80 76       	andi	r24, 0x60	; 96
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
 3da:	ce 01       	movw	r24, r28
 3dc:	09 df       	rcall	.-494    	; 0x1f0 <usbFunctionSetup>
 3de:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* используется предоставляемая пользователем функция чтения/записи */
 3e0:	8f 3f       	cpi	r24, 0xFF	; 255
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <usbPoll+0x52>
 3e4:	79 c0       	rjmp	.+242    	; 0x4d8 <usbPoll+0x144>
 3e6:	7f c0       	rjmp	.+254    	; 0x4e6 <usbPoll+0x152>
 * стандартных запросов вместо класса и стандартных запросов.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* здесь 2 байта свободного пространства в конце буфера */
uchar   value = rq->wValue.bytes[0];
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* общий ответ по умолчанию на USBRQ_GET_STATUS и USBRQ_GET_INTERFACE */
 3ea:	10 92 75 00 	sts	0x0075, r1
    SWITCH_START(rq->bRequest)
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 3f0:	88 23       	and	r24, r24
 3f2:	21 f4       	brne	.+8      	; 0x3fc <usbPoll+0x68>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* запрос статуса для конечной точки 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 3f4:	10 92 76 00 	sts	0x0076, r1
 3f8:	22 e0       	ldi	r18, 0x02	; 2
 3fa:	67 c0       	rjmp	.+206    	; 0x4ca <usbPoll+0x136>
        if(value == 0 && index == 0x81){    /* особенность (feature) 0 == HALT для конечной точки == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 3fc:	85 30       	cpi	r24, 0x05	; 5
 3fe:	19 f4       	brne	.+6      	; 0x406 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 400:	90 93 89 00 	sts	0x0089, r25
 404:	61 c0       	rjmp	.+194    	; 0x4c8 <usbPoll+0x134>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 406:	86 30       	cpi	r24, 0x06	; 6
 408:	09 f0       	breq	.+2      	; 0x40c <usbPoll+0x78>
 40a:	4a c0       	rjmp	.+148    	; 0x4a0 <usbPoll+0x10c>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	19 f4       	brne	.+6      	; 0x418 <usbPoll+0x84>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 412:	8e e5       	ldi	r24, 0x5E	; 94
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	1b c0       	rjmp	.+54     	; 0x44e <usbPoll+0xba>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	41 f4       	brne	.+16     	; 0x42c <usbPoll+0x98>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 41c:	80 e7       	ldi	r24, 0x70	; 112
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	90 93 87 00 	sts	0x0087, r25
 424:	80 93 86 00 	sts	0x0086, r24
 428:	22 e2       	ldi	r18, 0x22	; 34
 42a:	36 c0       	rjmp	.+108    	; 0x498 <usbPoll+0x104>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 42c:	83 30       	cpi	r24, 0x03	; 3
 42e:	f9 f4       	brne	.+62     	; 0x46e <usbPoll+0xda>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 430:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 432:	88 23       	and	r24, r24
 434:	41 f4       	brne	.+16     	; 0x446 <usbPoll+0xb2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 436:	84 e3       	ldi	r24, 0x34	; 52
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 87 00 	sts	0x0087, r25
 43e:	80 93 86 00 	sts	0x0086, r24
 442:	24 e0       	ldi	r18, 0x04	; 4
 444:	29 c0       	rjmp	.+82     	; 0x498 <usbPoll+0x104>
        SWITCH_CASE(1)
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	41 f4       	brne	.+16     	; 0x45a <usbPoll+0xc6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 44a:	88 e3       	ldi	r24, 0x38	; 56
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	90 93 87 00 	sts	0x0087, r25
 452:	80 93 86 00 	sts	0x0086, r24
 456:	22 e1       	ldi	r18, 0x12	; 18
 458:	1f c0       	rjmp	.+62     	; 0x498 <usbPoll+0x104>
        SWITCH_CASE(2)
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	e1 f4       	brne	.+56     	; 0x496 <usbPoll+0x102>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 45e:	8a e4       	ldi	r24, 0x4A	; 74
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	90 93 87 00 	sts	0x0087, r25
 466:	80 93 86 00 	sts	0x0086, r24
 46a:	24 e1       	ldi	r18, 0x14	; 20
 46c:	15 c0       	rjmp	.+42     	; 0x498 <usbPoll+0x104>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* если разрешено, поддерживает только дескрипторы HID */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 46e:	81 32       	cpi	r24, 0x21	; 33
 470:	41 f4       	brne	.+16     	; 0x482 <usbPoll+0xee>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 472:	82 e8       	ldi	r24, 0x82	; 130
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	90 93 87 00 	sts	0x0087, r25
 47a:	80 93 86 00 	sts	0x0086, r24
 47e:	29 e0       	ldi	r18, 0x09	; 9
 480:	0b c0       	rjmp	.+22     	; 0x498 <usbPoll+0x104>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 482:	82 32       	cpi	r24, 0x22	; 34
 484:	41 f4       	brne	.+16     	; 0x496 <usbPoll+0x102>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 486:	8e e1       	ldi	r24, 0x1E	; 30
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	90 93 87 00 	sts	0x0087, r25
 48e:	80 93 86 00 	sts	0x0086, r24
 492:	26 e1       	ldi	r18, 0x16	; 22
 494:	01 c0       	rjmp	.+2      	; 0x498 <usbPoll+0x104>
 496:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 498:	80 e4       	ldi	r24, 0x40	; 64
 49a:	80 93 69 00 	sts	0x0069, r24
 49e:	23 c0       	rjmp	.+70     	; 0x4e6 <usbPoll+0x152>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 4a0:	88 30       	cpi	r24, 0x08	; 8
 4a2:	21 f4       	brne	.+8      	; 0x4ac <usbPoll+0x118>
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	8b e8       	ldi	r24, 0x8B	; 139
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	11 c0       	rjmp	.+34     	; 0x4ce <usbPoll+0x13a>
        dataPtr = &usbConfiguration;  /* отправка величины текущей конфигурации */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 4ac:	89 30       	cpi	r24, 0x09	; 9
 4ae:	19 f4       	brne	.+6      	; 0x4b6 <usbPoll+0x122>
        usbConfiguration = value;
 4b0:	90 93 8b 00 	sts	0x008B, r25
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <usbPoll+0x134>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 4b6:	8a 30       	cpi	r24, 0x0A	; 10
 4b8:	11 f4       	brne	.+4      	; 0x4be <usbPoll+0x12a>
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <usbPoll+0x136>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 4be:	8b 30       	cpi	r24, 0x0B	; 11
 4c0:	19 f4       	brne	.+6      	; 0x4c8 <usbPoll+0x134>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* сброс переключения данных для конечной точки прерывания */
 4c2:	8b e4       	ldi	r24, 0x4B	; 75
 4c4:	80 93 78 00 	sts	0x0078, r24
 4c8:	20 e0       	ldi	r18, 0x00	; 0
 4ca:	85 e7       	ldi	r24, 0x75	; 117
 4cc:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Должны мы добавить здесь дополнительный хук? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 4ce:	90 93 87 00 	sts	0x0087, r25
 4d2:	80 93 86 00 	sts	0x0086, r24
 4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <usbPoll+0x152>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* используется предоставляемая пользователем функция чтения/записи */
            /* делаем некоторое создание условий на replyLen */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 4d8:	88 81       	ld	r24, Y
 4da:	87 fd       	sbrc	r24, 7
                replyLen = rq->wLength.bytes[0];    /* только передачи IN */
 4dc:	2e 81       	ldd	r18, Y+6	; 0x06
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 4de:	80 e8       	ldi	r24, 0x80	; 128
 4e0:	80 93 69 00 	sts	0x0069, r24
 4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <usbPoll+0x15e>
        }else   /* 'else' предотвращает лимит replyLen USB_NO_MSG для максимальной длины передачи. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* помогаем компилятору с оптимизацией */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* ограничить длину до max */
 4e6:	8f 81       	ldd	r24, Y+7	; 0x07
 4e8:	88 23       	and	r24, r24
 4ea:	19 f4       	brne	.+6      	; 0x4f2 <usbPoll+0x15e>
 4ec:	8e 81       	ldd	r24, Y+6	; 0x06
 4ee:	82 17       	cp	r24, r18
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <usbPoll+0x160>
 4f2:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     														/* ограничить длину до max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 4f4:	80 93 61 00 	sts	0x0061, r24
 4f8:	10 c0       	rjmp	.+32     	; 0x51a <usbPoll+0x186>
    }else{  /* usbRxToken должен быть USBPID_OUT, что означает фазу данных setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 4fa:	80 91 69 00 	lds	r24, 0x0069
 4fe:	87 ff       	sbrs	r24, 7
 500:	0c c0       	rjmp	.+24     	; 0x51a <usbPoll+0x186>
            uchar rval = usbFunctionWrite(data, len);
 502:	ce 01       	movw	r24, r28
 504:	28 de       	rcall	.-944    	; 0x156 <usbFunctionWrite>
            if(rval == 0xff){   /* произошла ошибка */
 506:	8f 3f       	cpi	r24, 0xFF	; 255
 508:	21 f4       	brne	.+8      	; 0x512 <usbPoll+0x17e>
                usbTxLen = USBPID_STALL;
 50a:	8e e1       	ldi	r24, 0x1E	; 30
 50c:	80 93 60 00 	sts	0x0060, r24
 510:	04 c0       	rjmp	.+8      	; 0x51a <usbPoll+0x186>
            }else if(rval != 0){    /* Это последний пакет */
 512:	88 23       	and	r24, r24
 514:	11 f0       	breq	.+4      	; 0x51a <usbPoll+0x186>
                usbMsgLen = 0;  /* ответ пакетом нулевой длины */
 516:	10 92 61 00 	sts	0x0061, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* если не деактивировано, доступен только mark */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx буфер как доступно */
 51a:	10 92 88 00 	sts	0x0088, r1
#endif
    }
    if(usbTxLen & 0x10){    /* передача system idle */
 51e:	80 91 60 00 	lds	r24, 0x0060
 522:	84 ff       	sbrs	r24, 4
 524:	58 c0       	rjmp	.+176    	; 0x5d6 <usbPoll+0x242>
        if(usbMsgLen != USB_NO_MSG){    /* данные для передачи в ожидании? */
 526:	80 91 61 00 	lds	r24, 0x0061
 52a:	8f 3f       	cpi	r24, 0xFF	; 255
 52c:	09 f4       	brne	.+2      	; 0x530 <usbPoll+0x19c>
 52e:	53 c0       	rjmp	.+166    	; 0x5d6 <usbPoll+0x242>
 530:	18 2f       	mov	r17, r24
 532:	89 30       	cpi	r24, 0x09	; 9
 534:	08 f0       	brcs	.+2      	; 0x538 <usbPoll+0x1a4>
 536:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 538:	81 1b       	sub	r24, r17
 53a:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* переключение DATA */
 53e:	80 91 6c 00 	lds	r24, 0x006C
 542:	98 e8       	ldi	r25, 0x88	; 136
 544:	89 27       	eor	r24, r25
 546:	80 93 6c 00 	sts	0x006C, r24
/* Эта функция эквивалентна usbFunctionRead(), но она также вызывается для 
 *  данных, автоматически обрабатываемых драйвером (например, чтение дескриптора).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* не беспокоим приложение чтениями нулевого размера */
 54a:	11 23       	and	r17, r17
 54c:	91 f1       	breq	.+100    	; 0x5b2 <usbPoll+0x21e>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 54e:	80 91 69 00 	lds	r24, 0x0069
 552:	87 ff       	sbrs	r24, 7
 554:	08 c0       	rjmp	.+16     	; 0x566 <usbPoll+0x1d2>
            len = usbFunctionRead(data, len);
 556:	8d e6       	ldi	r24, 0x6D	; 109
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	61 2f       	mov	r22, r17
 55c:	b6 dd       	rcall	.-1172   	; 0xca <usbFunctionRead>
 55e:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* переключение DATA */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* допустимый пакет данных */
 560:	89 30       	cpi	r24, 0x09	; 9
 562:	98 f5       	brcc	.+102    	; 0x5ca <usbPoll+0x236>
 564:	26 c0       	rjmp	.+76     	; 0x5b2 <usbPoll+0x21e>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 566:	20 91 86 00 	lds	r18, 0x0086
 56a:	30 91 87 00 	lds	r19, 0x0087
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* данные ROM */
 56e:	86 ff       	sbrs	r24, 6
 570:	0d c0       	rjmp	.+26     	; 0x58c <usbPoll+0x1f8>
 572:	ad e6       	ldi	r26, 0x6D	; 109
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = PRG_RDB(r);    /* назначаем переменную char для включения байтовых операций */
 57a:	f9 01       	movw	r30, r18
 57c:	e8 0f       	add	r30, r24
 57e:	f9 1f       	adc	r31, r25
 580:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 582:	ed 93       	st	X+, r30
 584:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 586:	18 17       	cp	r17, r24
 588:	c1 f7       	brne	.-16     	; 0x57a <usbPoll+0x1e6>
 58a:	08 c0       	rjmp	.+16     	; 0x59c <usbPoll+0x208>
 58c:	91 2f       	mov	r25, r17
 58e:	d9 01       	movw	r26, r18
 590:	ed e6       	ldi	r30, 0x6D	; 109
 592:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* данные RAM */
                do{
                    *data++ = *r++;
 594:	8d 91       	ld	r24, X+
 596:	81 93       	st	Z+, r24
                }while(--i);
 598:	91 50       	subi	r25, 0x01	; 1
 59a:	e1 f7       	brne	.-8      	; 0x594 <usbPoll+0x200>
 59c:	11 50       	subi	r17, 0x01	; 1
 59e:	81 2f       	mov	r24, r17
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	1f 5f       	subi	r17, 0xFF	; 255
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	82 0f       	add	r24, r18
 5a8:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 5aa:	90 93 87 00 	sts	0x0087, r25
 5ae:	80 93 86 00 	sts	0x0086, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* переключение DATA */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* допустимый пакет данных */
        usbCrc16Append(&usbTxBuf[1], len);
 5b2:	8d e6       	ldi	r24, 0x6D	; 109
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	61 2f       	mov	r22, r17
 5b8:	3e d0       	rcall	.+124    	; 0x636 <usbCrc16Append>
        len += 4;           /* длина включая байт sync */
 5ba:	61 2f       	mov	r22, r17
 5bc:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* часть пакета идентифицирует конец сообщения */
 5be:	6c 30       	cpi	r22, 0x0C	; 12
 5c0:	41 f0       	breq	.+16     	; 0x5d2 <usbPoll+0x23e>
            usbMsgLen = USB_NO_MSG;
 5c2:	8f ef       	ldi	r24, 0xFF	; 255
 5c4:	80 93 61 00 	sts	0x0061, r24
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <usbPoll+0x23e>
    }else{
        len = USBPID_STALL;   /* остановка конечной точки */
        usbMsgLen = USB_NO_MSG;
 5ca:	8f ef       	ldi	r24, 0xFF	; 255
 5cc:	80 93 61 00 	sts	0x0061, r24
 5d0:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
 5d2:	60 93 60 00 	sts	0x0060, r22
 5d6:	9a e0       	ldi	r25, 0x0A	; 10
        if(usbMsgLen != USB_NO_MSG){    /* данные для передачи в ожидании? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 5d8:	86 b3       	in	r24, 0x16	; 22
        if(usbLineStatus != 0)  /* SE0 завершился */
 5da:	85 70       	andi	r24, 0x05	; 5
 5dc:	31 f4       	brne	.+12     	; 0x5ea <usbPoll+0x256>
    if(usbTxLen & 0x10){    /* передача system idle */
        if(usbMsgLen != USB_NO_MSG){    /* данные для передачи в ожидании? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
 5de:	91 50       	subi	r25, 0x01	; 1
 5e0:	d9 f7       	brne	.-10     	; 0x5d8 <usbPoll+0x244>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 завершился */
            break;
    }
    if(i == 0){ /* состояние RESET, вызывается несколько раз во время сброса */
        usbNewDeviceAddr = 0;
 5e2:	10 92 89 00 	sts	0x0089, r1
        usbDeviceAddr = 0;
 5e6:	10 92 83 00 	sts	0x0083, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 5ea:	10 e0       	ldi	r17, 0x00	; 0
 5ec:	99 23       	and	r25, r25
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <usbPoll+0x25e>
 5f0:	11 e0       	ldi	r17, 0x01	; 1

    if(wasReset != isReset){
 5f2:	80 91 68 00 	lds	r24, 0x0068
 5f6:	81 17       	cp	r24, r17
 5f8:	29 f0       	breq	.+10     	; 0x604 <usbPoll+0x270>
        USB_RESET_HOOK(isReset);
 5fa:	11 23       	and	r17, r17
 5fc:	09 f4       	brne	.+2      	; 0x600 <usbPoll+0x26c>
 5fe:	4e de       	rcall	.-868    	; 0x29c <usbEventResetReady>
        wasReset = isReset;
 600:	10 93 68 00 	sts	0x0068, r17
        usbDeviceAddr = 0;
        usbResetStall();
        DBG1(0xff, 0, 0);
    }
    usbHandleResetHook(i);
}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	08 95       	ret

0000060c <usbCrc16>:
;   r20/21: polynomial
;   r23: scratch
;   r24/25: crc-sum
;   r26/27=X: ptr
usbCrc16:
    mov     ptrL, argPtrL
 60c:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 60e:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 610:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 612:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 614:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 616:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1
 618:	60 95       	com	r22

0000061a <crcByteLoop>:
crcByteLoop:
    subi    argLen, -1
 61a:	6f 5f       	subi	r22, 0xFF	; 255
    brcc    crcReady    ; модифицированный цикл, чтобы удостовериться, что перенос установится далее
 61c:	58 f4       	brcc	.+22     	; 0x634 <crcReady>
    ld      byte, ptr+
 61e:	2d 91       	ld	r18, X+
    ldi     bitCnt, -8  ; странный счетчик цикла, чтобы удостовериться, что перенос установится там, где нам нужно
 620:	38 ef       	ldi	r19, 0xF8	; 248
    eor     resCrcL, byte
 622:	82 27       	eor	r24, r18

00000624 <crcBitLoop>:
crcBitLoop:
    ror     resCrcH     ; перенос всегда устанавливается здесь
 624:	97 95       	ror	r25
    ror     resCrcL
 626:	87 95       	ror	r24
    brcs    crcNoXor
 628:	10 f0       	brcs	.+4      	; 0x62e <crcNoXor>
    eor     resCrcL, polyL
 62a:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 62c:	95 27       	eor	r25, r21

0000062e <crcNoXor>:
crcNoXor:
    subi    bitCnt, -1
 62e:	3f 5f       	subi	r19, 0xFF	; 255
    brcs    crcBitLoop
 630:	c8 f3       	brcs	.-14     	; 0x624 <crcBitLoop>
    rjmp    crcByteLoop
 632:	f3 cf       	rjmp	.-26     	; 0x61a <crcByteLoop>

00000634 <crcReady>:
crcReady:
    ret
 634:	08 95       	ret

00000636 <usbCrc16Append>:
; Благодарим Reimar Doeffinger за оптимизацию подрограммы CRC!

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 636:	ea df       	rcall	.-44     	; 0x60c <usbCrc16>
    st      ptr+, resCrcL
 638:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 63a:	9d 93       	st	X+, r25
    ret
 63c:	08 95       	ret

0000063e <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; возвращает время между двумя стробами idle в перемножении на 7 тактов CPU
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; ждем ~ 10 мс, чтобы D- == 0
 63e:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
 640:	88 27       	eor	r24, r24
    clr     cnt16H
 642:	99 27       	eor	r25, r25

00000644 <usbMFTime16>:
usbMFTime16:
    dec     cntH
 644:	aa 95       	dec	r26
    breq    usbMFTimeout
 646:	69 f0       	breq	.+26     	; 0x662 <usbMFTimeout>

00000648 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; первое ожидание D- == 0 (строб idle)
    sbiw    cnt16, 1        ;[0] [6]
 648:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
 64a:	e1 f3       	breq	.-8      	; 0x644 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
 64c:	b0 99       	sbic	0x16, 0	; 22
    rjmp    usbMFWaitStrobe ;[4]
 64e:	fc cf       	rjmp	.-8      	; 0x648 <usbMFWaitStrobe>

00000650 <usbMFWaitIdle>:
usbMFWaitIdle:              ; потом ждем, пока idle не появится снова
    sbis    USBIN, USBMINUS ;1 ждем D- == 1
 650:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    usbMFWaitIdle   ;2
 652:	fe cf       	rjmp	.-4      	; 0x650 <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 представляет циклы пока еще
 654:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
 656:	99 27       	eor	r25, r25

00000658 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
 658:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
 65a:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
 65c:	11 f0       	breq	.+4      	; 0x662 <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
 65e:	a5 70       	andi	r26, 0x05	; 5
    brne    usbMFWaitLoop   ;[5]
 660:	d9 f7       	brne	.-10     	; 0x658 <usbMFWaitLoop>

00000662 <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
 662:	08 95       	ret

00000664 <__vector_1>:
; когда инструкция стартует


USB_INTR_VECTOR:
;порядок сохранения регистров: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push только если нужно синхр. со срезом ASAP
 664:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
 666:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
 668:	cf 93       	push	r28

0000066a <waitForJ>:
;----------------------------------------------------------------------------
;паттерн sync-байта (D-) от младшего (LSb) до старшего (MSb) бита: 01010100 [1 = ожидание (idle) = J, 0 = K]
;sync от J до среза K во время паттерна sync -- использование самых быстрых циклов
;первая часть не имеет таймаута, поскольку она ожидает IDLE или SE1 (== отключено)
waitForJ:
    sbis    USBIN, USBMINUS     ;[-18] ожидаем D- == 1
 66a:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    waitForJ
 66c:	fe cf       	rjmp	.-4      	; 0x66a <waitForJ>

0000066e <waitForK>:
waitForK:
;следующий код приводит к окну выборки < 1/4 бита, которое соответствует спецификации.
    sbis    USBIN, USBMINUS     ;[-15]
 66e:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK              ;[-14]
 670:	0b c0       	rjmp	.+22     	; 0x688 <foundK>
    sbis    USBIN, USBMINUS
 672:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 674:	09 c0       	rjmp	.+18     	; 0x688 <foundK>
    sbis    USBIN, USBMINUS
 676:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 678:	07 c0       	rjmp	.+14     	; 0x688 <foundK>
    sbis    USBIN, USBMINUS
 67a:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 67c:	05 c0       	rjmp	.+10     	; 0x688 <foundK>
    sbis    USBIN, USBMINUS
 67e:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 680:	03 c0       	rjmp	.+6      	; 0x688 <foundK>
    sbis    USBIN, USBMINUS
 682:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 684:	01 c0       	rjmp	.+2      	; 0x688 <foundK>
#if USB_COUNT_SOF
    lds     YL, usbSofCount
    inc     YL
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
    rjmp    sofError
 686:	d5 c0       	rjmp	.+426    	; 0x832 <sofError>

00000688 <foundK>:
foundK:                         ;[-12]
;{3, 5} после спада на D- средняя задержка: 4 цикла [нам нужно 5 для центрирования выборки]
; выборка. Числа в скобках - циклы от центра первого sync (двойное K) бита 
; после инструкции
    push    r0                  ;[-12]
 688:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
 68a:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
 68c:	c0 91 85 00 	lds	r28, 0x0085
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
 690:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [инициализация цикла rx]
 692:	c4 57       	subi	r28, 0x74	; 116
    sbci    YH, hi8(-(usbRxBuf));[-4] [инициализация цикла rx]
 694:	df 4f       	sbci	r29, 0xFF	; 255
    mov     r0, x2              ;[-3] [инициализация цикла rx]
 696:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] нам нужно 2 бита K (выборка 2 цикла слишком ранняя)
 698:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK        ;[-1]
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <haveTwoBitsK>
    pop     YH                  ;[0] отмена предыдущего push
 69c:	df 91       	pop	r29
    pop     r0                  ;[2]
 69e:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] это не был конец sync, пробуем еще раз
 6a0:	e6 cf       	rjmp	.-52     	; 0x66e <waitForK>

000006a2 <haveTwoBitsK>:

;----------------------------------------------------------------------------
; сохраняем регистры и инициализируем переменные, когда мы выбираем первые биты:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
 6a2:	2f 93       	push	r18
    push    x1              ;[3]
 6a4:	0f 93       	push	r16
    push    x2              ;[5]
 6a6:	1f 93       	push	r17
    push    x3              ;[7]
 6a8:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [инициализация цикла rx]
 6aa:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [инициализация цикла rx] == установка x3, очистка флага нуля
 6ac:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- выборка бита 0
 6ae:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
 6b0:	00 fb       	bst	r16, 0
    bld     shift, 0        ;[13]
 6b2:	20 f9       	bld	r18, 0
    push    x4              ;[14] == фаза
 6b4:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
 6b6:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [инициализация цикла rx]
 6b8:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [инициализация цикла rx]
 6ba:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
 6bc:	65 c0       	rjmp	.+202    	; 0x788 <rxbit1>

000006be <continueWithBit5>:
bit 7: переход, фиксация bitstuff
; 87 [+ 2] цикла
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- бит 5
 6be:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
 6c0:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
 6c2:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
 6c4:	50 fd       	sbrc	r21, 0
    lpm                     ;[059] дополнительный nop3; меняет r0
 6c6:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- фаза
 6c8:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
 6ca:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
 6cc:	00 fb       	bst	r16, 0
    bld     shift, 5        ;[063]
 6ce:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
 6d0:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- бит 6
 6d2:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff выход
 6d4:	b1 f0       	breq	.+44     	; 0x702 <unstuff5>
    eor     phase, x1       ;[067]
 6d6:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
 6d8:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
 6da:	10 fb       	bst	r17, 0
    bld     shift, 6        ;[070]
 6dc:	26 f9       	bld	r18, 6

000006de <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- фаза
 6de:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
 6e0:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff выход
 6e2:	f0 f0       	brcs	.+60     	; 0x720 <unstuff6>

000006e4 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- бит 7
 6e6:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
 6e8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
 6ea:	00 fb       	bst	r16, 0
    bld     shift, 7        ;[079]
 6ec:	27 f9       	bld	r18, 7

000006ee <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
 6ee:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
 6f0:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- фаза
 6f2:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
 6f4:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
 6f6:	e8 f5       	brcc	.+122    	; 0x772 <rxLoop>

000006f8 <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
 6f8:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
 6fa:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- выборка stuffed бита 7
 6fc:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
 6fe:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
 700:	f6 cf       	rjmp	.-20     	; 0x6ee <didUnstuff7>

00000702 <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
 702:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
 704:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
 706:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- фаза
 708:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
 70a:	10 2f       	mov	r17, r16
    nop                     ;[073]
 70c:	00 00       	nop
    nop2                    ;[074]
 70e:	00 c0       	rjmp	.+0      	; 0x710 <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- бит 6
 710:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
 712:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
 714:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
 716:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
 718:	10 fb       	bst	r17, 0
    bld     shift, 6        ;[081] не нужно проверять, только что это было
 71a:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
 71c:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
 71e:	e2 cf       	rjmp	.-60     	; 0x6e4 <didUnstuff5>

00000720 <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
 720:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- снова бит 6
 722:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
 724:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
 726:	00 c0       	rjmp	.+0      	; 0x728 <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
 728:	da cf       	rjmp	.-76     	; 0x6de <didUnstuff6>

0000072a <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
 72a:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
 72c:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] проверка SE0
 72e:	15 70       	andi	r17, 0x05	; 5
    in      r0, USBIN       ;[017] <-- фаза
 730:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] прямой переход к se0 был бы слишком длинным
 732:	69 f1       	breq	.+90     	; 0x78e <didUnstuff0>
    andi    x3, ~0x01       ;[019]
 734:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
 736:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] перемещаем имеющуюся выборку
 738:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- снова бит 1
 73a:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
 73c:	28 c0       	rjmp	.+80     	; 0x78e <didUnstuff0>

0000073e <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
 73e:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
 740:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
 742:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- фаза
 744:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
 746:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
 748:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
 74a:	29 c0       	rjmp	.+82     	; 0x79e <didUnstuff1>

0000074c <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
 74c:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
 74e:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
 750:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- фаза
 752:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
 754:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
 756:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
 758:	2d c0       	rjmp	.+90     	; 0x7b4 <didUnstuff2>

0000075a <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- снова бит 3
 75a:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
 75c:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
 75e:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
 760:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
 762:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
 764:	00 00       	nop
    in      r0, USBIN       ;[050] <-- фаза
 766:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
 768:	2e c0       	rjmp	.+92     	; 0x7c6 <didUnstuff3>

0000076a <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
 76a:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- снова бит 4
 76c:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
 76e:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
 770:	30 c0       	rjmp	.+96     	; 0x7d2 <didUnstuff4>

00000772 <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] реконструкция: x3 0 в месторасположении бита, которое мы поменяли, 1 для других
 772:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- бит 0
 774:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
 776:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
 778:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
 77a:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
 77c:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- фаза
 77e:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
 780:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
 782:	10 fb       	bst	r17, 0
    bld     shift, 0        ;[009]
 784:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
 786:	29 7f       	andi	r18, 0xF9	; 249

00000788 <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- бит 1
 788:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff выход
 78a:	79 f2       	breq	.-98     	; 0x72a <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 проверка для бита 1
 78c:	15 70       	andi	r17, 0x05	; 5

0000078e <didUnstuff0>:
didUnstuff0:                ;[   ] Z устанавливается только если мы детектировали SE0 в bitstuff
    breq    se0             ;[014]
 78e:	59 f1       	breq	.+86     	; 0x7e6 <se0>
    eor     r0, x2          ;[015]
 790:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
 792:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- фаза
 794:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
 796:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
 798:	00 fb       	bst	r16, 0
    bld     shift, 1        ;[020]
 79a:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
 79c:	23 7f       	andi	r18, 0xF3	; 243

0000079e <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- бит 2
 79e:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff выход
 7a0:	71 f2       	breq	.-100    	; 0x73e <unstuff1>
    eor     r0, x1          ;[024]
 7a2:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
 7a4:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] проверка переполнения
 7a6:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
 7a8:	d0 f0       	brcs	.+52     	; 0x7de <overflow>
    in      r0, USBIN       ;[028] <-- фаза
 7aa:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
 7ac:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
 7ae:	10 fb       	bst	r17, 0
    bld     shift, 2        ;[031]
 7b0:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
 7b2:	27 7e       	andi	r18, 0xE7	; 231

000007b4 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- бит 3
 7b4:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff выход
 7b6:	51 f2       	breq	.-108    	; 0x74c <unstuff2>
    eor     r0, x2          ;[035]
 7b8:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
 7ba:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
 7bc:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
 7be:	00 fb       	bst	r16, 0
    in      r0, USBIN       ;[039] <-- фаза
 7c0:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
 7c2:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
 7c4:	2f 7c       	andi	r18, 0xCF	; 207

000007c6 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff выход
 7c6:	49 f2       	breq	.-110    	; 0x75a <unstuff3>
    nop                     ;[043]
 7c8:	00 00       	nop
    in      x1, USBIN       ;[044] <-- бит 4
 7ca:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
 7cc:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
 7ce:	10 fb       	bst	r17, 0
    bld     shift, 4        ;[047]
 7d0:	24 f9       	bld	r18, 4

000007d2 <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
 7d2:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
 7d4:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- фаза
 7d6:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
 7d8:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff выход
 7da:	39 f2       	breq	.-114    	; 0x76a <unstuff4>
    rjmp    continueWithBit5;[053]
 7dc:	70 cf       	rjmp	.-288    	; 0x6be <continueWithBit5>

000007de <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 7de:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; очистка любых ожидающих прерываний
 7e0:	1a bf       	out	0x3a, r17	; 58

000007e2 <ignorePacket>:
ignorePacket:
    clr     token
 7e2:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 7e4:	19 c0       	rjmp	.+50     	; 0x818 <handleSetupOrOut>

000007e6 <se0>:
; Обработка принятого пакета (числа в скобках указывают на количество циков после середины SE0)
;----------------------------------------------------------------------------
;Здесь только выход типа non-error для цикла программы приема.
;Мы не проверяем любые CRC, потому что для вычислений нет времени.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 7e6:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 7e8:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 7ea:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 7ec:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 7ee:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] очистка ожидаемоко прерывания и далее проверка флага. SE0 должен закончиться.
 7f0:	1a bf       	out	0x3a, r17	; 58

    ld      token, y            ;[11]
 7f2:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 7f4:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 7f6:	09 f1       	breq	.+66     	; 0x83a <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 7f8:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 7fa:	f9 f0       	breq	.+62     	; 0x83a <handleData>
    lds     shift, usbDeviceAddr;[17]
 7fc:	20 91 83 00 	lds	r18, 0x0083
    ldd     x2, y+1             ;[19] ADDR и 1 бит номера конечной точки (endpoint)
 800:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] выдвинем 1 бит endpoint
 802:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 804:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 806:	ed cf       	rjmp	.-38     	; 0x7e2 <ignorePacket>
/* вычисляем только номер endpoint в x3, если требуется далее */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] номер endpoint + crc
 808:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] вдвинем младший бит (LSB) endpoint
 80a:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 80c:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 80e:	51 f1       	breq	.+84     	; 0x864 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 810:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 812:	11 f0       	breq	.+4      	; 0x818 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 814:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] должен быть ack, nak или что угодно
 816:	29 f7       	brne	.-54     	; 0x7e2 <ignorePacket>

00000818 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] индикация, что это endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 818:	00 93 8a 00 	sts	0x008A, r16

0000081c <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 циклов
 81c:	3f 91       	pop	r19
 81e:	5f 91       	pop	r21
 820:	4f 91       	pop	r20
 822:	1f 91       	pop	r17
 824:	0f 91       	pop	r16
 826:	2f 91       	pop	r18
 828:	df 91       	pop	r29
 82a:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
 82c:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] проверка, дошли ли данные
 82e:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] сохранение значений pop и push -- ожидается новое прерывание
 830:	1c cf       	rjmp	.-456    	; 0x66a <waitForJ>

00000832 <sofError>:
sofError:
    POP_RETI                    ;вызов макроса
 832:	cf 91       	pop	r28
 834:	cf bf       	out	0x3f, r28	; 63
 836:	cf 91       	pop	r28
    reti
 838:	18 95       	reti

0000083a <handleData>:

handleData:
    lds     token, usbCurrentTok;[18]
 83a:	00 91 8a 00 	lds	r16, 0x008A
    tst     token               ;[20]
 83e:	00 23       	and	r16, r16
    breq    doReturn            ;[21]
 840:	69 f3       	breq	.-38     	; 0x81c <doReturn>
    lds     x2, usbRxLen        ;[22]
 842:	10 91 88 00 	lds	r17, 0x0088
    tst     x2                  ;[24]
 846:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 848:	79 f5       	brne	.+94     	; 0x8a8 <sendNakAndReti>
; 2006-03-11: Следующие 2 строки исправляют проблему с тем, что устройство не распознается,
; если usbPoll() был вызван менее часто чем каждые 4 ms.
    cpi     cnt, 4              ;[26] пакеты с нулевым размером тольк фаза статуса -- игнорировать и ack
 84a:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] сохраняем rx буфер чистым -- мы не должны делать NAK в следующий SETUP
 84c:	7a f1       	brmi	.+94     	; 0x8ac <sendAckAndReti>
    sts     usbRxLen, cnt       ;[28] сохраняем принятые данные, меняем буферА
 84e:	30 93 88 00 	sts	0x0088, r19
    sts     usbRxToken, token   ;[30]
 852:	00 93 84 00 	sts	0x0084, r16
    lds     x2, usbInputBufOffset;[32] меняем буферА
 856:	10 91 85 00 	lds	r17, 0x0085
    ldi     cnt, USB_BUFSIZE    ;[34]
 85a:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 85c:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] буферА поменяны местами
 85e:	30 93 85 00 	sts	0x0085, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 до момента SOP
 862:	24 c0       	rjmp	.+72     	; 0x8ac <sendAckAndReti>

00000864 <handleIn>:

handleIn:
;Мы не отправляем какие бы то ни было данные пока код C не обработает текущие входные данные
; и потенциально обновленные выходные данные. Это более эффективно в смысле размера кода,
; чем очистка буферов tx когда пакет принят.
    lds     x1, usbRxLen        ;[30]
 864:	00 91 88 00 	lds	r16, 0x0088
    cpi     x1, 1               ;[32] отрицательные величины для управления потоком (flow control), 0 означает "буфер пуст"
 868:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] необработанный входной пакет?
 86a:	f4 f4       	brge	.+60     	; 0x8a8 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] подготовим величину для usbTxLen
 86c:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 содержит endpoint
 86e:	4f 70       	andi	r20, 0x0F	; 15
    brne    handleIn1           ;[36]
 870:	49 f4       	brne	.+18     	; 0x884 <handleIn1>
#endif
    lds     cnt, usbTxLen       ;[37]
 872:	30 91 60 00 	lds	r19, 0x0060
    sbrc    cnt, 4              ;[39] все символы handshake имеют набор из 4 бит
 876:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 до появления SOP
 878:	1a c0       	rjmp	.+52     	; 0x8ae <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK от кода ранее
 87a:	00 93 60 00 	sts	0x0060, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 87e:	cc e6       	ldi	r28, 0x6C	; 108
    ldi     YH, hi8(usbTxBuf)   ;[44]
 880:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 до появления SOP
 882:	19 c0       	rjmp	.+50     	; 0x8b6 <usbSendAndReti>

00000884 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 как предложил O.Tamura: поддержка второй INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 884:	30 91 77 00 	lds	r19, 0x0077
    sbrc    cnt, 4              ;[42] все символы handshake имеют набор из 4 бит
 888:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 до появления SOP
 88a:	11 c0       	rjmp	.+34     	; 0x8ae <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK от кода ранее
 88c:	00 93 77 00 	sts	0x0077, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 890:	c8 e7       	ldi	r28, 0x78	; 120
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 892:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 до появления SOP
 894:	10 c0       	rjmp	.+32     	; 0x8b6 <usbSendAndReti>

00000896 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Спецификация позволяет 7.5 бит от EOP до SOP для ответов

bitstuff7:
    eor     x1, x4          ;[4]
 896:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
 898:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C равен нулю (инструкция brcc)
 89a:	00 c0       	rjmp	.+0      	; 0x89c <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
 89c:	21 c0       	rjmp	.+66     	; 0x8e0 <didStuff7>

0000089e <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
 89e:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 8a0:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 цикла NOP, модифицирует r0
 8a2:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- вывод
 8a4:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
 8a6:	14 c0       	rjmp	.+40     	; 0x8d0 <didStuffN>

000008a8 <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
 8a8:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
 8aa:	01 c0       	rjmp	.+2      	; 0x8ae <sendCntAndReti>

000008ac <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 8ac:	32 ed       	ldi	r19, 0xD2	; 210

000008ae <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
 8ae:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 адрес равен 0
 8b0:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
 8b2:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 8b4:	32 e0       	ldi	r19, 0x02	; 2

000008b6 <usbSendAndReti>:
;указатель на данные в 'Y'
;количество байт в 'cnt' -- включая байт sync [диапазон 2 ... 12]
;используются: x1...x4, shift, cnt, Y
;числа в скобках определяет время с тех пор, как первый бит синхронизирующего шаблона (sync pattern) послан
usbSendAndReti:             ; 12 циклов пока не появится SOP
    in      x2, USBDDR      ;[-12]
 8b6:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
 8b8:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS;[-10] подготовка состояния ожидания (idle); D+ и D- должны быть в 0 (без нагрузочных резисторов (pullups))
 8ba:	c0 9a       	sbi	0x18, 0	; 24
    in      x1, USBOUT      ;[-8] зеркалирование порта для цикла передачи (tx)
 8bc:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- получение шины
 8be:	17 bb       	out	0x17, r17	; 23
; не нужно инициализировать x2 (история bitstuff (вставки неинформационных бит)), поскольку sync стартует с 0
    ldi     x4, USBMASK     ;[-6] маска exor (исключающее ИЛИ)
 8c0:	55 e0       	ldi	r21, 0x05	; 5
    ldi     shift, 0x80     ;[-5] байт sync - первый из отправляемых байт
 8c2:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] инициализируем счетчик цикла/бит, работает для количества до 12 байт
 8c4:	4f ef       	ldi	r20, 0xFF	; 255

000008c6 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
 8c6:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
 8c8:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- вывод
 8ca:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
 8cc:	27 95       	ror	r18
    ror     x2              ;[1]
 8ce:	17 95       	ror	r17

000008d0 <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 8d0:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 8d2:	28 f7       	brcc	.-54     	; 0x89e <bitstuffN>
    nop                     ;[4]
 8d4:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
 8d6:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] когда мы покидаем цикл, bitStatus имеет почти начальное значение
 8d8:	b0 f7       	brcc	.-20     	; 0x8c6 <bitloop>
    sbrs    shift, 0        ;[7]
 8da:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 8dc:	05 27       	eor	r16, r21
    ror     shift           ;[9]
 8de:	27 95       	ror	r18

000008e0 <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- вывод
 8e0:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
 8e2:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
 8e4:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
 8e6:	b8 f6       	brcc	.-82     	; 0x896 <bitstuff7>
    ld      shift, y+       ;[3]
 8e8:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
 8ea:	3a 95       	dec	r19
    brne    byteloop        ;[6]
 8ec:	61 f7       	brne	.-40     	; 0x8c6 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] подготовка SE0 [спецификация говорит, что EOP может быть от 21 до 25 циклов]
 8ee:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[8]
 8f0:	10 91 89 00 	lds	r17, 0x0089
    lsl     x2              ;[10] мы сравниваем с влево сдвинутым адресом
 8f4:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- вывод SE0-- теперь от 2 bits==20 циклов пока шина в состоянии ожидания (idle)
 8f6:	08 bb       	out	0x18, r16	; 24
;2006-03-06: перенесена передача нового адреса в usbDeviceAddr из кода C в ассемблер:
;установка адреса только после того, как пакет данных отправлен, не после рукопожатия (handshake)
    subi    YL, 2           ;[0] только назначает адрес на пакеты данных, нет ACK/NAK в r0
 8f8:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
 8fa:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
 8fc:	11 f0       	breq	.+4      	; 0x902 <skipAddrAssign>
    sts     usbDeviceAddr, x2; если не пропущено: SE0 на один цикл длиннее
 8fe:	10 93 83 00 	sts	0x0083, r17

00000902 <skipAddrAssign>:
skipAddrAssign:
;конец передачи usbDeviceAddress
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 произошло во время TX -- очистка флага ожидания очереди
 902:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
 904:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
 906:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR      ;[7]
 908:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] установка обоих ножек на ввод
 90a:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1          ;[9]
 90c:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] конфигурируем отсутствие нагрузочных резисторов (pullup) на обоих ножках
 90e:	4a 7f       	andi	r20, 0xFA	; 250
    ldi     x4, 4           ;[11]
 910:	54 e0       	ldi	r21, 0x04	; 4

00000912 <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
 912:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
 914:	f1 f7       	brne	.-4      	; 0x912 <se0Delay>
    out     USBOUT, x1      ;[23] <-- вывод J (idle) -- окончание SE0 (сигнал EOP)
 916:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- теперь освобождение шины
 918:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- убедимся в том, что нет активных нагрузочных (pull-up) резисторов
 91a:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
 91c:	7f cf       	rjmp	.-258    	; 0x81c <doReturn>

0000091e <__eerd_byte_tn85>:
 91e:	e1 99       	sbic	0x1c, 1	; 28
 920:	fe cf       	rjmp	.-4      	; 0x91e <__eerd_byte_tn85>
 922:	9f bb       	out	0x1f, r25	; 31
 924:	8e bb       	out	0x1e, r24	; 30
 926:	e0 9a       	sbi	0x1c, 0	; 28
 928:	99 27       	eor	r25, r25
 92a:	8d b3       	in	r24, 0x1d	; 29
 92c:	08 95       	ret

0000092e <__eewr_byte_tn85>:
 92e:	26 2f       	mov	r18, r22

00000930 <__eewr_r18_tn85>:
 930:	e1 99       	sbic	0x1c, 1	; 28
 932:	fe cf       	rjmp	.-4      	; 0x930 <__eewr_r18_tn85>
 934:	1c ba       	out	0x1c, r1	; 28
 936:	9f bb       	out	0x1f, r25	; 31
 938:	8e bb       	out	0x1e, r24	; 30
 93a:	2d bb       	out	0x1d, r18	; 29
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	f8 94       	cli
 940:	e2 9a       	sbi	0x1c, 2	; 28
 942:	e1 9a       	sbi	0x1c, 1	; 28
 944:	0f be       	out	0x3f, r0	; 63
 946:	01 96       	adiw	r24, 0x01	; 1
 948:	08 95       	ret

0000094a <_exit>:
 94a:	f8 94       	cli

0000094c <__stop_program>:
 94c:	ff cf       	rjmp	.-2      	; 0x94c <__stop_program>
